#include <stdlib.h>
#include <stdio.h>
#include <stddef.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <pthread.h>
#include <sys/iofunc.h>
#include <sys/dispatch.h>

dispatch_t              *dpp;
resmgr_attr_t           resmgr_attr;
dispatch_context_t      *ctp;
resmgr_connect_funcs_t  connect_funcs;
resmgr_io_funcs_t       io_funcs;
iofunc_attr_t           io_attr;

int io_read(resmgr_context_t *ctp, io_read_t *msg, iofunc_ocb_t *ocb);
int io_write(resmgr_context_t *ctp, io_write_t *msg, RESMGR_OCB_T *ocb);
void* counter_manipulator();

uint32_t counter = 0;
uint8_t  dir = 0;

pthread_mutex_t dir_mut			= PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t counter_mut 	= PTHREAD_MUTEX_INITIALIZER;


void error(char *s)
{
	perror(s);
	exit(EXIT_FAILURE);
}

int main(int argc, char *argv[]) {
	printf("Start resource manager\n");

	// create dispatch.
	if (!(dpp = dispatch_create()))
		error("Create dispatch");

	// initialize resource manager attributes.
	memset(&resmgr_attr, 0, sizeof(resmgr_attr));
	resmgr_attr.nparts_max = 1;
	resmgr_attr.msg_max_size = 2048;

	// set standard connect and io functions.
	iofunc_func_init(_RESMGR_CONNECT_NFUNCS, &connect_funcs, _RESMGR_IO_NFUNCS, &io_funcs);
	iofunc_attr_init(&io_attr, S_IFNAM | 0666, 0, 0);

	// override functions
	io_funcs.read = io_read;
	io_funcs.write = io_write;
	//io_funcs.write = io_write;

	// establish resource manager
	if (resmgr_attach(dpp, &resmgr_attr, "/dev/myresource", _FTYPE_ANY, 0, &connect_funcs, &io_funcs, &io_attr) < 0)
		error("Resmanager attach");
	ctp = dispatch_context_alloc(dpp);

	pthread_t counter;
	pthread_create(&counter, NULL, &counter_manipulator, NULL);

	// wait forever, handling messages.
	while(1)
	{
		if (!(ctp = dispatch_block(ctp)))
			error("Dispatch block");
		dispatch_handler(ctp);
	}

	exit(EXIT_SUCCESS);
}

int io_read(resmgr_context_t *ctp, io_read_t *msg, iofunc_ocb_t *ocb){
	printf("Someone called io_read \n");
	char buf[10];
	if(!ocb->offset){

		// set data to return
		pthread_mutex_lock(&counter_mut);
		int temp = counter;
		pthread_mutex_unlock(&counter_mut);
		printf(" hey %d \n", temp);

		sprintf(buf, "%d", temp);
		printf(buf);
		printf(" hey2 %d \n", sizeof(buf));
		printf(" hey3 %d \n", strlen(buf));
		SETIOV(ctp->iov, &buf, sizeof(buf));
		_IO_SET_READ_NBYTES(ctp, sizeof(buf));

		// increase the offset (new reads will not get the same data)
		ocb->offset = 1;

		// return
		return (_RESMGR_NPARTS(1));
	}
	else {
		// set to return no data
		_IO_SET_READ_NBYTES(ctp, 0);

		// return
		return (_RESMGR_NPARTS(0));
	}
}

int io_write(resmgr_context_t *ctp, io_write_t *msg, RESMGR_OCB_T *ocb){
	printf("Someone called io_write \n");
	char    buf[5];
	msg->i.nbytes = 5;

	/* set up the number of bytes (returned by client's write()) */
	_IO_SET_WRITE_NBYTES (ctp, msg->i.nbytes);

	/*
	 *  Reread the data from the sender's message buffer.
	 *  We're not assuming that all of the data fit into the
	 *  resource manager library's receive buffer.
	 */
	resmgr_msgread(ctp, buf, msg->i.nbytes, sizeof(msg->i));
	buf [msg->i.nbytes] = '\0'; /* just in case the text is not NULL terminated */
	printf ("Received %d bytes = '%s'\n", msg -> i.nbytes, buf);
	if(buf[0] == 'u'){
		pthread_mutex_lock(&dir_mut);
		dir = 2;
		pthread_mutex_unlock(&dir_mut);
	} else if (buf[0] == 'd'){
		pthread_mutex_lock(&dir_mut);
		dir = 1;
		pthread_mutex_unlock(&dir_mut);
	} else if(buf[0] == 's') {
		pthread_mutex_lock(&dir_mut);
		dir = 0;
		pthread_mutex_unlock(&dir_mut);
	}
	return (_RESMGR_NPARTS (0));
}




void* counter_manipulator(){
	printf("Counter initialized \n");
	while(1){
		pthread_mutex_lock(&dir_mut);
		if (dir){
			printf("counting \n");
			if(dir == 2){
				pthread_mutex_lock(&counter_mut);
				counter++;
				pthread_mutex_unlock(&counter_mut);
			}
			else if(dir == 1) {
				pthread_mutex_lock(&counter_mut);
				counter--;
				pthread_mutex_unlock(&counter_mut);
			}
		}
		pthread_mutex_unlock(&dir_mut);
		delay(100);
	}
}
