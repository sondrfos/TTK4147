
AVR32 FreeRTOS Template.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001a  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         000039cc  80002020  80002020  00002420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  80005a00  80005a00  00005e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  80005c00  80005c00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000164  80005c18  80005c18  00006018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000004  80005d7c  80005d7c  0000617c  2**0
                  ALLOC
  8 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  9 .ctors        00000008  00000008  80005d80  00006408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .dtors        00000008  00000010  80005d88  00006410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .jcr          00000004  00000018  80005d90  00006418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .got          00000000  0000001c  80005d94  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         000005d8  0000001c  80005d94  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00000430  00000610  00000610  00000000  2**2
                  ALLOC
 15 .heap         0000e5c0  00000a40  00000a40  00000000  2**0
                  ALLOC
 16 .comment      00000030  00000000  00000000  000069f4  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 00000ce0  00000000  00000000  00006a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_pubnames 000019b8  00000000  00000000  00007704  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_info   00025b81  00000000  00000000  000090bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000047c4  00000000  00000000  0002ec3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0000f052  00000000  00000000  00033401  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_frame  00001dfc  00000000  00000000  00042454  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00007df2  00000000  00000000  00044250  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_loc    000044c2  00000000  00000000  0004c042  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_macinfo 014adad4  00000000  00000000  00050504  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 27 .debug_ranges 00000d68  00000000  00000000  014fdfd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf ff e0 	sub	pc,pc,-32

Disassembly of section .init:

80002004 <_init>:
80002004:	eb cd 40 40 	pushm	r6,lr
80002008:	48 26       	lddpc	r6,80002010 <_init+0xc>
8000200a:	1e 26       	rsub	r6,pc
8000200c:	c0 48       	rjmp	80002014 <_init+0x10>
8000200e:	d7 03       	nop
80002010:	80 00       	ld.sh	r0,r0[0x0]
80002012:	1f ee       	ld.ub	lr,pc[0x6]
80002014:	c5 ec       	rcall	800020d0 <frame_dummy>
80002016:	e0 a0 1c df 	rcall	800059d4 <__do_global_ctors_aux>
8000201a:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002020 <_stext>:
80002020:	30 07       	mov	r7,0
80002022:	49 5a       	lddpc	r10,80002074 <_stext+0x54>
80002024:	5b fa       	cp.w	r10,-1
80002026:	f4 0d 17 10 	movne	sp,r10
8000202a:	49 4b       	lddpc	r11,80002078 <_stext+0x58>
8000202c:	49 4c       	lddpc	r12,8000207c <_stext+0x5c>
8000202e:	18 3b       	cp.w	r11,r12
80002030:	c0 60       	breq	8000203c <_stext+0x1c>
80002032:	49 4a       	lddpc	r10,80002080 <_stext+0x60>
80002034:	b7 09       	ld.d	r8,r11++
80002036:	b9 28       	st.d	r12++,r8
80002038:	14 3c       	cp.w	r12,r10
8000203a:	cf d5       	brlt	80002034 <_stext+0x14>
8000203c:	49 2a       	lddpc	r10,80002084 <_stext+0x64>
8000203e:	49 1c       	lddpc	r12,80002080 <_stext+0x60>
80002040:	30 08       	mov	r8,0
80002042:	30 09       	mov	r9,0
80002044:	b9 28       	st.d	r12++,r8
80002046:	14 3c       	cp.w	r12,r10
80002048:	cf e5       	brlt	80002044 <_stext+0x24>
8000204a:	e0 a0 11 6b 	rcall	80004320 <_init_startup>
8000204e:	fe cc c4 4e 	sub	r12,pc,-15282
80002052:	e0 a0 15 77 	rcall	80004b40 <atexit>
80002056:	cd 7f       	rcall	80002004 <_init>
80002058:	1a 9c       	mov	r12,sp
8000205a:	30 0b       	mov	r11,0
8000205c:	e0 a0 18 6e 	rcall	80005138 <_init_argv>
80002060:	5b fc       	cp.w	r12,-1
80002062:	f9 bc 00 00 	moveq	r12,0
80002066:	f9 ba 00 00 	moveq	r10,0
8000206a:	14 1d       	sub	sp,r10
8000206c:	e0 a0 15 16 	rcall	80004a98 <main>
80002070:	e0 a0 15 70 	rcall	80004b50 <exit>
80002074:	00 01       	add	r1,r0
80002076:	00 00       	add	r0,r0
80002078:	80 00       	ld.sh	r0,r0[0x0]
8000207a:	5d 80       	*unknown*
8000207c:	00 00       	add	r0,r0
8000207e:	00 08       	add	r8,r0
80002080:	00 00       	add	r0,r0
80002082:	05 f8       	ld.ub	r8,r2[0x7]
80002084:	00 00       	add	r0,r0
80002086:	0a 40       	or	r0,r5

80002088 <__do_global_dtors_aux>:
80002088:	d4 21       	pushm	r4-r7,lr
8000208a:	48 e8       	lddpc	r8,800020c0 <__do_global_dtors_aux+0x38>
8000208c:	11 89       	ld.ub	r9,r8[0x0]
8000208e:	30 08       	mov	r8,0
80002090:	f0 09 18 00 	cp.b	r9,r8
80002094:	c1 41       	brne	800020bc <__do_global_dtors_aux+0x34>
80002096:	48 c8       	lddpc	r8,800020c4 <__do_global_dtors_aux+0x3c>
80002098:	48 c6       	lddpc	r6,800020c8 <__do_global_dtors_aux+0x40>
8000209a:	10 95       	mov	r5,r8
8000209c:	10 16       	sub	r6,r8
8000209e:	48 c7       	lddpc	r7,800020cc <__do_global_dtors_aux+0x44>
800020a0:	a3 46       	asr	r6,0x2
800020a2:	20 16       	sub	r6,1
800020a4:	c0 68       	rjmp	800020b0 <__do_global_dtors_aux+0x28>
800020a6:	2f f8       	sub	r8,-1
800020a8:	8f 08       	st.w	r7[0x0],r8
800020aa:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020ae:	5d 18       	icall	r8
800020b0:	6e 08       	ld.w	r8,r7[0x0]
800020b2:	0c 38       	cp.w	r8,r6
800020b4:	cf 93       	brcs	800020a6 <__do_global_dtors_aux+0x1e>
800020b6:	30 19       	mov	r9,1
800020b8:	48 28       	lddpc	r8,800020c0 <__do_global_dtors_aux+0x38>
800020ba:	b0 89       	st.b	r8[0x0],r9
800020bc:	d8 22       	popm	r4-r7,pc
800020be:	d7 03       	nop
800020c0:	00 00       	add	r0,r0
800020c2:	06 10       	sub	r0,r3
800020c4:	00 00       	add	r0,r0
800020c6:	00 10       	sub	r0,r0
800020c8:	00 00       	add	r0,r0
800020ca:	00 14       	sub	r4,r0
800020cc:	00 00       	add	r0,r0
800020ce:	06 14       	sub	r4,r3

800020d0 <frame_dummy>:
800020d0:	d4 01       	pushm	lr
800020d2:	48 5c       	lddpc	r12,800020e4 <frame_dummy+0x14>
800020d4:	78 08       	ld.w	r8,r12[0x0]
800020d6:	58 08       	cp.w	r8,0
800020d8:	c0 50       	breq	800020e2 <frame_dummy+0x12>
800020da:	48 48       	lddpc	r8,800020e8 <frame_dummy+0x18>
800020dc:	58 08       	cp.w	r8,0
800020de:	c0 20       	breq	800020e2 <frame_dummy+0x12>
800020e0:	5d 18       	icall	r8
800020e2:	d8 02       	popm	pc
800020e4:	00 00       	add	r0,r0
800020e6:	00 18       	sub	r8,r0
800020e8:	00 00       	add	r0,r0
	...

800020ec <board_init>:
#endif



void board_init (void)
{
800020ec:	d4 01       	pushm	lr
    gpio_configure_pin (LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800020ee:	30 3b       	mov	r11,3
800020f0:	32 3c       	mov	r12,35
800020f2:	f0 1f 00 0a 	mcall	80002118 <board_init+0x2c>
    gpio_configure_pin (LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800020f6:	30 3b       	mov	r11,3
800020f8:	34 9c       	mov	r12,73
800020fa:	f0 1f 00 08 	mcall	80002118 <board_init+0x2c>
    gpio_configure_pin (LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800020fe:	30 3b       	mov	r11,3
80002100:	32 2c       	mov	r12,34
80002102:	f0 1f 00 06 	mcall	80002118 <board_init+0x2c>
    gpio_configure_pin (LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002106:	30 3b       	mov	r11,3
80002108:	32 6c       	mov	r12,38
8000210a:	f0 1f 00 04 	mcall	80002118 <board_init+0x2c>

    gpio_configure_pin (GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
8000210e:	30 4b       	mov	r11,4
80002110:	32 1c       	mov	r12,33
80002112:	f0 1f 00 02 	mcall	80002118 <board_init+0x2c>
     * the platform Xplained board has configured basic clock settings,
     * GPIO pin mapping, interrupt controller options, etc.
     */
    sensor_board_init ();
#endif
}
80002116:	d8 02       	popm	pc
80002118:	80 00       	ld.sh	r0,r0[0x0]
8000211a:	21 1c       	sub	r12,17

8000211c <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
8000211c:	f8 08 16 05 	lsr	r8,r12,0x5
80002120:	a9 68       	lsl	r8,0x8
80002122:	e0 28 f0 00 	sub	r8,61440
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002126:	16 99       	mov	r9,r11
80002128:	e2 19 00 04 	andl	r9,0x4,COH
8000212c:	c0 70       	breq	8000213a <gpio_configure_pin+0x1e>
            gpio_port->puers = 1 << (pin & 0x1F);
8000212e:	30 19       	mov	r9,1
80002130:	f2 0c 09 49 	lsl	r9,r9,r12
80002134:	f1 49 00 74 	st.w	r8[116],r9
80002138:	c0 68       	rjmp	80002144 <gpio_configure_pin+0x28>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
8000213a:	30 19       	mov	r9,1
8000213c:	f2 0c 09 49 	lsl	r9,r9,r12
80002140:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80002144:	16 99       	mov	r9,r11
80002146:	e2 19 00 80 	andl	r9,0x80,COH
8000214a:	c2 40       	breq	80002192 <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
8000214c:	16 99       	mov	r9,r11
8000214e:	e2 19 01 80 	andl	r9,0x180,COH
80002152:	c0 90       	breq	80002164 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002154:	30 19       	mov	r9,1
80002156:	f2 0c 09 49 	lsl	r9,r9,r12
8000215a:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
8000215e:	f1 49 00 b8 	st.w	r8[184],r9
80002162:	c1 88       	rjmp	80002192 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_RISING)
80002164:	16 99       	mov	r9,r11
80002166:	e2 19 02 80 	andl	r9,0x280,COH
8000216a:	c0 90       	breq	8000217c <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
8000216c:	30 19       	mov	r9,1
8000216e:	f2 0c 09 49 	lsl	r9,r9,r12
80002172:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80002176:	f1 49 00 b8 	st.w	r8[184],r9
8000217a:	c0 c8       	rjmp	80002192 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
8000217c:	16 99       	mov	r9,r11
8000217e:	e2 19 03 80 	andl	r9,0x380,COH
80002182:	c0 80       	breq	80002192 <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002184:	30 19       	mov	r9,1
80002186:	f2 0c 09 49 	lsl	r9,r9,r12
8000218a:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
8000218e:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80002192:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002196:	c1 50       	breq	800021c0 <gpio_configure_pin+0xa4>
            if (flags & GPIO_INIT_HIGH)
80002198:	e2 1b 00 02 	andl	r11,0x2,COH
8000219c:	c0 70       	breq	800021aa <gpio_configure_pin+0x8e>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
8000219e:	30 19       	mov	r9,1
800021a0:	f2 0c 09 49 	lsl	r9,r9,r12
800021a4:	f1 49 00 54 	st.w	r8[84],r9
800021a8:	c0 68       	rjmp	800021b4 <gpio_configure_pin+0x98>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
800021aa:	30 19       	mov	r9,1
800021ac:	f2 0c 09 49 	lsl	r9,r9,r12
800021b0:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
800021b4:	30 19       	mov	r9,1
800021b6:	f2 0c 09 49 	lsl	r9,r9,r12
800021ba:	f1 49 00 44 	st.w	r8[68],r9
800021be:	c0 68       	rjmp	800021ca <gpio_configure_pin+0xae>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800021c0:	30 19       	mov	r9,1
800021c2:	f2 0c 09 49 	lsl	r9,r9,r12
800021c6:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800021ca:	30 19       	mov	r9,1
800021cc:	f2 0c 09 4c 	lsl	r12,r9,r12
800021d0:	91 1c       	st.w	r8[0x4],r12
}
800021d2:	5e fc       	retal	r12

800021d4 <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800021d4:	f8 08 16 05 	lsr	r8,r12,0x5
800021d8:	a9 68       	lsl	r8,0x8
800021da:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
800021de:	71 88       	ld.w	r8,r8[0x60]
800021e0:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800021e4:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800021e8:	5e fc       	retal	r12

800021ea <gpio_set_gpio_pin>:
}


void gpio_set_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800021ea:	f8 08 16 05 	lsr	r8,r12,0x5
800021ee:	a9 68       	lsl	r8,0x8
800021f0:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
800021f4:	30 19       	mov	r9,1
800021f6:	f2 0c 09 4c 	lsl	r12,r9,r12
800021fa:	f1 4c 00 54 	st.w	r8[84],r12
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
800021fe:	f1 4c 00 44 	st.w	r8[68],r12
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80002202:	91 1c       	st.w	r8[0x4],r12
}
80002204:	5e fc       	retal	r12

80002206 <gpio_clr_gpio_pin>:
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002206:	f8 08 16 05 	lsr	r8,r12,0x5
8000220a:	a9 68       	lsl	r8,0x8
8000220c:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002210:	30 19       	mov	r9,1
80002212:	f2 0c 09 4c 	lsl	r12,r9,r12
80002216:	f1 4c 00 58 	st.w	r8[88],r12
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8000221a:	f1 4c 00 44 	st.w	r8[68],r12
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.  
8000221e:	91 1c       	st.w	r8[0x4],r12
}
80002220:	5e fc       	retal	r12

80002222 <gpio_toggle_pin>:
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_toggle_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002222:	f8 08 16 05 	lsr	r8,r12,0x5
80002226:	a9 68       	lsl	r8,0x8
80002228:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
8000222c:	30 19       	mov	r9,1
8000222e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002232:	f1 4c 00 5c 	st.w	r8[92],r12
}
80002236:	5e fc       	retal	r12

80002238 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002238:	c0 08       	rjmp	80002238 <_unhandled_interrupt>
8000223a:	d7 03       	nop

8000223c <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000223c:	f6 08 16 05 	lsr	r8,r11,0x5

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80002240:	48 99       	lddpc	r9,80002264 <INTC_register_interrupt+0x28>
80002242:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002246:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000224a:	72 19       	ld.w	r9,r9[0x4]
8000224c:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
80002250:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80002254:	48 59       	lddpc	r9,80002268 <INTC_register_interrupt+0x2c>
80002256:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000225a:	fe 79 08 00 	mov	r9,-63488
8000225e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002262:	5e fc       	retal	r12
80002264:	80 00       	ld.sh	r0,r0[0x0]
80002266:	5c 18       	scr	r8
80002268:	80 00       	ld.sh	r0,r0[0x0]
8000226a:	5b 3c       	cp.w	r12,-13

8000226c <INTC_init_interrupts>:
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
}

void INTC_init_interrupts(void)
{
8000226c:	d4 21       	pushm	r4-r7,lr
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
8000226e:	49 18       	lddpc	r8,800022b0 <INTC_init_interrupts+0x44>
80002270:	e3 b8 00 01 	mtsr	0x4,r8
80002274:	49 0e       	lddpc	lr,800022b4 <INTC_init_interrupts+0x48>
80002276:	30 07       	mov	r7,0
80002278:	0e 94       	mov	r4,r7
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
8000227a:	49 0c       	lddpc	r12,800022b8 <INTC_init_interrupts+0x4c>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
8000227c:	49 08       	lddpc	r8,800022bc <INTC_init_interrupts+0x50>
8000227e:	70 05       	ld.w	r5,r8[0x0]
80002280:	fe 76 08 00 	mov	r6,-63488
80002284:	c1 08       	rjmp	800022a4 <INTC_init_interrupts+0x38>
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
80002286:	08 98       	mov	r8,r4
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002288:	7c 1b       	ld.w	r11,lr[0x4]

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
8000228a:	7c 0a       	ld.w	r10,lr[0x0]
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
8000228c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002290:	2f f8       	sub	r8,-1
80002292:	10 3a       	cp.w	r10,r8
80002294:	fe 9b ff fc 	brhi	8000228c <INTC_init_interrupts+0x20>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002298:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000229c:	2f f7       	sub	r7,-1
8000229e:	2f 8e       	sub	lr,-8
800022a0:	59 e7       	cp.w	r7,30
800022a2:	c0 50       	breq	800022ac <INTC_init_interrupts+0x40>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800022a4:	7c 08       	ld.w	r8,lr[0x0]
800022a6:	58 08       	cp.w	r8,0
800022a8:	ce f1       	brne	80002286 <INTC_init_interrupts+0x1a>
800022aa:	cf 7b       	rjmp	80002298 <INTC_init_interrupts+0x2c>
800022ac:	d8 22       	popm	r4-r7,pc
800022ae:	00 00       	add	r0,r0
800022b0:	80 00       	ld.sh	r0,r0[0x0]
800022b2:	5a 00       	cp.w	r0,-32
800022b4:	80 00       	ld.sh	r0,r0[0x0]
800022b6:	5c 18       	scr	r8
800022b8:	80 00       	ld.sh	r0,r0[0x0]
800022ba:	22 38       	sub	r8,35
800022bc:	80 00       	ld.sh	r0,r0[0x0]
800022be:	5b 3c       	cp.w	r12,-13

800022c0 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(unsigned int int_level)
{
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800022c0:	fe 78 08 00 	mov	r8,-63488
800022c4:	e0 69 00 83 	mov	r9,131
800022c8:	f2 0c 01 0c 	sub	r12,r9,r12
800022cc:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
  unsigned int int_req = AVR32_INTC.irr[int_grp];
800022d0:	f2 ca ff c0 	sub	r10,r9,-64
800022d4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
800022d8:	58 08       	cp.w	r8,0
800022da:	c0 21       	brne	800022de <_get_interrupt_handler+0x1e>
800022dc:	5e fd       	retal	0
800022de:	f0 08 12 00 	clz	r8,r8
800022e2:	48 5a       	lddpc	r10,800022f4 <_get_interrupt_handler+0x34>
800022e4:	f4 09 00 39 	add	r9,r10,r9<<0x3
800022e8:	f0 08 11 1f 	rsub	r8,r8,31
800022ec:	72 19       	ld.w	r9,r9[0x4]
800022ee:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
}
800022f2:	5e fc       	retal	r12
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	5c 18       	scr	r8

800022f8 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800022f8:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
800022fa:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800022fe:	99 a8       	st.w	r12[0x28],r8
}
80002300:	5e fc       	retal	r12
80002302:	d7 03       	nop

80002304 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80002304:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002306:	ec 5b bb 9f 	cp.w	r11,899999
8000230a:	e0 8b 00 04 	brhi	80002312 <pm_enable_osc0_crystal+0xe>
8000230e:	30 4b       	mov	r11,4
80002310:	c1 38       	rjmp	80002336 <pm_enable_osc0_crystal+0x32>
80002312:	e0 68 c6 bf 	mov	r8,50879
80002316:	ea 18 00 2d 	orh	r8,0x2d
8000231a:	10 3b       	cp.w	r11,r8
8000231c:	e0 8b 00 04 	brhi	80002324 <pm_enable_osc0_crystal+0x20>
80002320:	30 5b       	mov	r11,5
80002322:	c0 a8       	rjmp	80002336 <pm_enable_osc0_crystal+0x32>
80002324:	e0 68 12 00 	mov	r8,4608
80002328:	ea 18 00 7a 	orh	r8,0x7a
8000232c:	10 3b       	cp.w	r11,r8
8000232e:	f9 bb 03 06 	movlo	r11,6
80002332:	f9 bb 02 07 	movhs	r11,7
80002336:	f0 1f 00 02 	mcall	8000233c <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
8000233a:	d8 02       	popm	pc
8000233c:	80 00       	ld.sh	r0,r0[0x0]
8000233e:	22 f8       	sub	r8,47

80002340 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002340:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002342:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002346:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002348:	78 08       	ld.w	r8,r12[0x0]
8000234a:	a3 a8       	sbr	r8,0x2
8000234c:	99 08       	st.w	r12[0x0],r8
}
8000234e:	5e fc       	retal	r12

80002350 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002350:	79 58       	ld.w	r8,r12[0x54]
80002352:	e2 18 00 80 	andl	r8,0x80,COH
80002356:	cf d0       	breq	80002350 <pm_wait_for_clk0_ready>
}
80002358:	5e fc       	retal	r12
8000235a:	d7 03       	nop

8000235c <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
8000235c:	eb cd 40 80 	pushm	r7,lr
80002360:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
80002362:	f0 1f 00 04 	mcall	80002370 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80002366:	0e 9c       	mov	r12,r7
80002368:	f0 1f 00 03 	mcall	80002374 <pm_enable_clk0+0x18>
}
8000236c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002370:	80 00       	ld.sh	r0,r0[0x0]
80002372:	23 40       	sub	r0,52
80002374:	80 00       	ld.sh	r0,r0[0x0]
80002376:	23 50       	sub	r0,53

80002378 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002378:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
8000237a:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000237e:	99 08       	st.w	r12[0x0],r8
}
80002380:	5e fc       	retal	r12
80002382:	d7 03       	nop

80002384 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80002384:	eb cd 40 c0 	pushm	r6-r7,lr
80002388:	18 97       	mov	r7,r12
8000238a:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
8000238c:	f0 1f 00 06 	mcall	800023a4 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002390:	0c 9b       	mov	r11,r6
80002392:	0e 9c       	mov	r12,r7
80002394:	f0 1f 00 05 	mcall	800023a8 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002398:	30 1b       	mov	r11,1
8000239a:	0e 9c       	mov	r12,r7
8000239c:	f0 1f 00 04 	mcall	800023ac <pm_switch_to_osc0+0x28>
}
800023a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023a4:	80 00       	ld.sh	r0,r0[0x0]
800023a6:	23 04       	sub	r4,48
800023a8:	80 00       	ld.sh	r0,r0[0x0]
800023aa:	23 5c       	sub	r12,53
800023ac:	80 00       	ld.sh	r0,r0[0x0]
800023ae:	23 78       	sub	r8,55

800023b0 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3C device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
800023b0:	d4 01       	pushm	lr
#ifndef AVR32_PM_VERSION_RESETVALUE
// Implementation for UC3A, UC3A3, UC3B parts.
  if(PCL_OSC0 == osc)
800023b2:	58 0c       	cp.w	r12,0
800023b4:	c0 40       	breq	800023bc <pcl_switch_to_osc+0xc>
800023b6:	fe 7c d8 f0 	mov	r12,-10000
800023ba:	d8 02       	popm	pc
  {
    // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency,
    // enable the OSC0, set the main clock source as being OSC0.
    pm_switch_to_osc0(&AVR32_PM, fcrystal, startup);
800023bc:	fe 7c 0c 00 	mov	r12,-62464
800023c0:	f0 1f 00 02 	mcall	800023c8 <pcl_switch_to_osc+0x18>
800023c4:	d8 0a       	popm	pc,r12=0
800023c6:	00 00       	add	r0,r0
800023c8:	80 00       	ld.sh	r0,r0[0x0]
800023ca:	23 84       	sub	r4,56

800023cc <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
	return true;
}
800023cc:	5e ff       	retal	1

800023ce <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
800023ce:	5e fd       	retal	0

800023d0 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
800023d0:	fe 68 00 00 	mov	r8,-131072
800023d4:	70 09       	ld.w	r9,r8[0x0]
800023d6:	a7 d9       	cbr	r9,0x7
800023d8:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
800023da:	70 09       	ld.w	r9,r8[0x0]
800023dc:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023e0:	e0 19 ff 80 	andl	r9,0xff80
800023e4:	f9 e9 10 09 	or	r9,r12,r9
800023e8:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800023ea:	70 09       	ld.w	r9,r8[0x0]
800023ec:	a7 b9       	sbr	r9,0x7
800023ee:	91 09       	st.w	r8[0x0],r9
}
800023f0:	5e fc       	retal	r12

800023f2 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
800023f2:	fe 68 00 00 	mov	r8,-131072
800023f6:	70 0c       	ld.w	r12,r8[0x0]
}
800023f8:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023fc:	5e fc       	retal	r12

800023fe <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
800023fe:	fe 68 00 00 	mov	r8,-131072
80002402:	70 8c       	ld.w	r12,r8[0x20]
}
80002404:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
80002408:	5e fc       	retal	r12

8000240a <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
8000240a:	fe 68 00 00 	mov	r8,-131072
8000240e:	70 8c       	ld.w	r12,r8[0x20]
}
80002410:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
80002414:	5e fc       	retal	r12
80002416:	d7 03       	nop

80002418 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
80002418:	48 28       	lddpc	r8,80002420 <udd_set_setup_payload+0x8>
8000241a:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
8000241c:	b0 6b       	st.h	r8[0xc],r11
}
8000241e:	5e fc       	retal	r12
80002420:	00 00       	add	r0,r0
80002422:	0a 10       	sub	r0,r5

80002424 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80002424:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002428:	a3 68       	lsl	r8,0x2
8000242a:	e0 38 fe 40 	sub	r8,130624
8000242e:	70 0c       	ld.w	r12,r8[0x0]
}
80002430:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80002434:	5e fc       	retal	r12
80002436:	d7 03       	nop

80002438 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80002438:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index)
8000243c:	30 38       	mov	r8,3
8000243e:	f0 0c 18 00 	cp.b	r12,r8
80002442:	e0 8b 00 35 	brhi	800024ac <udd_ep_set_halt+0x74>
		return false;

	ptr_job = &udd_ep_job[index - 1];
80002446:	18 99       	mov	r9,r12
80002448:	f8 c8 00 01 	sub	r8,r12,1
8000244c:	a5 68       	lsl	r8,0x4
8000244e:	49 9a       	lddpc	r10,800024b0 <udd_ep_set_halt+0x78>
80002450:	f4 08 00 08 	add	r8,r10,r8
	if (ptr_job->busy == true) {
80002454:	70 0a       	ld.w	r10,r8[0x0]
80002456:	58 0a       	cp.w	r10,0
80002458:	c2 a5       	brlt	800024ac <udd_ep_set_halt+0x74>
		return false;	// Job on going, stall impossible
	}
	
	if (0 != udd_nb_busy_bank(index)) {
8000245a:	a3 69       	lsl	r9,0x2
8000245c:	fe 6b 01 30 	mov	r11,-130768
80002460:	f2 0b 00 0a 	add	r10,r9,r11
80002464:	74 0a       	ld.w	r10,r10[0x0]
80002466:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
8000246a:	c1 10       	breq	8000248c <udd_ep_set_halt+0x54>
		// Wait end of transfer on USB line before stall endpoint
		// Flag a stall requested
		ptr_job->stall_requested = true;
8000246c:	70 0b       	ld.w	r11,r8[0x0]
8000246e:	30 1a       	mov	r10,1
80002470:	f7 da d3 81 	bfins	r11,r10,0x1c,0x1
80002474:	91 0b       	st.w	r8[0x0],r11
		udd_enable_bank_interrupt(index);
80002476:	e0 39 fe 10 	sub	r9,130576
8000247a:	e0 68 10 00 	mov	r8,4096
8000247e:	93 08       	st.w	r9[0x0],r8
		udd_enable_endpoint_interrupt(index);
80002480:	f0 0c 09 4c 	lsl	r12,r8,r12
80002484:	fe 69 00 00 	mov	r9,-131072
80002488:	93 6c       	st.w	r9[0x18],r12
8000248a:	5e fa       	retal	r10
	} else {
		// Stall endpoint
		udd_disable_endpoint_bank_autoswitch(index);
8000248c:	fe 6a 01 00 	mov	r10,-130816
80002490:	f2 0a 00 08 	add	r8,r9,r10
80002494:	70 0a       	ld.w	r10,r8[0x0]
80002496:	a9 da       	cbr	r10,0x9
80002498:	91 0a       	st.w	r8[0x0],r10
		udd_enable_stall_handshake(index);
8000249a:	e0 39 fe 10 	sub	r9,130576
8000249e:	e8 68 00 00 	mov	r8,524288
800024a2:	93 08       	st.w	r9[0x0],r8
		udd_reset_data_toggle(index);
800024a4:	e4 68 00 00 	mov	r8,262144
800024a8:	93 08       	st.w	r9[0x0],r8
800024aa:	5e ff       	retal	1
800024ac:	5e fd       	retal	0
800024ae:	00 00       	add	r0,r0
800024b0:	00 00       	add	r0,r0
800024b2:	07 28       	ld.uh	r8,r3++

800024b4 <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
800024b4:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
800024b6:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
800024ba:	30 38       	mov	r8,3
800024bc:	f0 0c 18 00 	cp.b	r12,r8
800024c0:	e0 88 00 03 	brls	800024c6 <udd_ep_clear_halt+0x12>
800024c4:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
800024c6:	f8 c8 00 01 	sub	r8,r12,1
800024ca:	a5 68       	lsl	r8,0x4
800024cc:	49 69       	lddpc	r9,80002524 <udd_ep_clear_halt+0x70>
800024ce:	f2 08 00 08 	add	r8,r9,r8

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
800024d2:	a3 6c       	lsl	r12,0x2
800024d4:	fe 6a 01 c0 	mov	r10,-130624
800024d8:	f8 0a 00 09 	add	r9,r12,r10
800024dc:	72 09       	ld.w	r9,r9[0x0]
800024de:	e6 19 00 08 	andh	r9,0x8,COH
800024e2:	c0 51       	brne	800024ec <udd_ep_clear_halt+0x38>
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
800024e4:	70 09       	ld.w	r9,r8[0x0]
800024e6:	e6 19 10 00 	andh	r9,0x1000,COH
800024ea:	c1 c0       	breq	80002522 <udd_ep_clear_halt+0x6e>
		// Remove request to stall
		ptr_job->stall_requested = false;
800024ec:	70 09       	ld.w	r9,r8[0x0]
800024ee:	30 0a       	mov	r10,0
800024f0:	f3 da d3 81 	bfins	r9,r10,0x1c,0x1
800024f4:	91 09       	st.w	r8[0x0],r9
		// Remove stall
		udd_disable_stall_handshake(ep);
800024f6:	fe 6a 02 20 	mov	r10,-130528
800024fa:	f8 0a 00 09 	add	r9,r12,r10
800024fe:	e8 6a 00 00 	mov	r10,524288
80002502:	93 0a       	st.w	r9[0x0],r10
		udd_enable_endpoint_bank_autoswitch(ep);	
80002504:	e0 3c ff 00 	sub	r12,130816
80002508:	78 09       	ld.w	r9,r12[0x0]
8000250a:	a9 b9       	sbr	r9,0x9
8000250c:	99 09       	st.w	r12[0x0],r9
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
8000250e:	70 09       	ld.w	r9,r8[0x0]
80002510:	58 09       	cp.w	r9,0
80002512:	c0 84       	brge	80002522 <udd_ep_clear_halt+0x6e>
			ptr_job->busy = false;
80002514:	30 0a       	mov	r10,0
80002516:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
8000251a:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
8000251c:	70 38       	ld.w	r8,r8[0xc]
8000251e:	5d 18       	icall	r8
80002520:	da 0a       	popm	pc,r12=1
80002522:	da 0a       	popm	pc,r12=1
80002524:	00 00       	add	r0,r0
80002526:	07 28       	ld.uh	r8,r3++

80002528 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002528:	30 59       	mov	r9,5
8000252a:	48 58       	lddpc	r8,8000253c <udd_ctrl_stall_data+0x14>
8000252c:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
8000252e:	e8 69 00 00 	mov	r9,524288
80002532:	fe 68 01 f0 	mov	r8,-130576
80002536:	91 09       	st.w	r8[0x0],r9
}
80002538:	5e fc       	retal	r12
8000253a:	00 00       	add	r0,r0
8000253c:	00 00       	add	r0,r0
8000253e:	07 5c       	ld.sh	r12,--r3

80002540 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
80002540:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80002542:	48 48       	lddpc	r8,80002550 <udd_ctrl_endofrequest+0x10>
80002544:	70 48       	ld.w	r8,r8[0x10]
80002546:	58 08       	cp.w	r8,0
80002548:	c0 20       	breq	8000254c <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
8000254a:	5d 18       	icall	r8
8000254c:	d8 02       	popm	pc
8000254e:	00 00       	add	r0,r0
80002550:	00 00       	add	r0,r0
80002552:	0a 10       	sub	r0,r5

80002554 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort)
{
80002554:	d4 01       	pushm	lr
80002556:	16 99       	mov	r9,r11
	if (ptr_job->busy == false)
80002558:	78 08       	ld.w	r8,r12[0x0]
8000255a:	58 08       	cp.w	r8,0
8000255c:	c0 b4       	brge	80002572 <udd_ep_finish_job+0x1e>
		return;	// No on-going job
	ptr_job->busy = false;
8000255e:	30 0a       	mov	r10,0
80002560:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80002564:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans)
80002566:	78 38       	ld.w	r8,r12[0xc]
80002568:	58 08       	cp.w	r8,0
8000256a:	c0 40       	breq	80002572 <udd_ep_finish_job+0x1e>
		return;	// No callback linked to job
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
8000256c:	78 2b       	ld.w	r11,r12[0x8]
8000256e:	12 9c       	mov	r12,r9
80002570:	5d 18       	icall	r8
80002572:	d8 02       	popm	pc

80002574 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
80002574:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
80002576:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
8000257a:	20 18       	sub	r8,1
8000257c:	a5 68       	lsl	r8,0x4
8000257e:	30 1b       	mov	r11,1
80002580:	48 3c       	lddpc	r12,8000258c <udd_ep_abort_job+0x18>
80002582:	10 0c       	add	r12,r8
80002584:	f0 1f 00 03 	mcall	80002590 <udd_ep_abort_job+0x1c>
}
80002588:	d8 02       	popm	pc
8000258a:	00 00       	add	r0,r0
8000258c:	00 00       	add	r0,r0
8000258e:	07 28       	ld.uh	r8,r3++
80002590:	80 00       	ld.sh	r0,r0[0x0]
80002592:	25 54       	sub	r4,85

80002594 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
80002594:	d4 01       	pushm	lr
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
80002596:	fe 69 00 00 	mov	r9,-131072
8000259a:	72 7b       	ld.w	r11,r9[0x1c]
8000259c:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
800025a0:	30 1a       	mov	r10,1
800025a2:	f4 08 09 4a 	lsl	r10,r10,r8
800025a6:	5c da       	com	r10
800025a8:	16 6a       	and	r10,r11
800025aa:	93 7a       	st.w	r9[0x1c],r10
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
800025ac:	a3 68       	lsl	r8,0x2
800025ae:	e0 38 ff 00 	sub	r8,130816
800025b2:	70 09       	ld.w	r9,r8[0x0]
800025b4:	a1 d9       	cbr	r9,0x1
800025b6:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
800025b8:	f0 1f 00 02 	mcall	800025c0 <udd_ep_free+0x2c>
}
800025bc:	d8 02       	popm	pc
800025be:	00 00       	add	r0,r0
800025c0:	80 00       	ld.sh	r0,r0[0x0]
800025c2:	25 74       	sub	r4,87

800025c4 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
800025c4:	eb cd 40 fc 	pushm	r2-r7,lr
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
800025c8:	fd dc c0 04 	bfextu	lr,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
800025cc:	30 37       	mov	r7,3
800025ce:	ee 0e 18 00 	cp.b	lr,r7
800025d2:	e0 8b 00 99 	brhi	80002704 <udd_ep_run+0x140>
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800025d6:	fe 67 00 00 	mov	r7,-131072
800025da:	6e 76       	ld.w	r6,r7[0x1c]
800025dc:	1c 95       	mov	r5,lr
800025de:	30 17       	mov	r7,1
800025e0:	ee 0e 09 47 	lsl	r7,r7,lr
800025e4:	0c 67       	and	r7,r6
800025e6:	e0 80 00 8f 	breq	80002704 <udd_ep_run+0x140>
			|| Is_udd_endpoint_stall_requested(ep)
800025ea:	fc 06 15 02 	lsl	r6,lr,0x2
800025ee:	fe 64 01 c0 	mov	r4,-130624
800025f2:	ec 04 00 07 	add	r7,r6,r4
800025f6:	6e 07       	ld.w	r7,r7[0x0]
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800025f8:	e6 17 00 08 	andh	r7,0x8,COH
800025fc:	e0 81 00 84 	brne	80002704 <udd_ep_run+0x140>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
80002600:	fc c7 00 01 	sub	r7,lr,1
80002604:	a5 67       	lsl	r7,0x4
80002606:	4c 14       	lddpc	r4,80002708 <udd_ep_run+0x144>
80002608:	e8 07 00 07 	add	r7,r4,r7

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested)
8000260c:	6e 04       	ld.w	r4,r7[0x0]
8000260e:	e6 14 10 00 	andh	r4,0x1000,COH
80002612:	c7 91       	brne	80002704 <udd_ep_run+0x140>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002614:	e1 b4 00 00 	mfsr	r4,0x0
	cpu_irq_disable();
80002618:	d3 03       	ssrf	0x10
		return false;	// Endpoint is halted

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
8000261a:	6e 03       	ld.w	r3,r7[0x0]
8000261c:	58 03       	cp.w	r3,0
8000261e:	c0 54       	brge	80002628 <udd_ep_run+0x64>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002620:	e3 b4 00 00 	mtsr	0x0,r4
#endif
	barrier();
80002624:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
	bool b_dir_in;
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
80002628:	f9 dc c0 e8 	bfextu	r12,r12,0x7,0x8
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
8000262c:	6e 03       	ld.w	r3,r7[0x0]
8000262e:	30 12       	mov	r2,1
80002630:	e7 d2 d3 e1 	bfins	r3,r2,0x1f,0x1
80002634:	8f 03       	st.w	r7[0x0],r3
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002636:	e3 b4 00 00 	mtsr	0x0,r4
	cpu_irq_restore(flags);
	ptr_job->buf = buf;
8000263a:	8f 1a       	st.w	r7[0x4],r10
	ptr_job->call_trans = callback;
8000263c:	8f 38       	st.w	r7[0xc],r8
	ptr_job->b_raise_dma = false;
8000263e:	6e 08       	ld.w	r8,r7[0x0]
80002640:	30 04       	mov	r4,0
80002642:	f1 d4 d3 a1 	bfins	r8,r4,0x1d,0x1
80002646:	8f 08       	st.w	r7[0x0],r8

	// The USBB supports a maximum transfer size of 64KB
	if (0x10000 <= buf_size) {
80002648:	e0 49 ff ff 	cp.w	r9,65535
8000264c:	e0 88 00 07 	brls	8000265a <udd_ep_run+0x96>
		// Transfer size = 64KB
		ptr_job->buf_size = 0x10000;
80002650:	e0 78 00 00 	mov	r8,65536
80002654:	8f 28       	st.w	r7[0x8],r8
80002656:	08 99       	mov	r9,r4
80002658:	c3 58       	rjmp	800026c2 <udd_ep_run+0xfe>
		buf_size = 0;
	} else {
		ptr_job->buf_size = buf_size;
8000265a:	8f 29       	st.w	r7[0x8],r9
		if (b_dir_in) {
8000265c:	58 0c       	cp.w	r12,0
8000265e:	c3 20       	breq	800026c2 <udd_ep_run+0xfe>
			if (buf_size==0) {
80002660:	58 09       	cp.w	r9,0
80002662:	c1 71       	brne	80002690 <udd_ep_run+0xcc>
				// The USB DMA can't send a empty buffer
				// thus we raise the DMA interrupt end of transfert 
				// to execute ZLP process
				ptr_job->b_raise_dma = true;
80002664:	6e 08       	ld.w	r8,r7[0x0]
80002666:	30 1c       	mov	r12,1
				ptr_job->b_send_zlp = true;
80002668:	bd b8       	sbr	r8,0x1d
8000266a:	f1 dc d3 c1 	bfins	r8,r12,0x1e,0x1
8000266e:	8f 08       	st.w	r7[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002670:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002674:	d3 03       	ssrf	0x10
				flags = cpu_irq_save();
				udd_enable_endpoint_dma_interrupt(ep);
80002676:	20 15       	sub	r5,1
80002678:	fc 19 02 00 	movh	r9,0x200
8000267c:	f2 05 09 49 	lsl	r9,r9,r5
80002680:	fe 68 00 00 	mov	r8,-131072
80002684:	91 69       	st.w	r8[0x18],r9
				udd_raise_endpoint_dma_interrupt(ep);
80002686:	91 39       	st.w	r8[0xc],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002688:	e3 ba 00 00 	mtsr	0x0,r10
				cpu_irq_restore(flags);
				return true;
8000268c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
			}
			if (0 != buf_size % udd_get_endpoint_size(ep)) {
80002690:	e0 36 ff 00 	sub	r6,130816
80002694:	6c 08       	ld.w	r8,r6[0x0]
80002696:	f1 d8 c0 83 	bfextu	r8,r8,0x4,0x3
8000269a:	30 86       	mov	r6,8
8000269c:	ec 08 09 48 	lsl	r8,r6,r8
800026a0:	20 18       	sub	r8,1
800026a2:	12 68       	and	r8,r9
800026a4:	c0 b0       	breq	800026ba <udd_ep_run+0xf6>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
800026a6:	6e 08       	ld.w	r8,r7[0x0]
800026a8:	30 0b       	mov	r11,0
800026aa:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
800026ae:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
800026b0:	a5 6e       	lsl	lr,0x4
800026b2:	e0 3e fd 00 	sub	lr,130304
800026b6:	9d 1a       	st.w	lr[0x4],r10
800026b8:	c1 18       	rjmp	800026da <udd_ep_run+0x116>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
			}else{
				ptr_job->b_send_zlp = b_shortpacket;
800026ba:	6e 08       	ld.w	r8,r7[0x0]
800026bc:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
800026c0:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
800026c2:	a5 6e       	lsl	lr,0x4
800026c4:	e0 3e fd 00 	sub	lr,130304
800026c8:	9d 1a       	st.w	lr[0x4],r10
	if (b_shortpacket) {
800026ca:	58 0b       	cp.w	r11,0
800026cc:	c0 31       	brne	800026d2 <udd_ep_run+0x10e>
800026ce:	30 08       	mov	r8,0
800026d0:	c0 68       	rjmp	800026dc <udd_ep_run+0x118>
		if (b_dir_in) {
800026d2:	58 0c       	cp.w	r12,0
800026d4:	c0 31       	brne	800026da <udd_ep_run+0x116>
800026d6:	31 48       	mov	r8,20
800026d8:	c0 28       	rjmp	800026dc <udd_ep_run+0x118>
800026da:	30 88       	mov	r8,8
		} else {
			udd_dma_ctrl = AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
					| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
		}
	}
	udd_dma_ctrl |= (buf_size <<
800026dc:	e8 18 00 21 	orl	r8,0x21
			AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
			& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
	udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800026e0:	f1 e9 11 09 	or	r9,r8,r9<<0x10
			AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;
	udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
800026e4:	9d 29       	st.w	lr[0x8],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026e6:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800026ea:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_endpoint_dma_interrupt(ep);
800026ec:	20 15       	sub	r5,1
800026ee:	fc 19 02 00 	movh	r9,0x200
800026f2:	f2 05 09 45 	lsl	r5,r9,r5
800026f6:	fe 69 00 00 	mov	r9,-131072
800026fa:	93 65       	st.w	r9[0x18],r5
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800026fc:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
80002700:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
	cpu_irq_restore(flags);

	return true;
80002704:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80002708:	00 00       	add	r0,r0
8000270a:	07 28       	ld.uh	r8,r3++

8000270c <udd_sleep_mode>:
 * 
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
8000270c:	58 0c       	cp.w	r12,0
8000270e:	c1 11       	brne	80002730 <udd_sleep_mode+0x24>
80002710:	49 18       	lddpc	r8,80002754 <udd_sleep_mode+0x48>
80002712:	11 89       	ld.ub	r9,r8[0x0]
80002714:	30 08       	mov	r8,0
80002716:	f0 09 18 00 	cp.b	r9,r8
8000271a:	c1 a0       	breq	8000274e <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000271c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002720:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002722:	48 e8       	lddpc	r8,80002758 <udd_sleep_mode+0x4c>
80002724:	11 9a       	ld.ub	r10,r8[0x1]
80002726:	2f fa       	sub	r10,-1
80002728:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000272a:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
8000272e:	c1 08       	rjmp	8000274e <udd_sleep_mode+0x42>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
80002730:	48 98       	lddpc	r8,80002754 <udd_sleep_mode+0x48>
80002732:	11 89       	ld.ub	r9,r8[0x0]
80002734:	30 08       	mov	r8,0
80002736:	f0 09 18 00 	cp.b	r9,r8
8000273a:	c0 a1       	brne	8000274e <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000273c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002740:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80002742:	48 68       	lddpc	r8,80002758 <udd_sleep_mode+0x4c>
80002744:	11 9a       	ld.ub	r10,r8[0x1]
80002746:	20 1a       	sub	r10,1
80002748:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000274a:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
8000274e:	48 28       	lddpc	r8,80002754 <udd_sleep_mode+0x48>
80002750:	b0 8c       	st.b	r8[0x0],r12
}
80002752:	5e fc       	retal	r12
80002754:	00 00       	add	r0,r0
80002756:	07 58       	ld.sh	r8,--r3
80002758:	00 00       	add	r0,r0
8000275a:	0a 28       	rsub	r8,r5

8000275c <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
8000275c:	d4 01       	pushm	lr
	otg_unfreeze_clock();
8000275e:	fe 68 00 00 	mov	r8,-131072
80002762:	f0 f9 08 00 	ld.w	r9,r8[2048]
80002766:	af c9       	cbr	r9,0xe
80002768:	f1 49 08 00 	st.w	r8[2048],r9
	// Detach device from the bus
	udd_detach_device();
8000276c:	70 09       	ld.w	r9,r8[0x0]
8000276e:	a9 a9       	sbr	r9,0x8
80002770:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80002772:	30 0c       	mov	r12,0
80002774:	f0 1f 00 02 	mcall	8000277c <udd_detach+0x20>
}
80002778:	d8 02       	popm	pc
8000277a:	00 00       	add	r0,r0
8000277c:	80 00       	ld.sh	r0,r0[0x0]
8000277e:	27 0c       	sub	r12,112

80002780 <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002780:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002784:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI), 
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80002786:	30 1a       	mov	r10,1
80002788:	fe 69 02 20 	mov	r9,-130528
8000278c:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000278e:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80002792:	30 29       	mov	r9,2
80002794:	fe 68 01 60 	mov	r8,-130720
80002798:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
8000279a:	48 59       	lddpc	r9,800027ac <udd_ctrl_init+0x2c>
8000279c:	30 08       	mov	r8,0
8000279e:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
800027a0:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
800027a2:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
800027a4:	48 39       	lddpc	r9,800027b0 <udd_ctrl_init+0x30>
800027a6:	93 08       	st.w	r9[0x0],r8
}
800027a8:	5e fc       	retal	r12
800027aa:	00 00       	add	r0,r0
800027ac:	00 00       	add	r0,r0
800027ae:	0a 10       	sub	r0,r5
800027b0:	00 00       	add	r0,r0
800027b2:	07 5c       	ld.sh	r12,--r3

800027b4 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
800027b4:	30 39       	mov	r9,3
800027b6:	48 a8       	lddpc	r8,800027dc <udd_ctrl_send_zlp_in+0x28>
800027b8:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027ba:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
800027be:	d3 03       	ssrf	0x10
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
800027c0:	fe 6a 01 60 	mov	r10,-130720
800027c4:	30 19       	mov	r9,1
800027c6:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
800027c8:	fe 68 01 f0 	mov	r8,-130576
800027cc:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
800027ce:	30 89       	mov	r9,8
800027d0:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
800027d2:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800027d4:	e3 bb 00 00 	mtsr	0x0,r11
	cpu_irq_restore(flags);
}
800027d8:	5e fc       	retal	r12
800027da:	00 00       	add	r0,r0
800027dc:	00 00       	add	r0,r0
800027de:	07 5c       	ld.sh	r12,--r3

800027e0 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
800027e0:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027e4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800027e8:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
800027ea:	30 1a       	mov	r10,1
800027ec:	fe 69 02 20 	mov	r9,-130528
800027f0:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800027f2:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800027f6:	4c 38       	lddpc	r8,80002900 <udd_ctrl_in_sent+0x120>
800027f8:	70 08       	ld.w	r8,r8[0x0]
800027fa:	58 38       	cp.w	r8,3
800027fc:	c0 71       	brne	8000280a <udd_ctrl_in_sent+0x2a>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
800027fe:	f0 1f 00 42 	mcall	80002904 <udd_ctrl_in_sent+0x124>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002802:	f0 1f 00 42 	mcall	80002908 <udd_ctrl_in_sent+0x128>
		return;
80002806:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
8000280a:	4c 18       	lddpc	r8,8000290c <udd_ctrl_in_sent+0x12c>
8000280c:	90 68       	ld.sh	r8,r8[0xc]
8000280e:	4c 19       	lddpc	r9,80002910 <udd_ctrl_in_sent+0x130>
80002810:	92 07       	ld.sh	r7,r9[0x0]
80002812:	f0 07 01 07 	sub	r7,r8,r7
80002816:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
80002818:	c3 b1       	brne	8000288e <udd_ctrl_in_sent+0xae>
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
8000281a:	4b f9       	lddpc	r9,80002914 <udd_ctrl_in_sent+0x134>
8000281c:	13 8a       	ld.ub	r10,r9[0x0]
8000281e:	30 09       	mov	r9,0
80002820:	f2 0a 18 00 	cp.b	r10,r9
80002824:	c1 21       	brne	80002848 <udd_ctrl_in_sent+0x68>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80002826:	30 49       	mov	r9,4
80002828:	4b 68       	lddpc	r8,80002900 <udd_ctrl_in_sent+0x120>
8000282a:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000282c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002830:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80002832:	31 08       	mov	r8,16
80002834:	fe 6a 01 60 	mov	r10,-130720
80002838:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
8000283a:	fe 6a 01 f0 	mov	r10,-130576
8000283e:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002840:	e3 b9 00 00 	mtsr	0x0,r9
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
80002844:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002848:	4b 19       	lddpc	r9,8000290c <udd_ctrl_in_sent+0x12c>
8000284a:	92 b9       	ld.uh	r9,r9[0x6]
8000284c:	5c 78       	castu.h	r8
8000284e:	4b 3a       	lddpc	r10,80002918 <udd_ctrl_in_sent+0x138>
80002850:	94 8a       	ld.uh	r10,r10[0x0]
80002852:	14 08       	add	r8,r10
80002854:	10 39       	cp.w	r9,r8
80002856:	e0 89 00 08 	brgt	80002866 <udd_ctrl_in_sent+0x86>
								+
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
8000285a:	4a d8       	lddpc	r8,8000290c <udd_ctrl_in_sent+0x12c>
8000285c:	70 5c       	ld.w	r12,r8[0x14]
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
8000285e:	58 0c       	cp.w	r12,0
80002860:	c0 30       	breq	80002866 <udd_ctrl_in_sent+0x86>
80002862:	5d 1c       	icall	r12
80002864:	c0 51       	brne	8000286e <udd_ctrl_in_sent+0x8e>
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun or data packet complette than send zlp on IN (note don't change DataToggle)
			udd_ctrl_payload_need_in_zlp = false;
80002866:	30 09       	mov	r9,0
80002868:	4a b8       	lddpc	r8,80002914 <udd_ctrl_in_sent+0x134>
8000286a:	b0 89       	st.b	r8[0x0],r9
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
8000286c:	c1 18       	rjmp	8000288e <udd_ctrl_in_sent+0xae>
			udd_ctrl_payload_need_in_zlp = false;
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
8000286e:	4a b9       	lddpc	r9,80002918 <udd_ctrl_in_sent+0x138>
80002870:	4a 88       	lddpc	r8,80002910 <udd_ctrl_in_sent+0x130>
80002872:	90 0b       	ld.sh	r11,r8[0x0]
80002874:	92 0a       	ld.sh	r10,r9[0x0]
80002876:	f6 0a 00 0a 	add	r10,r11,r10
8000287a:	b2 0a       	st.h	r9[0x0],r10
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
8000287c:	30 09       	mov	r9,0
8000287e:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
80002880:	4a 38       	lddpc	r8,8000290c <udd_ctrl_in_sent+0x12c>
80002882:	90 67       	ld.sh	r7,r8[0xc]
			// Compute if an IN ZLP must be send after IN data
			udd_ctrl_payload_need_in_zlp =
80002884:	f1 d7 c0 06 	bfextu	r8,r7,0x0,0x6
80002888:	5f 09       	sreq	r9
8000288a:	4a 38       	lddpc	r8,80002914 <udd_ctrl_in_sent+0x134>
8000288c:	b0 89       	st.b	r8[0x0],r9
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000288e:	4a 08       	lddpc	r8,8000290c <udd_ctrl_in_sent+0x12c>
80002890:	70 2a       	ld.w	r10,r8[0x8]
80002892:	4a 08       	lddpc	r8,80002910 <udd_ctrl_in_sent+0x130>
80002894:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002896:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
8000289a:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write 
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
8000289c:	fe 68 01 30 	mov	r8,-130768
800028a0:	70 08       	ld.w	r8,r8[0x0]
800028a2:	e2 18 00 02 	andl	r8,0x2,COH
800028a6:	c0 91       	brne	800028b8 <udd_ctrl_in_sent+0xd8>
800028a8:	34 08       	mov	r8,64
800028aa:	f0 07 19 00 	cp.h	r7,r8
800028ae:	f9 b7 0b 40 	movhi	r7,64
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800028b2:	58 07       	cp.w	r7,0
800028b4:	c0 91       	brne	800028c6 <udd_ctrl_in_sent+0xe6>
800028b6:	c1 48       	rjmp	800028de <udd_ctrl_in_sent+0xfe>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800028b8:	e3 bb 00 00 	mtsr	0x0,r11
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800028bc:	30 49       	mov	r9,4
800028be:	49 18       	lddpc	r8,80002900 <udd_ctrl_in_sent+0x120>
800028c0:	91 09       	st.w	r8[0x0],r9
		return;	// Exit of IN DATA phase
800028c2:	e3 cd 80 80 	ldm	sp++,r7,pc
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800028c6:	5c 79       	castu.h	r9
800028c8:	f4 09 00 09 	add	r9,r10,r9
800028cc:	fc 18 e0 00 	movh	r8,0xe000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
800028d0:	13 3a       	ld.ub	r10,r9++
800028d2:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800028d4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800028d8:	ee 0a 19 00 	cp.h	r10,r7
800028dc:	cf a3       	brcs	800028d0 <udd_ctrl_in_sent+0xf0>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800028de:	48 d8       	lddpc	r8,80002910 <udd_ctrl_in_sent+0x130>
800028e0:	90 09       	ld.sh	r9,r8[0x0]
800028e2:	f2 07 00 07 	add	r7,r9,r7
800028e6:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800028e8:	30 18       	mov	r8,1
800028ea:	fe 69 01 60 	mov	r9,-130720
800028ee:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
800028f0:	fe 69 01 f0 	mov	r9,-130576
800028f4:	93 08       	st.w	r9[0x0],r8
800028f6:	e3 bb 00 00 	mtsr	0x0,r11
#endif
	barrier();
800028fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800028fe:	00 00       	add	r0,r0
80002900:	00 00       	add	r0,r0
80002902:	07 5c       	ld.sh	r12,--r3
80002904:	80 00       	ld.sh	r0,r0[0x0]
80002906:	25 40       	sub	r0,84
80002908:	80 00       	ld.sh	r0,r0[0x0]
8000290a:	27 80       	sub	r0,120
8000290c:	00 00       	add	r0,r0
8000290e:	0a 10       	sub	r0,r5
80002910:	00 00       	add	r0,r0
80002912:	07 5a       	ld.sh	r10,--r3
80002914:	00 00       	add	r0,r0
80002916:	07 60       	ld.uh	r0,--r3
80002918:	00 00       	add	r0,r0
8000291a:	07 24       	ld.uh	r4,r3++

8000291c <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
8000291c:	eb cd 40 e0 	pushm	r5-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
80002920:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP)
80002924:	30 39       	mov	r9,3
80002926:	f2 08 18 00 	cp.b	r8,r9
8000292a:	e0 8b 00 88 	brhi	80002a3a <udd_ep_alloc+0x11e>
		return false;
	if (Is_udd_endpoint_enabled(ep))
8000292e:	fe 69 00 00 	mov	r9,-131072
80002932:	72 79       	ld.w	r9,r9[0x1c]
80002934:	30 17       	mov	r7,1
80002936:	ee 08 09 47 	lsl	r7,r7,r8
8000293a:	ef e9 00 09 	and	r9,r7,r9
8000293e:	c7 e1       	brne	80002a3a <udd_ep_alloc+0x11e>
		return false;

	// Bank choise
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80002940:	f3 db c0 02 	bfextu	r9,r11,0x0,0x2
80002944:	58 19       	cp.w	r9,1
80002946:	c7 a5       	brlt	80002a3a <udd_ep_alloc+0x11e>
80002948:	58 29       	cp.w	r9,2
8000294a:	e0 8a 00 06 	brle	80002956 <udd_ep_alloc+0x3a>
8000294e:	58 39       	cp.w	r9,3
80002950:	c7 51       	brne	80002a3a <udd_ep_alloc+0x11e>
80002952:	30 06       	mov	r6,0
80002954:	c0 28       	rjmp	80002958 <udd_ep_alloc+0x3c>
80002956:	30 16       	mov	r6,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80002958:	f0 09 15 02 	lsl	r9,r8,0x2
8000295c:	e0 39 ff 00 	sub	r9,130816
80002960:	72 0e       	ld.w	lr,r9[0x0]
80002962:	5c 7a       	castu.h	r10
80002964:	30 85       	mov	r5,8
80002966:	f4 05 0c 4a 	max	r10,r10,r5
8000296a:	e0 65 04 00 	mov	r5,1024
8000296e:	f4 05 0d 4a 	min	r10,r10,r5
80002972:	a1 7a       	lsl	r10,0x1
80002974:	20 1a       	sub	r10,1
80002976:	f4 0a 12 00 	clz	r10,r10
8000297a:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
8000297e:	ab 7b       	lsl	r11,0xb
80002980:	e2 1b 18 00 	andl	r11,0x1800,COH
80002984:	f7 ec 10 8c 	or	r12,r11,r12<<0x8
80002988:	f4 0b 11 1c 	rsub	r11,r10,28
8000298c:	f9 eb 10 4b 	or	r11,r12,r11<<0x4
80002990:	f7 e6 10 2b 	or	r11,r11,r6<<0x2
80002994:	e2 1b 19 7c 	andl	r11,0x197c,COH
80002998:	1c 9a       	mov	r10,lr
8000299a:	e0 1a e6 83 	andl	r10,0xe683
8000299e:	f7 ea 10 0a 	or	r10,r11,r10
800029a2:	93 0a       	st.w	r9[0x0],r10
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
800029a4:	5c 87       	casts.h	r7

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800029a6:	30 29       	mov	r9,2
800029a8:	f2 08 18 00 	cp.b	r8,r9
800029ac:	e0 8b 00 1d 	brhi	800029e6 <udd_ep_alloc+0xca>
800029b0:	fe 6a 01 0c 	mov	r10,-130804
800029b4:	30 39       	mov	r9,3
		if (Is_udd_endpoint_enabled(i)) {
800029b6:	fe 6c 00 00 	mov	r12,-131072
800029ba:	30 16       	mov	r6,1
800029bc:	78 7e       	ld.w	lr,r12[0x1c]
800029be:	ec 09 09 4b 	lsl	r11,r6,r9
800029c2:	f7 ee 00 0e 	and	lr,r11,lr
800029c6:	c0 b0       	breq	800029dc <udd_ep_alloc+0xc0>
			ep_allocated |= 1 << i;
800029c8:	f7 e7 10 07 	or	r7,r11,r7
800029cc:	5c 87       	casts.h	r7
			udd_disable_endpoint(i);
800029ce:	78 7e       	ld.w	lr,r12[0x1c]
800029d0:	5c db       	com	r11
800029d2:	1c 6b       	and	r11,lr
800029d4:	99 7b       	st.w	r12[0x1c],r11
			udd_unallocate_memory(i);
800029d6:	74 0b       	ld.w	r11,r10[0x0]
800029d8:	a1 db       	cbr	r11,0x1
800029da:	95 0b       	st.w	r10[0x0],r11
800029dc:	20 19       	sub	r9,1
800029de:	20 4a       	sub	r10,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800029e0:	f2 08 18 00 	cp.b	r8,r9
800029e4:	ce c3       	brcs	800029bc <udd_ep_alloc+0xa0>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
800029e6:	0e 9c       	mov	r12,r7
800029e8:	5c 7c       	castu.h	r12
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
800029ea:	fe 6e 00 00 	mov	lr,-131072
800029ee:	30 16       	mov	r6,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800029f0:	30 37       	mov	r7,3
		if (ep_allocated & (1 << i)) {
800029f2:	f8 08 08 49 	asr	r9,r12,r8
800029f6:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800029fa:	c1 80       	breq	80002a2a <udd_ep_alloc+0x10e>
			udd_allocate_memory(i);
800029fc:	f0 0b 15 02 	lsl	r11,r8,0x2
80002a00:	fe 65 01 00 	mov	r5,-130816
80002a04:	f6 05 00 09 	add	r9,r11,r5
80002a08:	72 05       	ld.w	r5,r9[0x0]
80002a0a:	a1 b5       	sbr	r5,0x1
80002a0c:	93 05       	st.w	r9[0x0],r5
			udd_enable_endpoint(i);
80002a0e:	7c 75       	ld.w	r5,lr[0x1c]
80002a10:	ec 08 09 4a 	lsl	r10,r6,r8
80002a14:	0a 4a       	or	r10,r5
80002a16:	9d 7a       	st.w	lr[0x1c],r10
			if (!Is_udd_endpoint_configured(i))
80002a18:	e0 3b fe d0 	sub	r11,130768
80002a1c:	76 0a       	ld.w	r10,r11[0x0]
80002a1e:	e6 1a 00 04 	andh	r10,0x4,COH
80002a22:	c0 c0       	breq	80002a3a <udd_ep_alloc+0x11e>
				return false;
			udd_enable_endpoint_bank_autoswitch(i);	
80002a24:	72 0a       	ld.w	r10,r9[0x0]
80002a26:	a9 ba       	sbr	r10,0x9
80002a28:	93 0a       	st.w	r9[0x0],r10
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80002a2a:	2f f8       	sub	r8,-1
80002a2c:	5c 58       	castu.b	r8
80002a2e:	ee 08 18 00 	cp.b	r8,r7
80002a32:	fe 98 ff e0 	brls	800029f2 <udd_ep_alloc+0xd6>
80002a36:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002a3a:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0

80002a3e <udd_reset_ep_ctrl>:

static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
80002a3e:	fe 68 00 00 	mov	r8,-131072
80002a42:	70 09       	ld.w	r9,r8[0x0]
80002a44:	e0 19 ff 80 	andl	r9,0xff80
80002a48:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80002a4a:	70 09       	ld.w	r9,r8[0x0]
80002a4c:	a7 b9       	sbr	r9,0x7
80002a4e:	91 09       	st.w	r8[0x0],r9
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80002a50:	fe 69 01 00 	mov	r9,-130816
80002a54:	72 0b       	ld.w	r11,r9[0x0]
80002a56:	30 8c       	mov	r12,8
80002a58:	34 0a       	mov	r10,64
80002a5a:	f4 0c 0c 4a 	max	r10,r10,r12
80002a5e:	e0 6c 04 00 	mov	r12,1024
80002a62:	f4 0c 0d 4a 	min	r10,r10,r12
80002a66:	a1 7a       	lsl	r10,0x1
80002a68:	20 1a       	sub	r10,1
80002a6a:	f4 0a 12 00 	clz	r10,r10
80002a6e:	f4 0a 11 1c 	rsub	r10,r10,28
80002a72:	a5 6a       	lsl	r10,0x4
80002a74:	e2 1a 19 7c 	andl	r10,0x197c,COH
80002a78:	e0 1b e6 83 	andl	r11,0xe683
80002a7c:	16 4a       	or	r10,r11
80002a7e:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80002a80:	72 0a       	ld.w	r10,r9[0x0]
80002a82:	a1 ba       	sbr	r10,0x1
80002a84:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
80002a86:	70 79       	ld.w	r9,r8[0x1c]
80002a88:	a1 a9       	sbr	r9,0x0
80002a8a:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a8c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002a90:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
80002a92:	fe 69 01 f0 	mov	r9,-130576
80002a96:	30 4b       	mov	r11,4
80002a98:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80002a9a:	30 2b       	mov	r11,2
80002a9c:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
80002a9e:	e0 69 10 00 	mov	r9,4096
80002aa2:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002aa4:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}
80002aa8:	5e fc       	retal	r12
80002aaa:	d7 03       	nop

80002aac <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80002aac:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ab0:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002ab4:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80002ab6:	30 1c       	mov	r12,1
80002ab8:	f0 1f 00 15 	mcall	80002b0c <udd_attach+0x60>
	otg_unfreeze_clock();
80002abc:	fe 67 00 00 	mov	r7,-131072
80002ac0:	ee f8 08 00 	ld.w	r8,r7[2048]
80002ac4:	af c8       	cbr	r8,0xe
80002ac6:	ef 48 08 00 	st.w	r7[2048],r8
#else
	// Check USB clock because the source can be a PLL
	while( !Is_clock_usable() );
#endif
	// Authorize attach if VBus is present
	udd_attach_device();
80002aca:	6e 08       	ld.w	r8,r7[0x0]
80002acc:	a9 c8       	cbr	r8,0x8
80002ace:	8f 08       	st.w	r7[0x0],r8

	// (RESET_AND_WAKEUP)
	// After the attach and the first USB suspend, the following USB Reset time can be inferior to CPU restart clock time.
	// Thus, the USB Reset state is not detected and endpoint control is not allocated
	// In this case, a Reset is do automatically after attach.
	udc_reset();	// Reset USB Device Stack Core
80002ad0:	f0 1f 00 10 	mcall	80002b10 <udd_attach+0x64>
	udd_reset_ep_ctrl();	// Reset endpoint control
80002ad4:	f0 1f 00 10 	mcall	80002b14 <udd_attach+0x68>
	udd_ctrl_init();	// Reset endpoint control management
80002ad8:	f0 1f 00 10 	mcall	80002b18 <udd_attach+0x6c>

	// Enable USB line events
	udd_enable_reset_interrupt();
80002adc:	30 8b       	mov	r11,8
80002ade:	8f 6b       	st.w	r7[0x18],r11
	udd_enable_suspend_interrupt();
80002ae0:	30 19       	mov	r9,1
80002ae2:	8f 69       	st.w	r7[0x18],r9
	udd_enable_wake_up_interrupt();
80002ae4:	31 08       	mov	r8,16
80002ae6:	8f 68       	st.w	r7[0x18],r8
	udd_enable_sof_interrupt();
80002ae8:	30 4a       	mov	r10,4
80002aea:	8f 6a       	st.w	r7[0x18],r10
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
80002aec:	8f 2b       	st.w	r7[0x8],r11
	udd_ack_sof();
80002aee:	8f 2a       	st.w	r7[0x8],r10
	udd_ack_msof();
80002af0:	30 2a       	mov	r10,2
80002af2:	8f 2a       	st.w	r7[0x8],r10

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
80002af4:	8f 29       	st.w	r7[0x8],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80002af6:	8f 28       	st.w	r7[0x8],r8
	otg_freeze_clock();
80002af8:	ee f8 08 00 	ld.w	r8,r7[2048]
80002afc:	af a8       	sbr	r8,0xe
80002afe:	ef 48 08 00 	st.w	r7[2048],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002b02:	e3 b6 00 00 	mtsr	0x0,r6
	cpu_irq_restore(flags);
}
80002b06:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002b0a:	00 00       	add	r0,r0
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	27 0c       	sub	r12,112
80002b10:	80 00       	ld.sh	r0,r0[0x0]
80002b12:	39 e0       	mov	r0,-98
80002b14:	80 00       	ld.sh	r0,r0[0x0]
80002b16:	2a 3e       	sub	lr,-93
80002b18:	80 00       	ld.sh	r0,r0[0x0]
80002b1a:	27 80       	sub	r0,120

80002b1c <udd_enable>:
	return true;
}


void udd_enable(void)
{
80002b1c:	eb cd 40 c0 	pushm	r6-r7,lr
	irqflags_t flags;
	sysclk_enable_usb();
80002b20:	f0 1f 00 39 	mcall	80002c04 <udd_enable+0xe8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002b24:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002b28:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

	//** Enable USB hardware
	otg_disable();
80002b2a:	fe 67 00 00 	mov	r7,-131072
80002b2e:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b32:	af d8       	cbr	r8,0xf
80002b34:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_enabled();
80002b38:	ee f8 08 00 	ld.w	r8,r7[2048]
	// Check UID pin state before enter in USB device mode
	if (!Is_otg_id_device())
		return false;
#else
	// Here, only the Device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(udd_interrupt, AVR32_USBB_IRQ, UDD_USB_INT_LEVEL);
80002b3c:	30 0a       	mov	r10,0
80002b3e:	e0 6b 02 20 	mov	r11,544
80002b42:	4b 2c       	lddpc	r12,80002c08 <udd_enable+0xec>
80002b44:	f0 1f 00 32 	mcall	80002c0c <udd_enable+0xf0>
	otg_force_device_mode();
80002b48:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b4c:	b9 b8       	sbr	r8,0x19
80002b4e:	ef 48 08 00 	st.w	r7[2048],r8
80002b52:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b56:	b9 c8       	cbr	r8,0x18
80002b58:	ef 48 08 00 	st.w	r7[2048],r8
#endif
	otg_disable_pad();
80002b5c:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b60:	ad c8       	cbr	r8,0xc
80002b62:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable_pad();
80002b66:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b6a:	ad a8       	sbr	r8,0xc
80002b6c:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable();
80002b70:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b74:	af b8       	sbr	r8,0xf
80002b76:	ef 48 08 00 	st.w	r7[2048],r8
	otg_unfreeze_clock();
80002b7a:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b7e:	af c8       	cbr	r8,0xe
80002b80:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_clock_frozen();
80002b84:	ee f8 08 00 	ld.w	r8,r7[2048]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b88:	4a 28       	lddpc	r8,80002c10 <udd_enable+0xf4>
80002b8a:	70 0a       	ld.w	r10,r8[0x0]
80002b8c:	30 09       	mov	r9,0
		udd_ep_job[i].stall_requested = false;
80002b8e:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b92:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b96:	91 0a       	st.w	r8[0x0],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b98:	70 4a       	ld.w	r10,r8[0x10]
		udd_ep_job[i].stall_requested = false;
80002b9a:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b9e:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002ba2:	91 4a       	st.w	r8[0x10],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002ba4:	70 8a       	ld.w	r10,r8[0x20]
		udd_ep_job[i].stall_requested = false;
80002ba6:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002baa:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002bae:	91 8a       	st.w	r8[0x20],r10

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80002bb0:	6e 08       	ld.w	r8,r7[0x0]
80002bb2:	ad c8       	cbr	r8,0xc
80002bb4:	8f 08       	st.w	r7[0x0],r8
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80002bb6:	6e 08       	ld.w	r8,r7[0x0]
80002bb8:	e8 18 0c 00 	orl	r8,0xc00
80002bbc:	8f 08       	st.w	r7[0x0],r8
#  endif
#endif
	udd_enable_vbus_interrupt();
80002bbe:	ee f8 08 00 	ld.w	r8,r7[2048]
80002bc2:	a1 b8       	sbr	r8,0x1
80002bc4:	ef 48 08 00 	st.w	r7[2048],r8
	otg_freeze_clock();
80002bc8:	ee f8 08 00 	ld.w	r8,r7[2048]
80002bcc:	af a8       	sbr	r8,0xe
80002bce:	ef 48 08 00 	st.w	r7[2048],r8
	// Always authorize asynchrone USB interrupts to exit of sleep mode
	AVR32_PM.AWEN.usb_waken = 1;
80002bd2:	fe 78 0c 00 	mov	r8,-62464
80002bd6:	f0 fa 01 44 	ld.w	r10,r8[324]
80002bda:	30 1b       	mov	r11,1
80002bdc:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
80002be0:	f1 4a 01 44 	st.w	r8[324],r10

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80002be4:	48 c8       	lddpc	r8,80002c14 <udd_enable+0xf8>
80002be6:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002be8:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002bec:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002bee:	48 b8       	lddpc	r8,80002c18 <udd_enable+0xfc>
80002bf0:	11 ba       	ld.ub	r10,r8[0x3]
80002bf2:	2f fa       	sub	r10,-1
80002bf4:	b0 ba       	st.b	r8[0x3],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002bf6:	e3 b9 00 00 	mtsr	0x0,r9
80002bfa:	e3 b6 00 00 	mtsr	0x0,r6
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
80002bfe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c02:	00 00       	add	r0,r0
80002c04:	80 00       	ld.sh	r0,r0[0x0]
80002c06:	32 c4       	mov	r4,44
80002c08:	80 00       	ld.sh	r0,r0[0x0]
80002c0a:	2c 1c       	sub	r12,-63
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	22 3c       	sub	r12,35
80002c10:	00 00       	add	r0,r0
80002c12:	07 28       	ld.uh	r8,r3++
80002c14:	00 00       	add	r0,r0
80002c16:	07 58       	ld.sh	r8,--r3
80002c18:	00 00       	add	r0,r0
80002c1a:	0a 28       	rsub	r8,r5

80002c1c <udd_interrupt>:
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#endif
{
80002c1c:	eb cd 40 fc 	pushm	r2-r7,lr
	if (Is_udd_sof()) {
80002c20:	fe 68 00 00 	mov	r8,-131072
80002c24:	70 18       	ld.w	r8,r8[0x4]
80002c26:	e2 18 00 04 	andl	r8,0x4,COH
80002c2a:	c0 f0       	breq	80002c48 <udd_interrupt+0x2c>
		udd_ack_sof();
80002c2c:	fe 68 00 00 	mov	r8,-131072
80002c30:	30 49       	mov	r9,4
80002c32:	91 29       	st.w	r8[0x8],r9
		if (Is_udd_full_speed_mode()) {
80002c34:	f0 f8 08 04 	ld.w	r8,r8[2052]
80002c38:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80002c3c:	e0 81 02 ce 	brne	800031d8 <udd_interrupt+0x5bc>
		udc_sof_notify();
80002c40:	f0 1f 01 6f 	mcall	800031fc <udd_interrupt+0x5e0>
80002c44:	e0 8f 02 ca 	bral	800031d8 <udd_interrupt+0x5bc>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_msof()) {
80002c48:	fe 68 00 00 	mov	r8,-131072
80002c4c:	70 18       	ld.w	r8,r8[0x4]
80002c4e:	e2 18 00 02 	andl	r8,0x2,COH
80002c52:	c0 90       	breq	80002c64 <udd_interrupt+0x48>
		udd_ack_msof();
80002c54:	30 29       	mov	r9,2
80002c56:	fe 68 00 00 	mov	r8,-131072
80002c5a:	91 29       	st.w	r8[0x8],r9
		udc_sof_notify();
80002c5c:	f0 1f 01 68 	mcall	800031fc <udd_interrupt+0x5e0>
		goto udd_interrupt_end;
80002c60:	e0 8f 02 bc 	bral	800031d8 <udd_interrupt+0x5bc>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80002c64:	fe 68 00 00 	mov	r8,-131072
80002c68:	70 18       	ld.w	r8,r8[0x4]
80002c6a:	e2 18 10 00 	andl	r8,0x1000,COH
80002c6e:	e0 80 01 6f 	breq	80002f4c <udd_interrupt+0x330>
		return false;	// No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80002c72:	fe 68 02 20 	mov	r8,-130528
80002c76:	31 09       	mov	r9,16
80002c78:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80002c7a:	30 89       	mov	r9,8
80002c7c:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80002c7e:	fe 68 01 30 	mov	r8,-130768
80002c82:	70 08       	ld.w	r8,r8[0x0]
80002c84:	e2 18 00 04 	andl	r8,0x4,COH
80002c88:	e0 80 00 87 	breq	80002d96 <udd_interrupt+0x17a>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80002c8c:	fe f8 05 74 	ld.w	r8,pc[1396]
80002c90:	70 08       	ld.w	r8,r8[0x0]
80002c92:	58 08       	cp.w	r8,0
80002c94:	c0 50       	breq	80002c9e <udd_interrupt+0x82>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80002c96:	f0 1f 01 5c 	mcall	80003204 <udd_interrupt+0x5e8>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002c9a:	f0 1f 01 5c 	mcall	80003208 <udd_interrupt+0x5ec>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80002c9e:	fe 68 01 30 	mov	r8,-130768
80002ca2:	70 08       	ld.w	r8,r8[0x0]
80002ca4:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80002ca8:	58 88       	cp.w	r8,8
80002caa:	c0 90       	breq	80002cbc <udd_interrupt+0xa0>
		udd_ctrl_stall_data();
80002cac:	f0 1f 01 58 	mcall	8000320c <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002cb0:	30 49       	mov	r9,4
80002cb2:	fe 68 01 60 	mov	r8,-130720
80002cb6:	91 09       	st.w	r8[0x0],r9
80002cb8:	e0 8f 02 90 	bral	800031d8 <udd_interrupt+0x5bc>
80002cbc:	fc 18 e0 00 	movh	r8,0xe000
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80002cc0:	fe fc 05 50 	ld.w	r12,pc[1360]
80002cc4:	fc 1b 20 00 	movh	r11,0x2000
80002cc8:	f0 0c 00 09 	add	r9,r8,r12
80002ccc:	11 3a       	ld.ub	r10,r8++
80002cce:	f2 0b 0b 0a 	st.b	r9[r11],r10
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80002cd2:	30 8a       	mov	r10,8
80002cd4:	ea 1a e0 00 	orh	r10,0xe000
80002cd8:	14 38       	cp.w	r8,r10
80002cda:	cf 71       	brne	80002cc8 <udd_interrupt+0xac>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002cdc:	fe f8 05 34 	ld.w	r8,pc[1332]
80002ce0:	90 19       	ld.sh	r9,r8[0x2]
80002ce2:	5c c9       	swap.bh	r9
80002ce4:	b0 19       	st.h	r8[0x2],r9
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002ce6:	90 29       	ld.sh	r9,r8[0x4]
80002ce8:	5c c9       	swap.bh	r9
80002cea:	b0 29       	st.h	r8[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002cec:	90 39       	ld.sh	r9,r8[0x6]
80002cee:	5c c9       	swap.bh	r9
80002cf0:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
80002cf2:	f0 1f 01 49 	mcall	80003214 <udd_interrupt+0x5f8>
80002cf6:	c0 91       	brne	80002d08 <udd_interrupt+0xec>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
80002cf8:	f0 1f 01 45 	mcall	8000320c <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002cfc:	30 49       	mov	r9,4
80002cfe:	fe 68 01 60 	mov	r8,-130720
80002d02:	91 09       	st.w	r8[0x0],r9
80002d04:	e0 8f 02 6a 	bral	800031d8 <udd_interrupt+0x5bc>
		return;
	}
	udd_ack_setup_received(0);
80002d08:	30 49       	mov	r9,4
80002d0a:	fe 68 01 60 	mov	r8,-130720
80002d0e:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80002d10:	fe f8 05 00 	ld.w	r8,pc[1280]
80002d14:	11 89       	ld.ub	r9,r8[0x0]
80002d16:	30 08       	mov	r8,0
80002d18:	f0 09 18 00 	cp.b	r9,r8
80002d1c:	c1 94       	brge	80002d4e <udd_interrupt+0x132>
		// Compute if an IN ZLP must be send after IN data
		udd_ctrl_payload_need_in_zlp =
80002d1e:	fe f8 04 f2 	ld.w	r8,pc[1266]
80002d22:	90 e8       	ld.uh	r8,r8[0xc]
80002d24:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002d28:	5f 09       	sreq	r9
80002d2a:	fe f8 04 ee 	ld.w	r8,pc[1262]
80002d2e:	b0 89       	st.b	r8[0x0],r9
				((udd_g_ctrlreq.payload_size %
						USB_DEVICE_EP_CTRL_SIZE) == 0);
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d30:	30 08       	mov	r8,0
80002d32:	fe f9 04 ea 	ld.w	r9,pc[1258]
80002d36:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d38:	fe f9 04 e8 	ld.w	r9,pc[1256]
80002d3c:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80002d3e:	30 29       	mov	r9,2
80002d40:	fe f8 04 c0 	ld.w	r8,pc[1216]
80002d44:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent();	// Send first data transfer
80002d46:	f0 1f 01 38 	mcall	80003224 <udd_interrupt+0x608>
80002d4a:	e0 8f 02 47 	bral	800031d8 <udd_interrupt+0x5bc>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80002d4e:	fe f8 04 c2 	ld.w	r8,pc[1218]
80002d52:	90 39       	ld.sh	r9,r8[0x6]
80002d54:	30 08       	mov	r8,0
80002d56:	f0 09 19 00 	cp.h	r9,r8
80002d5a:	c0 51       	brne	80002d64 <udd_interrupt+0x148>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80002d5c:	f0 1f 01 33 	mcall	80003228 <udd_interrupt+0x60c>
80002d60:	e0 8f 02 3c 	bral	800031d8 <udd_interrupt+0x5bc>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d64:	30 08       	mov	r8,0
80002d66:	fe f9 04 b6 	ld.w	r9,pc[1206]
80002d6a:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d6c:	fe f9 04 b4 	ld.w	r9,pc[1204]
80002d70:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80002d72:	30 19       	mov	r9,1
80002d74:	fe f8 04 8c 	ld.w	r8,pc[1164]
80002d78:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80002d7a:	31 08       	mov	r8,16
80002d7c:	fe 69 01 60 	mov	r9,-130720
80002d80:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d82:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002d86:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80002d88:	fe 6a 01 f0 	mov	r10,-130576
80002d8c:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002d8e:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002d92:	e0 8f 02 23 	bral	800031d8 <udd_interrupt+0x5bc>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80002d96:	fe 68 01 30 	mov	r8,-130768
80002d9a:	70 08       	ld.w	r8,r8[0x0]
80002d9c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002da0:	c0 b0       	breq	80002db6 <udd_interrupt+0x19a>
80002da2:	fe 68 01 c0 	mov	r8,-130624
80002da6:	70 08       	ld.w	r8,r8[0x0]
80002da8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002dac:	c0 50       	breq	80002db6 <udd_interrupt+0x19a>
		// IN packet sent
		udd_ctrl_in_sent();
80002dae:	f0 1f 01 1e 	mcall	80003224 <udd_interrupt+0x608>
80002db2:	e0 8f 02 13 	bral	800031d8 <udd_interrupt+0x5bc>
		return true;
	}
	if (Is_udd_out_received(0)) {
80002db6:	fe 68 01 30 	mov	r8,-130768
80002dba:	70 08       	ld.w	r8,r8[0x0]
80002dbc:	e2 18 00 02 	andl	r8,0x2,COH
80002dc0:	e0 80 00 a3 	breq	80002f06 <udd_interrupt+0x2ea>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80002dc4:	fe f8 04 3c 	ld.w	r8,pc[1084]
80002dc8:	70 08       	ld.w	r8,r8[0x0]
80002dca:	58 18       	cp.w	r8,1
80002dcc:	c1 10       	breq	80002dee <udd_interrupt+0x1d2>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80002dce:	58 28       	cp.w	r8,2
80002dd0:	5f 09       	sreq	r9
80002dd2:	58 48       	cp.w	r8,4
80002dd4:	5f 08       	sreq	r8
80002dd6:	f3 e8 10 08 	or	r8,r9,r8
80002dda:	c0 40       	breq	80002de2 <udd_interrupt+0x1c6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
80002ddc:	f0 1f 01 0a 	mcall	80003204 <udd_interrupt+0x5e8>
80002de0:	c0 38       	rjmp	80002de6 <udd_interrupt+0x1ca>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80002de2:	f0 1f 01 0b 	mcall	8000320c <udd_interrupt+0x5f0>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002de6:	f0 1f 01 09 	mcall	80003208 <udd_interrupt+0x5ec>
80002dea:	e0 8f 01 f7 	bral	800031d8 <udd_interrupt+0x5bc>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80002dee:	fe 68 01 30 	mov	r8,-130768
80002df2:	70 0b       	ld.w	r11,r8[0x0]
80002df4:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002df8:	fe f8 04 18 	ld.w	r8,pc[1048]
80002dfc:	90 69       	ld.sh	r9,r8[0xc]
80002dfe:	fe f8 04 22 	ld.w	r8,pc[1058]
80002e02:	90 08       	ld.sh	r8,r8[0x0]
80002e04:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80002e08:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80002e0c:	f6 0a 00 0a 	add	r10,r11,r10
80002e10:	14 3c       	cp.w	r12,r10
80002e12:	c0 44       	brge	80002e1a <udd_interrupt+0x1fe>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80002e14:	10 19       	sub	r9,r8
80002e16:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002e1a:	fe f9 03 f6 	ld.w	r9,pc[1014]
80002e1e:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
80002e20:	58 0b       	cp.w	r11,0
80002e22:	e0 80 01 e2 	breq	800031e6 <udd_interrupt+0x5ca>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002e26:	5c 78       	castu.h	r8
80002e28:	10 09       	add	r9,r8
80002e2a:	fc 18 e0 00 	movh	r8,0xe000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80002e2e:	11 3a       	ld.ub	r10,r8++
80002e30:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80002e32:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80002e36:	f6 0a 19 00 	cp.h	r10,r11
80002e3a:	cf a3       	brcs	80002e2e <udd_interrupt+0x212>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80002e3c:	fe f9 03 e4 	ld.w	r9,pc[996]
80002e40:	92 08       	ld.sh	r8,r9[0x0]
80002e42:	16 08       	add	r8,r11
80002e44:	5c 88       	casts.h	r8
80002e46:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80002e48:	34 09       	mov	r9,64
80002e4a:	f2 0b 19 00 	cp.h	r11,r9
80002e4e:	c0 e1       	brne	80002e6a <udd_interrupt+0x24e>
80002e50:	fe f9 03 c0 	ld.w	r9,pc[960]
80002e54:	92 ba       	ld.uh	r10,r9[0x6]
80002e56:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80002e5a:	fe f9 03 c2 	ld.w	r9,pc[962]
80002e5e:	92 89       	ld.uh	r9,r9[0x0]
80002e60:	f6 09 00 09 	add	r9,r11,r9
80002e64:	12 3a       	cp.w	r10,r9
80002e66:	e0 89 00 1a 	brgt	80002e9a <udd_interrupt+0x27e>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback 
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80002e6a:	fe f9 03 a6 	ld.w	r9,pc[934]
80002e6e:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80002e70:	72 5c       	ld.w	r12,r9[0x14]
80002e72:	58 0c       	cp.w	r12,0
80002e74:	c0 b0       	breq	80002e8a <udd_interrupt+0x26e>
			if (!udd_g_ctrlreq.over_under_run()) {
80002e76:	5d 1c       	icall	r12
80002e78:	c0 91       	brne	80002e8a <udd_interrupt+0x26e>
				// Stall ZLP
				udd_ctrl_stall_data();
80002e7a:	f0 1f 00 e5 	mcall	8000320c <udd_interrupt+0x5f0>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80002e7e:	30 29       	mov	r9,2
80002e80:	fe 68 01 60 	mov	r8,-130720
80002e84:	91 09       	st.w	r8[0x0],r9
80002e86:	e0 8f 01 a9 	bral	800031d8 <udd_interrupt+0x5bc>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002e8a:	30 29       	mov	r9,2
80002e8c:	fe 68 01 60 	mov	r8,-130720
80002e90:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80002e92:	f0 1f 00 e6 	mcall	80003228 <udd_interrupt+0x60c>
80002e96:	e0 8f 01 a1 	bral	800031d8 <udd_interrupt+0x5bc>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80002e9a:	fe f9 03 76 	ld.w	r9,pc[886]
80002e9e:	92 69       	ld.sh	r9,r9[0xc]
80002ea0:	f0 09 19 00 	cp.h	r9,r8
80002ea4:	c2 21       	brne	80002ee8 <udd_interrupt+0x2cc>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80002ea6:	fe f8 03 6a 	ld.w	r8,pc[874]
80002eaa:	70 5c       	ld.w	r12,r8[0x14]
80002eac:	58 0c       	cp.w	r12,0
80002eae:	c0 91       	brne	80002ec0 <udd_interrupt+0x2a4>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
80002eb0:	f0 1f 00 d7 	mcall	8000320c <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002eb4:	30 29       	mov	r9,2
80002eb6:	fe 68 01 60 	mov	r8,-130720
80002eba:	91 09       	st.w	r8[0x0],r9
80002ebc:	e0 8f 01 8e 	bral	800031d8 <udd_interrupt+0x5bc>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80002ec0:	5d 1c       	icall	r12
80002ec2:	c0 81       	brne	80002ed2 <udd_interrupt+0x2b6>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80002ec4:	f0 1f 00 d2 	mcall	8000320c <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002ec8:	30 29       	mov	r9,2
80002eca:	fe 68 01 60 	mov	r8,-130720
80002ece:	91 09       	st.w	r8[0x0],r9
80002ed0:	c8 49       	rjmp	800031d8 <udd_interrupt+0x5bc>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002ed2:	fe f9 03 4a 	ld.w	r9,pc[842]
80002ed6:	fe f8 03 4a 	ld.w	r8,pc[842]
80002eda:	90 0b       	ld.sh	r11,r8[0x0]
80002edc:	92 0a       	ld.sh	r10,r9[0x0]
80002ede:	f6 0a 00 0a 	add	r10,r11,r10
80002ee2:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80002ee4:	30 09       	mov	r9,0
80002ee6:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80002ee8:	fe 69 01 60 	mov	r9,-130720
80002eec:	30 28       	mov	r8,2
80002eee:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80002ef0:	31 08       	mov	r8,16
80002ef2:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ef4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002ef8:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80002efa:	fe 6a 01 f0 	mov	r10,-130576
80002efe:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002f00:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002f04:	c6 a9       	rjmp	800031d8 <udd_interrupt+0x5bc>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80002f06:	fe 68 01 30 	mov	r8,-130768
80002f0a:	70 08       	ld.w	r8,r8[0x0]
80002f0c:	e2 18 00 08 	andl	r8,0x8,COH
80002f10:	c1 80       	breq	80002f40 <udd_interrupt+0x324>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80002f12:	30 89       	mov	r9,8
80002f14:	fe 68 01 60 	mov	r8,-130720
80002f18:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80002f1a:	fe 68 01 30 	mov	r8,-130768
80002f1e:	70 08       	ld.w	r8,r8[0x0]
80002f20:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002f24:	e0 81 01 5a 	brne	800031d8 <udd_interrupt+0x5bc>
		return;	// overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002f28:	fe f8 02 d8 	ld.w	r8,pc[728]
80002f2c:	70 08       	ld.w	r8,r8[0x0]
80002f2e:	58 38       	cp.w	r8,3
80002f30:	e0 81 01 54 	brne	800031d8 <udd_interrupt+0x5bc>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80002f34:	e8 69 00 00 	mov	r9,524288
80002f38:	fe 68 01 f0 	mov	r8,-130576
80002f3c:	91 09       	st.w	r8[0x0],r9
80002f3e:	c4 d9       	rjmp	800031d8 <udd_interrupt+0x5bc>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80002f40:	fe 68 01 30 	mov	r8,-130768
80002f44:	70 08       	ld.w	r8,r8[0x0]
80002f46:	e2 18 00 10 	andl	r8,0x10,COH
80002f4a:	c0 e1       	brne	80002f66 <udd_interrupt+0x34a>
80002f4c:	fe f7 02 e0 	ld.w	r7,pc[736]
80002f50:	0e 9a       	mov	r10,r7
80002f52:	fe 69 01 34 	mov	r9,-130764
80002f56:	30 0b       	mov	r11,0
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f58:	fe 66 00 00 	mov	r6,-131072
80002f5c:	fc 14 02 00 	movh	r4,0x200
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002f60:	e0 63 10 00 	mov	r3,4096
80002f64:	c1 e8       	rjmp	80002fa0 <udd_interrupt+0x384>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
80002f66:	31 09       	mov	r9,16
80002f68:	fe 68 01 60 	mov	r8,-130720
80002f6c:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80002f6e:	fe 68 01 30 	mov	r8,-130768
80002f72:	70 08       	ld.w	r8,r8[0x0]
80002f74:	e2 18 00 02 	andl	r8,0x2,COH
80002f78:	e0 81 01 30 	brne	800031d8 <udd_interrupt+0x5bc>
		return;	// underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80002f7c:	fe f8 02 84 	ld.w	r8,pc[644]
80002f80:	70 08       	ld.w	r8,r8[0x0]
80002f82:	58 18       	cp.w	r8,1
80002f84:	c0 41       	brne	80002f8c <udd_interrupt+0x370>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80002f86:	f0 1f 00 a9 	mcall	80003228 <udd_interrupt+0x60c>
80002f8a:	c2 79       	rjmp	800031d8 <udd_interrupt+0x5bc>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80002f8c:	58 48       	cp.w	r8,4
80002f8e:	e0 81 01 25 	brne	800031d8 <udd_interrupt+0x5bc>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80002f92:	e8 69 00 00 	mov	r9,524288
80002f96:	fe 68 01 f0 	mov	r8,-130576
80002f9a:	91 09       	st.w	r8[0x0],r9
80002f9c:	c1 e9       	rjmp	800031d8 <udd_interrupt+0x5bc>
80002f9e:	10 9b       	mov	r11,r8
80002fa0:	f6 c8 ff ff 	sub	r8,r11,-1
80002fa4:	14 9c       	mov	r12,r10
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002fa6:	6c 45       	ld.w	r5,r6[0x10]
80002fa8:	10 9e       	mov	lr,r8
80002faa:	e8 0b 09 4b 	lsl	r11,r4,r11
80002fae:	f7 e5 00 05 	and	r5,r11,r5
80002fb2:	c4 b0       	breq	80003048 <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80002fb4:	6c 15       	ld.w	r5,r6[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002fb6:	f7 e5 00 05 	and	r5,r11,r5
80002fba:	c4 70       	breq	80003048 <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			udd_disable_endpoint_dma_interrupt(ep);
80002fbc:	fe 69 00 00 	mov	r9,-131072
80002fc0:	93 5b       	st.w	r9[0x14],r11
			if (ptr_job->b_raise_dma) {
80002fc2:	74 09       	ld.w	r9,r10[0x0]
80002fc4:	e6 19 20 00 	andh	r9,0x2000,COH
80002fc8:	c0 50       	breq	80002fd2 <udd_interrupt+0x3b6>
				// In case of manual raise DMA interrupt
				// to process a ZLP packet
				udd_raise_endpoint_dma_interrupt(ep);
80002fca:	fe 69 00 00 	mov	r9,-131072
80002fce:	93 3b       	st.w	r9[0xc],r11
80002fd0:	c0 a8       	rjmp	80002fe4 <udd_interrupt+0x3c8>
			}else{
				// Save number of data no transfered
				nb_remaining = (udd_endpoint_dma_get_status(ep) &
80002fd2:	f0 09 15 04 	lsl	r9,r8,0x4
80002fd6:	e0 39 fd 00 	sub	r9,130304
80002fda:	72 39       	ld.w	r9,r9[0xc]
						AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
						>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
				// Update number of data transfered
				ptr_job->buf_size -= nb_remaining;
80002fdc:	b1 89       	lsr	r9,0x10
80002fde:	74 2a       	ld.w	r10,r10[0x8]
80002fe0:	12 1a       	sub	r10,r9
80002fe2:	99 2a       	st.w	r12[0x8],r10
			}

			if (Is_udd_endpoint_in(ep)) {
80002fe4:	a3 68       	lsl	r8,0x2
80002fe6:	fe 6b 01 00 	mov	r11,-130816
80002fea:	f0 0b 00 09 	add	r9,r8,r11
80002fee:	72 09       	ld.w	r9,r9[0x0]
80002ff0:	e2 19 01 00 	andl	r9,0x100,COH
80002ff4:	c2 60       	breq	80003040 <udd_interrupt+0x424>
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
80002ff6:	78 09       	ld.w	r9,r12[0x0]
80002ff8:	e6 19 40 00 	andh	r9,0x4000,COH
80002ffc:	c2 20       	breq	80003040 <udd_interrupt+0x424>
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
80002ffe:	fe 6a 01 60 	mov	r10,-130720
80003002:	f0 0a 00 09 	add	r9,r8,r10
80003006:	30 1a       	mov	r10,1
80003008:	93 0a       	st.w	r9[0x0],r10
					if (Is_udd_write_enabled(ep)) {
8000300a:	fe 6b 01 30 	mov	r11,-130768
8000300e:	f0 0b 00 09 	add	r9,r8,r11
80003012:	72 0a       	ld.w	r10,r9[0x0]
						udd_raise_in_send(ep);
80003014:	fe 6b 01 90 	mov	r11,-130672
80003018:	f0 0b 00 09 	add	r9,r8,r11
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
8000301c:	e6 1a 00 01 	andh	r10,0x1,COH
						udd_raise_in_send(ep);
80003020:	f9 ba 01 01 	movne	r10,1
80003024:	f3 fa 1a 00 	st.wne	r9[0x0],r10
					}
					udd_enable_in_send_interrupt(ep);
80003028:	e0 38 fe 10 	sub	r8,130576
8000302c:	30 19       	mov	r9,1
8000302e:	91 09       	st.w	r8[0x0],r9
					udd_enable_endpoint_interrupt(ep);
80003030:	e0 68 10 00 	mov	r8,4096
80003034:	f0 0e 09 4e 	lsl	lr,r8,lr
80003038:	fe 68 00 00 	mov	r8,-131072
8000303c:	91 6e       	st.w	r8[0x18],lr
8000303e:	cc d8       	rjmp	800031d8 <udd_interrupt+0x5bc>
					return true;
				}
			}
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
80003040:	30 0b       	mov	r11,0
80003042:	f0 1f 00 7c 	mcall	80003230 <udd_interrupt+0x614>
80003046:	cc 98       	rjmp	800031d8 <udd_interrupt+0x5bc>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80003048:	6c 4b       	ld.w	r11,r6[0x10]
8000304a:	e6 0e 09 4e 	lsl	lr,r3,lr
8000304e:	fd eb 00 0b 	and	r11,lr,r11
80003052:	c4 60       	breq	800030de <udd_interrupt+0x4c2>
80003054:	e0 7b fe d0 	mov	r11,130768
80003058:	f2 0b 00 02 	add	r2,r9,r11
8000305c:	f2 cb ff 70 	sub	r11,r9,-144
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80003060:	76 05       	ld.w	r5,r11[0x0]
80003062:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
80003066:	c1 50       	breq	80003090 <udd_interrupt+0x474>
80003068:	72 05       	ld.w	r5,r9[0x0]
8000306a:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8000306e:	c1 10       	breq	80003090 <udd_interrupt+0x474>
				udd_disable_in_send_interrupt(ep);
80003070:	fe 6a 02 20 	mov	r10,-130528
80003074:	e4 0a 00 08 	add	r8,r2,r10
80003078:	30 19       	mov	r9,1
8000307a:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
8000307c:	e0 32 fe a0 	sub	r2,130720
80003080:	85 09       	st.w	r2[0x0],r9
				udd_ack_fifocon(ep);
80003082:	e0 69 40 00 	mov	r9,16384
80003086:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false);
80003088:	30 0b       	mov	r11,0
8000308a:	f0 1f 00 6a 	mcall	80003230 <udd_interrupt+0x614>
8000308e:	ca 58       	rjmp	800031d8 <udd_interrupt+0x5bc>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0==udd_nb_busy_bank(ep))) {
80003090:	76 0b       	ld.w	r11,r11[0x0]
80003092:	e2 1b 10 00 	andl	r11,0x1000,COH
80003096:	c2 40       	breq	800030de <udd_interrupt+0x4c2>
80003098:	72 0b       	ld.w	r11,r9[0x0]
8000309a:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
8000309e:	c2 01       	brne	800030de <udd_interrupt+0x4c2>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
800030a0:	fe 69 02 20 	mov	r9,-130528
800030a4:	e4 09 00 08 	add	r8,r2,r9
800030a8:	e0 69 10 00 	mov	r9,4096
800030ac:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
800030ae:	fe 68 00 00 	mov	r8,-131072
800030b2:	91 5e       	st.w	r8[0x14],lr

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
800030b4:	78 08       	ld.w	r8,r12[0x0]
800030b6:	30 09       	mov	r9,0
800030b8:	f1 d9 d3 81 	bfins	r8,r9,0x1c,0x1
800030bc:	99 08       	st.w	r12[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
800030be:	fe 6b 01 00 	mov	r11,-130816
800030c2:	e4 0b 00 08 	add	r8,r2,r11
800030c6:	70 09       	ld.w	r9,r8[0x0]
800030c8:	a9 d9       	cbr	r9,0x9
800030ca:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
800030cc:	e0 32 fe 10 	sub	r2,130576
800030d0:	e8 68 00 00 	mov	r8,524288
800030d4:	85 08       	st.w	r2[0x0],r8
				udd_reset_data_toggle(ep);
800030d6:	e4 68 00 00 	mov	r8,262144
800030da:	85 08       	st.w	r2[0x0],r8
800030dc:	c7 e8       	rjmp	800031d8 <udd_interrupt+0x5bc>
800030de:	2f 0a       	sub	r10,-16
800030e0:	2f c9       	sub	r9,-4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
800030e2:	58 38       	cp.w	r8,3
800030e4:	fe 91 ff 5d 	brne	80002f9e <udd_interrupt+0x382>
800030e8:	c8 38       	rjmp	800031ee <udd_interrupt+0x5d2>
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
800030ea:	30 89       	mov	r9,8
800030ec:	fe 68 00 00 	mov	r8,-131072
800030f0:	91 29       	st.w	r8[0x8],r9
#if __ICCAVR32__
#if !defined(AVR32_USBB_IRQ_GROUP)
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
800030f2:	ee c6 ff d0 	sub	r6,r7,-48
static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true);
800030f6:	30 15       	mov	r5,1
800030f8:	0a 9b       	mov	r11,r5
800030fa:	0e 9c       	mov	r12,r7
800030fc:	f0 1f 00 4d 	mcall	80003230 <udd_interrupt+0x614>
80003100:	2f 07       	sub	r7,-16

static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80003102:	0c 37       	cp.w	r7,r6
80003104:	cf a1       	brne	800030f8 <udd_interrupt+0x4dc>
		// Abort all jobs on-going
#if (0!=USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
80003106:	f0 1f 00 4c 	mcall	80003234 <udd_interrupt+0x618>
		// Reset endpoint control
		udd_reset_ep_ctrl();
8000310a:	f0 1f 00 4c 	mcall	80003238 <udd_interrupt+0x61c>
		// Reset endpoint control management
		udd_ctrl_init();
8000310e:	f0 1f 00 3f 	mcall	80003208 <udd_interrupt+0x5ec>
		goto udd_interrupt_end;
80003112:	c6 38       	rjmp	800031d8 <udd_interrupt+0x5bc>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80003114:	fe 68 00 00 	mov	r8,-131072
80003118:	70 48       	ld.w	r8,r8[0x10]
8000311a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000311e:	c1 b0       	breq	80003154 <udd_interrupt+0x538>
80003120:	fe 68 00 00 	mov	r8,-131072
80003124:	70 18       	ld.w	r8,r8[0x4]
80003126:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000312a:	c1 50       	breq	80003154 <udd_interrupt+0x538>
		otg_unfreeze_clock();
8000312c:	fe 68 00 00 	mov	r8,-131072
80003130:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003134:	af c9       	cbr	r9,0xe
80003136:	f1 49 08 00 	st.w	r8[2048],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
8000313a:	30 19       	mov	r9,1
8000313c:	91 59       	st.w	r8[0x14],r9
		udd_enable_wake_up_interrupt();
8000313e:	31 09       	mov	r9,16
80003140:	91 69       	st.w	r8[0x18],r9
		otg_freeze_clock();	// Mandatory to exit of sleep mode after a wakeup event
80003142:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003146:	af a9       	sbr	r9,0xe
80003148:	f1 49 08 00 	st.w	r8[2048],r9
		udd_sleep_mode(false);	// Enter in SUSPEND mode
8000314c:	30 0c       	mov	r12,0
8000314e:	f0 1f 00 3c 	mcall	8000323c <udd_interrupt+0x620>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
80003152:	c4 38       	rjmp	800031d8 <udd_interrupt+0x5bc>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80003154:	fe 68 00 00 	mov	r8,-131072
80003158:	70 48       	ld.w	r8,r8[0x10]
8000315a:	e2 18 00 10 	andl	r8,0x10,COH
8000315e:	c2 10       	breq	800031a0 <udd_interrupt+0x584>
80003160:	fe 68 00 00 	mov	r8,-131072
80003164:	70 18       	ld.w	r8,r8[0x4]
80003166:	e2 18 00 10 	andl	r8,0x10,COH
8000316a:	c1 b0       	breq	800031a0 <udd_interrupt+0x584>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
8000316c:	fe 68 00 00 	mov	r8,-131072
80003170:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003174:	af c9       	cbr	r9,0xe
80003176:	f1 49 08 00 	st.w	r8[2048],r9
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
8000317a:	c0 58       	rjmp	80003184 <udd_interrupt+0x568>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
8000317c:	70 19       	ld.w	r9,r8[0x4]
8000317e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003182:	c0 61       	brne	8000318e <udd_interrupt+0x572>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80003184:	f0 f9 08 04 	ld.w	r9,r8[2052]
80003188:	e2 19 40 00 	andl	r9,0x4000,COH
8000318c:	cf 80       	breq	8000317c <udd_interrupt+0x560>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
8000318e:	fe 68 00 00 	mov	r8,-131072
80003192:	31 09       	mov	r9,16
80003194:	91 59       	st.w	r8[0x14],r9
		udd_enable_suspend_interrupt();
80003196:	30 1c       	mov	r12,1
80003198:	91 6c       	st.w	r8[0x18],r12
		udd_sleep_mode(true);	// Enter in IDLE mode
8000319a:	f0 1f 00 29 	mcall	8000323c <udd_interrupt+0x620>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
8000319e:	c1 d8       	rjmp	800031d8 <udd_interrupt+0x5bc>
	}

	if (Is_udd_vbus_transition()) {
800031a0:	fe 68 00 00 	mov	r8,-131072
800031a4:	f0 f8 08 04 	ld.w	r8,r8[2052]
800031a8:	e2 18 00 02 	andl	r8,0x2,COH
800031ac:	c1 60       	breq	800031d8 <udd_interrupt+0x5bc>
		// Ack VBus transition and send status to high level
		otg_unfreeze_clock();
800031ae:	fe 68 00 00 	mov	r8,-131072
800031b2:	f0 f9 08 00 	ld.w	r9,r8[2048]
800031b6:	af c9       	cbr	r9,0xe
800031b8:	f1 49 08 00 	st.w	r8[2048],r9
		udd_ack_vbus_transition();
800031bc:	30 29       	mov	r9,2
800031be:	f1 49 08 08 	st.w	r8[2056],r9
		otg_freeze_clock();
800031c2:	f0 f9 08 00 	ld.w	r9,r8[2048]
800031c6:	af a9       	sbr	r9,0xe
800031c8:	f1 49 08 00 	st.w	r8[2048],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_udd_vbus_high());
800031cc:	f0 fc 08 04 	ld.w	r12,r8[2052]
800031d0:	f9 dc c1 61 	bfextu	r12,r12,0xb,0x1
800031d4:	f0 1f 00 1b 	mcall	80003240 <udd_interrupt+0x624>
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
800031d8:	fe 68 00 00 	mov	r8,-131072
800031dc:	f0 f8 08 18 	ld.w	r8,r8[2072]
	return;
}
800031e0:	e3 cd 40 fc 	ldm	sp++,r2-r7,lr
800031e4:	d6 03       	rete
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
800031e6:	48 f9       	lddpc	r9,80003220 <udd_interrupt+0x604>
800031e8:	b2 08       	st.h	r9[0x0],r8
800031ea:	fe 9f fe 40 	bral	80002e6a <udd_interrupt+0x24e>
	if (udd_ep_interrupt())
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
800031ee:	fe 68 00 00 	mov	r8,-131072
800031f2:	70 18       	ld.w	r8,r8[0x4]
800031f4:	e2 18 00 08 	andl	r8,0x8,COH
800031f8:	c8 e0       	breq	80003114 <udd_interrupt+0x4f8>
800031fa:	c7 8b       	rjmp	800030ea <udd_interrupt+0x4ce>
800031fc:	80 00       	ld.sh	r0,r0[0x0]
800031fe:	37 c0       	mov	r0,124
80003200:	00 00       	add	r0,r0
80003202:	07 5c       	ld.sh	r12,--r3
80003204:	80 00       	ld.sh	r0,r0[0x0]
80003206:	25 40       	sub	r0,84
80003208:	80 00       	ld.sh	r0,r0[0x0]
8000320a:	27 80       	sub	r0,120
8000320c:	80 00       	ld.sh	r0,r0[0x0]
8000320e:	25 28       	sub	r8,82
80003210:	00 00       	add	r0,r0
80003212:	0a 10       	sub	r0,r5
80003214:	80 00       	ld.sh	r0,r0[0x0]
80003216:	3a 40       	mov	r0,-92
80003218:	00 00       	add	r0,r0
8000321a:	07 60       	ld.uh	r0,--r3
8000321c:	00 00       	add	r0,r0
8000321e:	07 24       	ld.uh	r4,r3++
80003220:	00 00       	add	r0,r0
80003222:	07 5a       	ld.sh	r10,--r3
80003224:	80 00       	ld.sh	r0,r0[0x0]
80003226:	27 e0       	sub	r0,126
80003228:	80 00       	ld.sh	r0,r0[0x0]
8000322a:	27 b4       	sub	r4,123
8000322c:	00 00       	add	r0,r0
8000322e:	07 28       	ld.uh	r8,r3++
80003230:	80 00       	ld.sh	r0,r0[0x0]
80003232:	25 54       	sub	r4,85
80003234:	80 00       	ld.sh	r0,r0[0x0]
80003236:	39 e0       	mov	r0,-98
80003238:	80 00       	ld.sh	r0,r0[0x0]
8000323a:	2a 3e       	sub	lr,-93
8000323c:	80 00       	ld.sh	r0,r0[0x0]
8000323e:	27 0c       	sub	r12,112
80003240:	80 00       	ld.sh	r0,r0[0x0]
80003242:	3f 40       	mov	r0,-12

80003244 <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003244:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003248:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000324a:	fe 78 0c 00 	mov	r8,-62464
8000324e:	71 59       	ld.w	r9,r8[0x54]
80003250:	e2 19 00 40 	andl	r9,0x40,COH
80003254:	cf d0       	breq	8000324e <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80003256:	a3 6c       	lsl	r12,0x2
80003258:	e0 2c f3 f8 	sub	r12,62456
8000325c:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
8000325e:	30 19       	mov	r9,1
80003260:	f2 0b 09 4b 	lsl	r11,r9,r11
80003264:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80003266:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003268:	e3 ba 00 00 	mtsr	0x0,r10

	cpu_irq_restore(flags);
}
8000326c:	5e fc       	retal	r12
8000326e:	d7 03       	nop

80003270 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80003270:	eb cd 40 e0 	pushm	r5-r7,lr
80003274:	18 96       	mov	r6,r12
80003276:	58 9c       	cp.w	r12,9
80003278:	5f 07       	sreq	r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000327a:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
8000327e:	d3 03       	ssrf	0x10
		pbus_id = 1;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_bus_refcount[pbus_id])
80003280:	48 f8       	lddpc	r8,800032bc <sysclk_enable_pbb_module+0x4c>
80003282:	f0 07 07 09 	ld.ub	r9,r8[r7]
80003286:	30 08       	mov	r8,0
80003288:	f0 09 18 00 	cp.b	r9,r8
8000328c:	c0 a1       	brne	800032a0 <sysclk_enable_pbb_module+0x30>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000328e:	ee 0b 15 01 	lsl	r11,r7,0x1
80003292:	f9 bb 01 06 	movne	r11,6
80003296:	f9 bb 00 02 	moveq	r11,2
8000329a:	30 1c       	mov	r12,1
8000329c:	f0 1f 00 09 	mcall	800032c0 <sysclk_enable_pbb_module+0x50>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
	sysclk_bus_refcount[pbus_id]++;
800032a0:	48 78       	lddpc	r8,800032bc <sysclk_enable_pbb_module+0x4c>
800032a2:	f0 07 07 09 	ld.ub	r9,r8[r7]
800032a6:	2f f9       	sub	r9,-1
800032a8:	f0 07 0b 09 	st.b	r8[r7],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800032ac:	e3 b5 00 00 	mtsr	0x0,r5

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
800032b0:	0c 9b       	mov	r11,r6
800032b2:	30 3c       	mov	r12,3
800032b4:	f0 1f 00 03 	mcall	800032c0 <sysclk_enable_pbb_module+0x50>
}
800032b8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800032bc:	00 00       	add	r0,r0
800032be:	07 64       	ld.uh	r4,--r3
800032c0:	80 00       	ld.sh	r0,r0[0x0]
800032c2:	32 44       	mov	r4,36

800032c4 <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
800032c4:	d4 01       	pushm	lr
	struct genclk_config gcfg;

	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
800032c6:	30 1c       	mov	r12,1
800032c8:	f0 1f 00 0f 	mcall	80003304 <sysclk_enable_usb+0x40>
800032cc:	30 3b       	mov	r11,3
800032ce:	30 1c       	mov	r12,1
800032d0:	f0 1f 00 0e 	mcall	80003308 <sysclk_enable_usb+0x44>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032d4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032d8:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800032da:	fe 78 0c 00 	mov	r8,-62464
800032de:	e0 6a 03 07 	mov	r10,775
800032e2:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800032e4:	70 0a       	ld.w	r10,r8[0x0]
800032e6:	a3 aa       	sbr	r10,0x2
800032e8:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800032ea:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
800032ee:	71 59       	ld.w	r9,r8[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800032f0:	e2 19 00 80 	andl	r9,0x80,COH
800032f4:	cf d0       	breq	800032ee <sysclk_enable_usb+0x2a>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
800032f6:	30 49       	mov	r9,4
800032f8:	fe 78 0c 00 	mov	r8,-62464
800032fc:	f1 49 00 70 	st.w	r8[112],r9
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
	genclk_enable(&gcfg, AVR32_PM_GCLK_USBB);
}
80003300:	d8 02       	popm	pc
80003302:	00 00       	add	r0,r0
80003304:	80 00       	ld.sh	r0,r0[0x0]
80003306:	32 70       	mov	r0,39
80003308:	80 00       	ld.sh	r0,r0[0x0]
8000330a:	32 44       	mov	r4,36

8000330c <udi_cdc_data_disable>:
	UDI_CDC_DISABLE_EXT();
}

void udi_cdc_data_disable(void)
{
}
8000330c:	5e fc       	retal	r12
8000330e:	d7 03       	nop

80003310 <udi_cdc_comm_setup>:


bool udi_cdc_comm_setup(void)
{
	if (Udd_setup_is_in()) {
80003310:	49 e8       	lddpc	r8,80003388 <udi_cdc_comm_setup+0x78>
80003312:	11 88       	ld.ub	r8,r8[0x0]
80003314:	30 09       	mov	r9,0
80003316:	f2 08 18 00 	cp.b	r8,r9
8000331a:	c1 84       	brge	8000334a <udi_cdc_comm_setup+0x3a>
		// GET Interface Requests 
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000331c:	e2 18 00 60 	andl	r8,0x60,COH
80003320:	e0 48 00 20 	cp.w	r8,32
80003324:	c3 11       	brne	80003386 <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
80003326:	49 98       	lddpc	r8,80003388 <udi_cdc_comm_setup+0x78>
80003328:	11 99       	ld.ub	r9,r8[0x1]
8000332a:	32 18       	mov	r8,33
8000332c:	f0 09 18 00 	cp.b	r9,r8
80003330:	c2 b1       	brne	80003386 <udi_cdc_comm_setup+0x76>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80003332:	49 68       	lddpc	r8,80003388 <udi_cdc_comm_setup+0x78>
80003334:	90 39       	ld.sh	r9,r8[0x6]
80003336:	30 78       	mov	r8,7
80003338:	f0 09 19 00 	cp.h	r9,r8
8000333c:	c2 51       	brne	80003386 <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.payload =
8000333e:	49 38       	lddpc	r8,80003388 <udi_cdc_comm_setup+0x78>
80003340:	49 39       	lddpc	r9,8000338c <udi_cdc_comm_setup+0x7c>
80003342:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003344:	30 79       	mov	r9,7
80003346:	b0 69       	st.h	r8[0xc],r9
80003348:	5e ff       	retal	1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests  
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000334a:	e2 18 00 60 	andl	r8,0x60,COH
8000334e:	e0 48 00 20 	cp.w	r8,32
80003352:	c1 a1       	brne	80003386 <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
80003354:	48 d8       	lddpc	r8,80003388 <udi_cdc_comm_setup+0x78>
80003356:	11 98       	ld.ub	r8,r8[0x1]
80003358:	32 09       	mov	r9,32
8000335a:	f2 08 18 00 	cp.b	r8,r9
8000335e:	c0 60       	breq	8000336a <udi_cdc_comm_setup+0x5a>
80003360:	32 29       	mov	r9,34
80003362:	f2 08 18 00 	cp.b	r8,r9
80003366:	c1 01       	brne	80003386 <udi_cdc_comm_setup+0x76>
80003368:	5e ff       	retal	1
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000336a:	48 88       	lddpc	r8,80003388 <udi_cdc_comm_setup+0x78>
8000336c:	90 39       	ld.sh	r9,r8[0x6]
8000336e:	30 78       	mov	r8,7
80003370:	f0 09 19 00 	cp.h	r9,r8
80003374:	c0 91       	brne	80003386 <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.callback =
80003376:	48 58       	lddpc	r8,80003388 <udi_cdc_comm_setup+0x78>
80003378:	48 69       	lddpc	r9,80003390 <udi_cdc_comm_setup+0x80>
8000337a:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
8000337c:	48 49       	lddpc	r9,8000338c <udi_cdc_comm_setup+0x7c>
8000337e:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003380:	30 79       	mov	r9,7
80003382:	b0 69       	st.h	r8[0xc],r9
80003384:	5e ff       	retal	1
						sizeof(udi_cdc_line_coding);
				return true;
80003386:	5e fd       	retal	0
80003388:	00 00       	add	r0,r0
8000338a:	0a 10       	sub	r0,r5
8000338c:	00 00       	add	r0,r0
8000338e:	07 68       	ld.uh	r8,--r3
80003390:	80 00       	ld.sh	r0,r0[0x0]
80003392:	33 98       	mov	r8,57

80003394 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
80003394:	5e fd       	retal	0

80003396 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
80003396:	5e fd       	retal	0

80003398 <udi_cdc_line_coding_received>:

void udi_cdc_line_coding_received(void)
{
	// Send line coding to component associated to CDC
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));
}
80003398:	5e fc       	retal	r12
8000339a:	d7 03       	nop

8000339c <udi_cdc_is_rx_ready>:
}


bool udi_cdc_is_rx_ready(void)
{
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
8000339c:	48 68       	lddpc	r8,800033b4 <udi_cdc_is_rx_ready+0x18>
8000339e:	11 8a       	ld.ub	r10,r8[0x0]
800033a0:	48 68       	lddpc	r8,800033b8 <udi_cdc_is_rx_ready+0x1c>
800033a2:	90 08       	ld.sh	r8,r8[0x0]
800033a4:	48 69       	lddpc	r9,800033bc <udi_cdc_is_rx_ready+0x20>
800033a6:	f2 0a 04 19 	ld.sh	r9,r9[r10<<0x1]
800033aa:	f0 09 19 00 	cp.h	r9,r8
}
800033ae:	5f bc       	srhi	r12
800033b0:	5e fc       	retal	r12
800033b2:	00 00       	add	r0,r0
800033b4:	00 00       	add	r0,r0
800033b6:	07 fc       	ld.ub	r12,r3[0x7]
800033b8:	00 00       	add	r0,r0
800033ba:	07 f8       	ld.ub	r8,r3[0x7]
800033bc:	00 00       	add	r0,r0
800033be:	07 f4       	ld.ub	r4,r3[0x7]

800033c0 <udi_cdc_is_tx_ready>:


bool udi_cdc_is_tx_ready(void)
{
	irqflags_t flags;
	if (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS) {
800033c0:	49 58       	lddpc	r8,80003414 <udi_cdc_is_tx_ready+0x54>
800033c2:	11 89       	ld.ub	r9,r8[0x0]
800033c4:	49 58       	lddpc	r8,80003418 <udi_cdc_is_tx_ready+0x58>
800033c6:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800033ca:	34 08       	mov	r8,64
800033cc:	f0 09 19 00 	cp.h	r9,r8
800033d0:	c0 20       	breq	800033d4 <udi_cdc_is_tx_ready+0x14>
800033d2:	5e ff       	retal	1
		return true;
	}
	if (!udi_cdc_tx_both_buf_to_send) {
800033d4:	49 28       	lddpc	r8,8000341c <udi_cdc_is_tx_ready+0x5c>
800033d6:	11 88       	ld.ub	r8,r8[0x0]
800033d8:	58 08       	cp.w	r8,0
800033da:	c1 21       	brne	800033fe <udi_cdc_is_tx_ready+0x3e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800033dc:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800033e0:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
		if (!udi_cdc_tx_trans_ongoing) {
800033e2:	49 09       	lddpc	r9,80003420 <udi_cdc_is_tx_ready+0x60>
800033e4:	13 89       	ld.ub	r9,r9[0x0]
800033e6:	58 09       	cp.w	r9,0
800033e8:	c0 91       	brne	800033fa <udi_cdc_is_tx_ready+0x3a>
			// No transfer on-going
			// then use the other buffer to store data
			udi_cdc_tx_both_buf_to_send = true;
800033ea:	30 1a       	mov	r10,1
800033ec:	48 c9       	lddpc	r9,8000341c <udi_cdc_is_tx_ready+0x5c>
800033ee:	b2 8a       	st.b	r9[0x0],r10
			udi_cdc_tx_buf_sel = (udi_cdc_tx_buf_sel==0)?1:0;
800033f0:	48 99       	lddpc	r9,80003414 <udi_cdc_is_tx_ready+0x54>
800033f2:	13 8a       	ld.ub	r10,r9[0x0]
800033f4:	58 0a       	cp.w	r10,0
800033f6:	5f 0a       	sreq	r10
800033f8:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800033fa:	e3 b8 00 00 	mtsr	0x0,r8
		}
	  	cpu_irq_restore(flags);
	}
	return (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS);
800033fe:	48 68       	lddpc	r8,80003414 <udi_cdc_is_tx_ready+0x54>
80003400:	11 89       	ld.ub	r9,r8[0x0]
80003402:	48 68       	lddpc	r8,80003418 <udi_cdc_is_tx_ready+0x58>
80003404:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80003408:	34 08       	mov	r8,64
8000340a:	f0 09 19 00 	cp.h	r9,r8
8000340e:	5f 1c       	srne	r12
}
80003410:	5e fc       	retal	r12
80003412:	00 00       	add	r0,r0
80003414:	00 00       	add	r0,r0
80003416:	07 6f       	ld.uh	pc,--r3
80003418:	00 00       	add	r0,r0
8000341a:	07 70       	ld.ub	r0,--r3
8000341c:	00 00       	add	r0,r0
8000341e:	08 81       	andn	r1,r4
80003420:	00 00       	add	r0,r0
80003422:	07 fe       	ld.ub	lr,r3[0x7]

80003424 <udi_cdc_putc>:


int udi_cdc_putc(int value)
{
80003424:	eb cd 40 fe 	pushm	r1-r7,lr
80003428:	18 97       	mov	r7,r12
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
8000342a:	49 88       	lddpc	r8,80003488 <udi_cdc_putc+0x64>
8000342c:	11 e9       	ld.ub	r9,r8[0x6]
8000342e:	30 98       	mov	r8,9
80003430:	f0 09 18 00 	cp.b	r9,r8
80003434:	5f 04       	sreq	r4

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
		if (!udi_cdc_running) {
80003436:	49 66       	lddpc	r6,8000348c <udi_cdc_putc+0x68>
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003438:	49 63       	lddpc	r3,80003490 <udi_cdc_putc+0x6c>
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
8000343a:	49 75       	lddpc	r5,80003494 <udi_cdc_putc+0x70>
8000343c:	49 72       	lddpc	r2,80003498 <udi_cdc_putc+0x74>
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
8000343e:	30 01       	mov	r1,0

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
80003440:	f0 1f 00 17 	mcall	8000349c <udi_cdc_putc+0x78>
80003444:	c0 51       	brne	8000344e <udi_cdc_putc+0x2a>
		if (!udi_cdc_running) {
80003446:	0d 88       	ld.ub	r8,r6[0x0]
80003448:	58 08       	cp.w	r8,0
8000344a:	cf b1       	brne	80003440 <udi_cdc_putc+0x1c>
8000344c:	c1 b8       	rjmp	80003482 <udi_cdc_putc+0x5e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000344e:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003452:	d3 03       	ssrf	0x10
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003454:	07 88       	ld.ub	r8,r3[0x0]
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003456:	ea 08 04 19 	ld.sh	r9,r5[r8<<0x1]
8000345a:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
8000345e:	f0 0c 15 06 	lsl	r12,r8,0x6
80003462:	f8 0b 00 0b 	add	r11,r12,r11
80003466:	e4 0b 0b 07 	st.b	r2[r11],r7
8000346a:	2f f9       	sub	r9,-1
8000346c:	ea 08 0a 19 	st.h	r5[r8<<0x1],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003470:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);

	if (b_databit_9) {
80003474:	58 04       	cp.w	r4,0
80003476:	c0 31       	brne	8000347c <udi_cdc_putc+0x58>
80003478:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
8000347c:	a9 47       	asr	r7,0x8
8000347e:	02 94       	mov	r4,r1
80003480:	ce 0b       	rjmp	80003440 <udi_cdc_putc+0x1c>
		goto udi_cdc_putc_process_one_byte;
80003482:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80003486:	00 00       	add	r0,r0
80003488:	00 00       	add	r0,r0
8000348a:	07 68       	ld.uh	r8,--r3
8000348c:	00 00       	add	r0,r0
8000348e:	07 fd       	ld.ub	sp,r3[0x7]
80003490:	00 00       	add	r0,r0
80003492:	07 6f       	ld.uh	pc,--r3
80003494:	00 00       	add	r0,r0
80003496:	07 70       	ld.ub	r0,--r3
80003498:	00 00       	add	r0,r0
8000349a:	07 74       	ld.ub	r4,--r3
8000349c:	80 00       	ld.sh	r0,r0[0x0]
8000349e:	33 c0       	mov	r0,60

800034a0 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(void)
{
800034a0:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800034a4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800034a8:	d3 03       	ssrf	0x10
	irqflags_t flags;
	uint8_t buf_sel_trans;

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel;
800034aa:	49 78       	lddpc	r8,80003504 <udi_cdc_rx_start+0x64>
800034ac:	11 87       	ld.ub	r7,r8[0x0]
	if (udi_cdc_rx_trans_ongoing ||
800034ae:	49 78       	lddpc	r8,80003508 <udi_cdc_rx_start+0x68>
800034b0:	11 88       	ld.ub	r8,r8[0x0]
800034b2:	58 08       	cp.w	r8,0
800034b4:	c0 a1       	brne	800034c8 <udi_cdc_rx_start+0x28>
		(udi_cdc_rx_pos < udi_cdc_rx_buf_nb[buf_sel_trans])) {
800034b6:	49 68       	lddpc	r8,8000350c <udi_cdc_rx_start+0x6c>
800034b8:	90 08       	ld.sh	r8,r8[0x0]
800034ba:	49 6a       	lddpc	r10,80003510 <udi_cdc_rx_start+0x70>
800034bc:	f4 07 04 1a 	ld.sh	r10,r10[r7<<0x1]
800034c0:	f0 0a 19 00 	cp.h	r10,r8
800034c4:	e0 88 00 06 	brls	800034d0 <udi_cdc_rx_start+0x30>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034c8:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
800034cc:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos = 0;
800034d0:	30 0a       	mov	r10,0
800034d2:	48 f8       	lddpc	r8,8000350c <udi_cdc_rx_start+0x6c>
800034d4:	b0 0a       	st.h	r8[0x0],r10
	udi_cdc_rx_buf_sel = (buf_sel_trans==0)?1:0;
800034d6:	58 07       	cp.w	r7,0
800034d8:	5f 0a       	sreq	r10
800034da:	48 b8       	lddpc	r8,80003504 <udi_cdc_rx_start+0x64>
800034dc:	b0 8a       	st.b	r8[0x0],r10

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing = true;
800034de:	30 1a       	mov	r10,1
800034e0:	48 a8       	lddpc	r8,80003508 <udi_cdc_rx_start+0x68>
800034e2:	b0 8a       	st.b	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034e4:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
	
	if (udi_cdc_is_rx_ready()) {
800034e8:	f0 1f 00 0b 	mcall	80003514 <udi_cdc_rx_start+0x74>
		UDI_CDC_RX_NOTIFY();
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUT,
800034ec:	a7 67       	lsl	r7,0x6
800034ee:	48 b8       	lddpc	r8,80003518 <udi_cdc_rx_start+0x78>
800034f0:	34 09       	mov	r9,64
800034f2:	48 ba       	lddpc	r10,8000351c <udi_cdc_rx_start+0x7c>
800034f4:	0e 0a       	add	r10,r7
800034f6:	30 1b       	mov	r11,1
800034f8:	30 2c       	mov	r12,2
800034fa:	f0 1f 00 0a 	mcall	80003520 <udi_cdc_rx_start+0x80>
					true,
					udi_cdc_rx_buf[buf_sel_trans],
					UDI_CDC_RX_BUFFERS,
					udi_cdc_data_recevied);
}
800034fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80003502:	00 00       	add	r0,r0
80003504:	00 00       	add	r0,r0
80003506:	07 fc       	ld.ub	r12,r3[0x7]
80003508:	00 00       	add	r0,r0
8000350a:	08 80       	andn	r0,r4
8000350c:	00 00       	add	r0,r0
8000350e:	07 f8       	ld.ub	r8,r3[0x7]
80003510:	00 00       	add	r0,r0
80003512:	07 f4       	ld.ub	r4,r3[0x7]
80003514:	80 00       	ld.sh	r0,r0[0x0]
80003516:	33 9c       	mov	r12,57
80003518:	80 00       	ld.sh	r0,r0[0x0]
8000351a:	35 a0       	mov	r0,90
8000351c:	00 00       	add	r0,r0
8000351e:	08 00       	add	r0,r4
80003520:	80 00       	ld.sh	r0,r0[0x0]
80003522:	25 c4       	sub	r4,92

80003524 <udi_cdc_getc>:
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
}


int udi_cdc_getc(void)
{
80003524:	d4 31       	pushm	r0-r7,lr
	int rx_data = 0;
	bool b_databit_9;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
80003526:	49 88       	lddpc	r8,80003584 <udi_cdc_getc+0x60>
80003528:	11 e9       	ld.ub	r9,r8[0x6]
8000352a:	30 98       	mov	r8,9
8000352c:	f0 09 18 00 	cp.b	r9,r8
80003530:	5f 02       	sreq	r2
80003532:	30 03       	mov	r3,0

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003534:	49 56       	lddpc	r6,80003588 <udi_cdc_getc+0x64>
80003536:	49 67       	lddpc	r7,8000358c <udi_cdc_getc+0x68>
80003538:	49 65       	lddpc	r5,80003590 <udi_cdc_getc+0x6c>
		if (!udi_cdc_running) {
8000353a:	49 74       	lddpc	r4,80003594 <udi_cdc_getc+0x70>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
8000353c:	49 71       	lddpc	r1,80003598 <udi_cdc_getc+0x74>
	udi_cdc_rx_start();

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
8000353e:	06 90       	mov	r0,r3
80003540:	c0 48       	rjmp	80003548 <udi_cdc_getc+0x24>
	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
		if (!udi_cdc_running) {
80003542:	09 88       	ld.ub	r8,r4[0x0]
80003544:	58 08       	cp.w	r8,0
80003546:	c1 b0       	breq	8000357c <udi_cdc_getc+0x58>

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003548:	0d 89       	ld.ub	r9,r6[0x0]
8000354a:	8e 08       	ld.sh	r8,r7[0x0]
8000354c:	ea 09 04 19 	ld.sh	r9,r5[r9<<0x1]
80003550:	f0 09 19 00 	cp.h	r9,r8
80003554:	fe 98 ff f7 	brls	80003542 <udi_cdc_getc+0x1e>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
80003558:	0d 88       	ld.ub	r8,r6[0x0]
8000355a:	8e 09       	ld.sh	r9,r7[0x0]
8000355c:	5c 79       	castu.h	r9
8000355e:	a7 68       	lsl	r8,0x6
80003560:	12 08       	add	r8,r9
80003562:	e2 08 07 08 	ld.ub	r8,r1[r8]
80003566:	10 43       	or	r3,r8
	udi_cdc_rx_pos++;
80003568:	8e 08       	ld.sh	r8,r7[0x0]
8000356a:	2f f8       	sub	r8,-1
8000356c:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start();
8000356e:	f0 1f 00 0c 	mcall	8000359c <udi_cdc_getc+0x78>

	if (b_databit_9) {
80003572:	58 02       	cp.w	r2,0
80003574:	c0 50       	breq	8000357e <udi_cdc_getc+0x5a>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
80003576:	a9 63       	lsl	r3,0x8
80003578:	00 92       	mov	r2,r0
8000357a:	ce 7b       	rjmp	80003548 <udi_cdc_getc+0x24>
		goto udi_cdc_getc_process_one_byte;
8000357c:	30 03       	mov	r3,0
	}
	return rx_data;
}
8000357e:	06 9c       	mov	r12,r3
80003580:	d8 32       	popm	r0-r7,pc
80003582:	00 00       	add	r0,r0
80003584:	00 00       	add	r0,r0
80003586:	07 68       	ld.uh	r8,--r3
80003588:	00 00       	add	r0,r0
8000358a:	07 fc       	ld.ub	r12,r3[0x7]
8000358c:	00 00       	add	r0,r0
8000358e:	07 f8       	ld.ub	r8,r3[0x7]
80003590:	00 00       	add	r0,r0
80003592:	07 f4       	ld.ub	r4,r3[0x7]
80003594:	00 00       	add	r0,r0
80003596:	07 fd       	ld.ub	sp,r3[0x7]
80003598:	00 00       	add	r0,r0
8000359a:	08 00       	add	r0,r4
8000359c:	80 00       	ld.sh	r0,r0[0x0]
8000359e:	34 a0       	mov	r0,74

800035a0 <udi_cdc_data_recevied>:
					udi_cdc_data_recevied);
}


void udi_cdc_data_recevied(udd_ep_status_t status, iram_size_t n)
{
800035a0:	d4 01       	pushm	lr
	uint8_t buf_sel_trans;

	if (UDD_EP_TRANSFER_OK != status) {
800035a2:	58 0c       	cp.w	r12,0
800035a4:	c1 01       	brne	800035c4 <udi_cdc_data_recevied+0x24>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel==0)?1:0;
800035a6:	48 98       	lddpc	r8,800035c8 <udi_cdc_data_recevied+0x28>
800035a8:	11 88       	ld.ub	r8,r8[0x0]
	udi_cdc_rx_buf_nb[buf_sel_trans] = n;
800035aa:	58 08       	cp.w	r8,0
800035ac:	f9 b8 01 00 	movne	r8,0
800035b0:	f9 b8 00 02 	moveq	r8,2
800035b4:	48 69       	lddpc	r9,800035cc <udi_cdc_data_recevied+0x2c>
800035b6:	f2 08 0a 0b 	st.h	r9[r8],r11
	udi_cdc_rx_trans_ongoing = false;
800035ba:	30 09       	mov	r9,0
800035bc:	48 58       	lddpc	r8,800035d0 <udi_cdc_data_recevied+0x30>
800035be:	b0 89       	st.b	r8[0x0],r9
	udi_cdc_rx_start();
800035c0:	f0 1f 00 05 	mcall	800035d4 <udi_cdc_data_recevied+0x34>
800035c4:	d8 02       	popm	pc
800035c6:	00 00       	add	r0,r0
800035c8:	00 00       	add	r0,r0
800035ca:	07 fc       	ld.ub	r12,r3[0x7]
800035cc:	00 00       	add	r0,r0
800035ce:	07 f4       	ld.ub	r4,r3[0x7]
800035d0:	00 00       	add	r0,r0
800035d2:	08 80       	andn	r0,r4
800035d4:	80 00       	ld.sh	r0,r0[0x0]
800035d6:	34 a0       	mov	r0,74

800035d8 <udi_cdc_tx_send>:
	udi_cdc_tx_send();
}


static void udi_cdc_tx_send(void)
{
800035d8:	eb cd 40 e0 	pushm	r5-r7,lr
	irqflags_t flags;
	uint8_t buf_sel_trans;
	bool b_short_packet;

	if (udi_cdc_tx_trans_ongoing) {
800035dc:	4a a8       	lddpc	r8,80003684 <udi_cdc_tx_send+0xac>
800035de:	11 88       	ld.ub	r8,r8[0x0]
800035e0:	58 08       	cp.w	r8,0
800035e2:	c4 f1       	brne	80003680 <udi_cdc_tx_send+0xa8>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
800035e4:	f0 1f 00 29 	mcall	80003688 <udi_cdc_tx_send+0xb0>
800035e8:	c0 a0       	breq	800035fc <udi_cdc_tx_send+0x24>
		if (udi_cdc_tx_sof_num == udd_get_micro_frame_number()) {
800035ea:	f0 1f 00 29 	mcall	8000368c <udi_cdc_tx_send+0xb4>
800035ee:	4a 98       	lddpc	r8,80003690 <udi_cdc_tx_send+0xb8>
800035f0:	90 08       	ld.sh	r8,r8[0x0]
800035f2:	f8 08 19 00 	cp.h	r8,r12
800035f6:	c0 a1       	brne	8000360a <udi_cdc_tx_send+0x32>
800035f8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num == udd_get_frame_number()) {
800035fc:	f0 1f 00 26 	mcall	80003694 <udi_cdc_tx_send+0xbc>
80003600:	4a 48       	lddpc	r8,80003690 <udi_cdc_tx_send+0xb8>
80003602:	90 08       	ld.sh	r8,r8[0x0]
80003604:	f8 08 19 00 	cp.h	r8,r12
80003608:	c3 c0       	breq	80003680 <udi_cdc_tx_send+0xa8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000360a:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000360e:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel;
80003610:	4a 29       	lddpc	r9,80003698 <udi_cdc_tx_send+0xc0>
80003612:	13 87       	ld.ub	r7,r9[0x0]
	if (!udi_cdc_tx_both_buf_to_send) {
80003614:	4a 29       	lddpc	r9,8000369c <udi_cdc_tx_send+0xc4>
80003616:	13 89       	ld.ub	r9,r9[0x0]
80003618:	58 09       	cp.w	r9,0
8000361a:	c0 61       	brne	80003626 <udi_cdc_tx_send+0x4e>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel = (buf_sel_trans==0)?1:0;
8000361c:	58 07       	cp.w	r7,0
8000361e:	5f 0a       	sreq	r10
80003620:	49 e9       	lddpc	r9,80003698 <udi_cdc_tx_send+0xc0>
80003622:	b2 8a       	st.b	r9[0x0],r10
80003624:	c0 38       	rjmp	8000362a <udi_cdc_tx_send+0x52>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
80003626:	58 07       	cp.w	r7,0
80003628:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing = true;
8000362a:	30 1a       	mov	r10,1
8000362c:	49 69       	lddpc	r9,80003684 <udi_cdc_tx_send+0xac>
8000362e:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003630:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[buf_sel_trans] != UDI_CDC_TX_BUFFERS);
80003634:	0e 95       	mov	r5,r7
80003636:	49 b8       	lddpc	r8,800036a0 <udi_cdc_tx_send+0xc8>
80003638:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
8000363c:	34 08       	mov	r8,64
8000363e:	f0 09 19 00 	cp.h	r9,r8
80003642:	5f 16       	srne	r6
	if (b_short_packet) {
80003644:	58 06       	cp.w	r6,0
80003646:	c0 e0       	breq	80003662 <udi_cdc_tx_send+0x8a>
		if (udd_is_high_speed()) {
80003648:	f0 1f 00 10 	mcall	80003688 <udi_cdc_tx_send+0xb0>
8000364c:	c0 60       	breq	80003658 <udi_cdc_tx_send+0x80>
			udi_cdc_tx_sof_num = udd_get_micro_frame_number();
8000364e:	f0 1f 00 10 	mcall	8000368c <udi_cdc_tx_send+0xb4>
80003652:	49 08       	lddpc	r8,80003690 <udi_cdc_tx_send+0xb8>
80003654:	b0 0c       	st.h	r8[0x0],r12
80003656:	c0 98       	rjmp	80003668 <udi_cdc_tx_send+0x90>
		}else{
			udi_cdc_tx_sof_num = udd_get_frame_number();
80003658:	f0 1f 00 0f 	mcall	80003694 <udi_cdc_tx_send+0xbc>
8000365c:	48 d8       	lddpc	r8,80003690 <udi_cdc_tx_send+0xb8>
8000365e:	b0 0c       	st.h	r8[0x0],r12
80003660:	c0 48       	rjmp	80003668 <udi_cdc_tx_send+0x90>
		}
	}else{
		udi_cdc_tx_sof_num = 0; // Force next transfer without wait SOF
80003662:	30 09       	mov	r9,0
80003664:	48 b8       	lddpc	r8,80003690 <udi_cdc_tx_send+0xb8>
80003666:	b0 09       	st.h	r8[0x0],r9
	}

	// Send the buffer with enable of short packet
	udd_ep_run( UDI_CDC_DATA_EP_IN,
80003668:	a7 67       	lsl	r7,0x6
8000366a:	48 f8       	lddpc	r8,800036a4 <udi_cdc_tx_send+0xcc>
8000366c:	48 d9       	lddpc	r9,800036a0 <udi_cdc_tx_send+0xc8>
8000366e:	f2 05 05 19 	ld.uh	r9,r9[r5<<0x1]
80003672:	48 ea       	lddpc	r10,800036a8 <udi_cdc_tx_send+0xd0>
80003674:	0e 0a       	add	r10,r7
80003676:	0c 9b       	mov	r11,r6
80003678:	e0 6c 00 81 	mov	r12,129
8000367c:	f0 1f 00 0c 	mcall	800036ac <udi_cdc_tx_send+0xd4>
80003680:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003684:	00 00       	add	r0,r0
80003686:	07 fe       	ld.ub	lr,r3[0x7]
80003688:	80 00       	ld.sh	r0,r0[0x0]
8000368a:	23 ce       	sub	lr,60
8000368c:	80 00       	ld.sh	r0,r0[0x0]
8000368e:	24 0a       	sub	r10,64
80003690:	00 00       	add	r0,r0
80003692:	07 fa       	ld.ub	r10,r3[0x7]
80003694:	80 00       	ld.sh	r0,r0[0x0]
80003696:	23 fe       	sub	lr,63
80003698:	00 00       	add	r0,r0
8000369a:	07 6f       	ld.uh	pc,--r3
8000369c:	00 00       	add	r0,r0
8000369e:	08 81       	andn	r1,r4
800036a0:	00 00       	add	r0,r0
800036a2:	07 70       	ld.ub	r0,--r3
800036a4:	80 00       	ld.sh	r0,r0[0x0]
800036a6:	36 b0       	mov	r0,107
800036a8:	00 00       	add	r0,r0
800036aa:	07 74       	ld.ub	r4,--r3
800036ac:	80 00       	ld.sh	r0,r0[0x0]
800036ae:	25 c4       	sub	r4,92

800036b0 <udi_cdc_data_sent>:
	udi_cdc_rx_start();
}


void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n)
{
800036b0:	d4 01       	pushm	lr
	if (UDD_EP_TRANSFER_OK != status) {
800036b2:	58 0c       	cp.w	r12,0
800036b4:	c1 21       	brne	800036d8 <udi_cdc_data_sent+0x28>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[(udi_cdc_tx_buf_sel==0)?1:0] = 0;
800036b6:	48 a8       	lddpc	r8,800036dc <udi_cdc_data_sent+0x2c>
800036b8:	11 88       	ld.ub	r8,r8[0x0]
800036ba:	58 08       	cp.w	r8,0
800036bc:	f9 b9 01 00 	movne	r9,0
800036c0:	f9 b9 00 02 	moveq	r9,2
800036c4:	30 08       	mov	r8,0
800036c6:	48 7a       	lddpc	r10,800036e0 <udi_cdc_data_sent+0x30>
800036c8:	f4 09 0a 08 	st.h	r10[r9],r8
	udi_cdc_tx_both_buf_to_send = false;
800036cc:	48 69       	lddpc	r9,800036e4 <udi_cdc_data_sent+0x34>
800036ce:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_trans_ongoing = false;
800036d0:	48 69       	lddpc	r9,800036e8 <udi_cdc_data_sent+0x38>
800036d2:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_send();
800036d4:	f0 1f 00 06 	mcall	800036ec <udi_cdc_data_sent+0x3c>
800036d8:	d8 02       	popm	pc
800036da:	00 00       	add	r0,r0
800036dc:	00 00       	add	r0,r0
800036de:	07 6f       	ld.uh	pc,--r3
800036e0:	00 00       	add	r0,r0
800036e2:	07 70       	ld.ub	r0,--r3
800036e4:	00 00       	add	r0,r0
800036e6:	08 81       	andn	r1,r4
800036e8:	00 00       	add	r0,r0
800036ea:	07 fe       	ld.ub	lr,r3[0x7]
800036ec:	80 00       	ld.sh	r0,r0[0x0]
800036ee:	35 d8       	mov	r8,93

800036f0 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
800036f0:	d4 01       	pushm	lr
	udi_cdc_tx_send();
800036f2:	f0 1f 00 02 	mcall	800036f8 <udi_cdc_data_sof_notify+0x8>
}
800036f6:	d8 02       	popm	pc
800036f8:	80 00       	ld.sh	r0,r0[0x0]
800036fa:	35 d8       	mov	r8,93

800036fc <udi_cdc_data_enable>:
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
}

bool udi_cdc_data_enable(void)
{
800036fc:	eb cd 40 c0 	pushm	r6-r7,lr
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
80003700:	30 06       	mov	r6,0
80003702:	48 f8       	lddpc	r8,8000373c <udi_cdc_data_enable+0x40>
80003704:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_both_buf_to_send = false;
80003706:	48 f8       	lddpc	r8,80003740 <udi_cdc_data_enable+0x44>
80003708:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_sel = 0;
8000370a:	48 f8       	lddpc	r8,80003744 <udi_cdc_data_enable+0x48>
8000370c:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_nb[0] = 0;
8000370e:	48 f8       	lddpc	r8,80003748 <udi_cdc_data_enable+0x4c>
80003710:	30 07       	mov	r7,0
80003712:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_buf_nb[1] = 0;
80003714:	b0 17       	st.h	r8[0x2],r7
	udi_cdc_tx_sof_num = 0;
80003716:	48 e8       	lddpc	r8,8000374c <udi_cdc_data_enable+0x50>
80003718:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_send();
8000371a:	f0 1f 00 0e 	mcall	80003750 <udi_cdc_data_enable+0x54>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing = false;
8000371e:	48 e8       	lddpc	r8,80003754 <udi_cdc_data_enable+0x58>
80003720:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_sel = 0;
80003722:	48 e8       	lddpc	r8,80003758 <udi_cdc_data_enable+0x5c>
80003724:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_nb[0] = 0;
80003726:	48 e8       	lddpc	r8,8000375c <udi_cdc_data_enable+0x60>
80003728:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_rx_pos = 0;
8000372a:	48 e8       	lddpc	r8,80003760 <udi_cdc_data_enable+0x64>
8000372c:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_running = udi_cdc_rx_start();
8000372e:	f0 1f 00 0e 	mcall	80003764 <udi_cdc_data_enable+0x68>
80003732:	48 e8       	lddpc	r8,80003768 <udi_cdc_data_enable+0x6c>
80003734:	b0 8c       	st.b	r8[0x0],r12
	return udi_cdc_running;
80003736:	11 8c       	ld.ub	r12,r8[0x0]
}
80003738:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000373c:	00 00       	add	r0,r0
8000373e:	07 fe       	ld.ub	lr,r3[0x7]
80003740:	00 00       	add	r0,r0
80003742:	08 81       	andn	r1,r4
80003744:	00 00       	add	r0,r0
80003746:	07 6f       	ld.uh	pc,--r3
80003748:	00 00       	add	r0,r0
8000374a:	07 70       	ld.ub	r0,--r3
8000374c:	00 00       	add	r0,r0
8000374e:	07 fa       	ld.ub	r10,r3[0x7]
80003750:	80 00       	ld.sh	r0,r0[0x0]
80003752:	35 d8       	mov	r8,93
80003754:	00 00       	add	r0,r0
80003756:	08 80       	andn	r0,r4
80003758:	00 00       	add	r0,r0
8000375a:	07 fc       	ld.ub	r12,r3[0x7]
8000375c:	00 00       	add	r0,r0
8000375e:	07 f4       	ld.ub	r4,r3[0x7]
80003760:	00 00       	add	r0,r0
80003762:	07 f8       	ld.ub	r8,r3[0x7]
80003764:	80 00       	ld.sh	r0,r0[0x0]
80003766:	34 a0       	mov	r0,74
80003768:	00 00       	add	r0,r0
8000376a:	07 fd       	ld.ub	sp,r3[0x7]

8000376c <udi_cdc_comm_disable>:


void udi_cdc_comm_disable(void)
{
8000376c:	d4 01       	pushm	lr
	udi_cdc_running = false;
8000376e:	30 09       	mov	r9,0
80003770:	48 38       	lddpc	r8,8000377c <udi_cdc_comm_disable+0x10>
80003772:	b0 89       	st.b	r8[0x0],r9
	UDI_CDC_DISABLE_EXT();
80003774:	f0 1f 00 03 	mcall	80003780 <udi_cdc_comm_disable+0x14>
}
80003778:	d8 02       	popm	pc
8000377a:	00 00       	add	r0,r0
8000377c:	00 00       	add	r0,r0
8000377e:	07 fd       	ld.ub	sp,r3[0x7]
80003780:	80 00       	ld.sh	r0,r0[0x0]
80003782:	3f 34       	mov	r4,-13

80003784 <udi_cdc_comm_enable>:

//@}


bool udi_cdc_comm_enable(void)
{
80003784:	d4 01       	pushm	lr
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
80003786:	30 0a       	mov	r10,0
80003788:	48 a8       	lddpc	r8,800037b0 <udi_cdc_comm_enable+0x2c>
8000378a:	b0 0a       	st.h	r8[0x0],r10
	uid_cdc_state_msg.value = CPU_TO_LE16(0);
8000378c:	48 a8       	lddpc	r8,800037b4 <udi_cdc_comm_enable+0x30>
8000378e:	b0 4a       	st.h	r8[0x8],r10

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
80003790:	48 a8       	lddpc	r8,800037b8 <udi_cdc_comm_enable+0x34>
80003792:	30 09       	mov	r9,0
80003794:	b0 8a       	st.b	r8[0x0],r10
80003796:	3c 2a       	mov	r10,-62
80003798:	b0 9a       	st.b	r8[0x1],r10
8000379a:	30 1a       	mov	r10,1
8000379c:	b0 aa       	st.b	r8[0x2],r10
8000379e:	b0 b9       	st.b	r8[0x3],r9
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
800037a0:	b0 c9       	st.b	r8[0x4],r9
	udi_cdc_line_coding.bParityType = UDI_CDC_DEFAULT_PARITY;
800037a2:	b0 d9       	st.b	r8[0x5],r9
	udi_cdc_line_coding.bDataBits = UDI_CDC_DEFAULT_DATABITS;
800037a4:	30 89       	mov	r9,8
800037a6:	b0 e9       	st.b	r8[0x6],r9
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));

	// Call application callback
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
800037a8:	f0 1f 00 05 	mcall	800037bc <udi_cdc_comm_enable+0x38>
}
800037ac:	d8 02       	popm	pc
800037ae:	00 00       	add	r0,r0
800037b0:	00 00       	add	r0,r0
800037b2:	08 82       	andn	r2,r4
800037b4:	00 00       	add	r0,r0
800037b6:	00 44       	or	r4,r0
800037b8:	00 00       	add	r0,r0
800037ba:	07 68       	ld.uh	r8,--r3
800037bc:	80 00       	ld.sh	r0,r0[0x0]
800037be:	3f 28       	mov	r8,-14

800037c0 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
800037c0:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800037c4:	49 18       	lddpc	r8,80003808 <udc_sof_notify+0x48>
800037c6:	11 89       	ld.ub	r9,r8[0x0]
800037c8:	30 08       	mov	r8,0
800037ca:	f0 09 18 00 	cp.b	r9,r8
800037ce:	c1 b0       	breq	80003804 <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037d0:	48 f8       	lddpc	r8,8000380c <udc_sof_notify+0x4c>
800037d2:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800037d4:	70 09       	ld.w	r9,r8[0x0]
800037d6:	13 ca       	ld.ub	r10,r9[0x4]
800037d8:	30 09       	mov	r9,0
800037da:	f2 0a 18 00 	cp.b	r10,r9
800037de:	c1 30       	breq	80003804 <udc_sof_notify+0x44>
800037e0:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037e2:	48 b6       	lddpc	r6,8000380c <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
800037e4:	70 18       	ld.w	r8,r8[0x4]
800037e6:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800037ea:	70 48       	ld.w	r8,r8[0x10]
800037ec:	58 08       	cp.w	r8,0
800037ee:	c0 20       	breq	800037f2 <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
800037f0:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800037f2:	2f f7       	sub	r7,-1
800037f4:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037f6:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800037f8:	70 09       	ld.w	r9,r8[0x0]
800037fa:	13 c9       	ld.ub	r9,r9[0x4]
800037fc:	ee 09 18 00 	cp.b	r9,r7
80003800:	fe 9b ff f2 	brhi	800037e4 <udc_sof_notify+0x24>
80003804:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003808:	00 00       	add	r0,r0
8000380a:	08 8e       	andn	lr,r4
8000380c:	00 00       	add	r0,r0
8000380e:	08 88       	andn	r8,r4

80003810 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80003810:	48 78       	lddpc	r8,8000382c <udc_get_eof_conf+0x1c>
80003812:	70 08       	ld.w	r8,r8[0x0]
80003814:	70 08       	ld.w	r8,r8[0x0]
80003816:	11 aa       	ld.ub	r10,r8[0x2]
80003818:	11 b9       	ld.ub	r9,r8[0x3]
8000381a:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000381e:	5c c9       	swap.bh	r9
80003820:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
80003824:	f0 0c 00 0c 	add	r12,r8,r12
80003828:	5e fc       	retal	r12
8000382a:	00 00       	add	r0,r0
8000382c:	00 00       	add	r0,r0
8000382e:	08 88       	andn	r8,r4

80003830 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80003830:	eb cd 40 e0 	pushm	r5-r7,lr
80003834:	18 97       	mov	r7,r12
80003836:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration)
80003838:	49 b8       	lddpc	r8,800038a4 <udc_update_iface_desc+0x74>
8000383a:	11 89       	ld.ub	r9,r8[0x0]
8000383c:	30 08       	mov	r8,0
8000383e:	f0 09 18 00 	cp.b	r9,r8
80003842:	c2 f0       	breq	800038a0 <udc_update_iface_desc+0x70>
		return false;

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003844:	49 98       	lddpc	r8,800038a8 <udc_update_iface_desc+0x78>
80003846:	70 08       	ld.w	r8,r8[0x0]
80003848:	70 08       	ld.w	r8,r8[0x0]
8000384a:	11 c9       	ld.ub	r9,r8[0x4]
8000384c:	18 9e       	mov	lr,r12
8000384e:	f8 09 18 00 	cp.b	r9,r12
80003852:	e0 88 00 27 	brls	800038a0 <udc_update_iface_desc+0x70>
		return false;

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80003856:	49 65       	lddpc	r5,800038ac <udc_update_iface_desc+0x7c>
80003858:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
8000385a:	f0 1f 00 16 	mcall	800038b0 <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
8000385e:	6a 08       	ld.w	r8,r5[0x0]
80003860:	10 3c       	cp.w	r12,r8
80003862:	e0 88 00 1f 	brls	800038a0 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003866:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003868:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000386a:	11 9a       	ld.ub	r10,r8[0x1]
8000386c:	f6 0a 18 00 	cp.b	r10,r11
80003870:	c0 a1       	brne	80003884 <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber)
80003872:	11 aa       	ld.ub	r10,r8[0x2]
80003874:	0e 9e       	mov	lr,r7
80003876:	ee 0a 18 00 	cp.b	r10,r7
8000387a:	c0 51       	brne	80003884 <udc_update_iface_desc+0x54>
					&& (setting_num ==
							udc_ptr_iface->
8000387c:	11 ba       	ld.ub	r10,r8[0x3]
8000387e:	ec 0a 18 00 	cp.b	r10,r6
80003882:	c0 b0       	breq	80003898 <udc_update_iface_desc+0x68>
							bAlternateSetting))
				return true;	// Interface found
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) ((uint8_t
80003884:	13 88       	ld.ub	r8,r9[0x0]
80003886:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000388a:	10 3c       	cp.w	r12,r8
8000388c:	fe 9b ff ee 	brhi	80003868 <udc_update_iface_desc+0x38>
80003890:	48 79       	lddpc	r9,800038ac <udc_update_iface_desc+0x7c>
80003892:	93 08       	st.w	r9[0x0],r8
80003894:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003898:	48 59       	lddpc	r9,800038ac <udc_update_iface_desc+0x7c>
8000389a:	93 08       	st.w	r9[0x0],r8
8000389c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800038a0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800038a4:	00 00       	add	r0,r0
800038a6:	08 8e       	andn	lr,r4
800038a8:	00 00       	add	r0,r0
800038aa:	08 88       	andn	r8,r4
800038ac:	00 00       	add	r0,r0
800038ae:	08 94       	mov	r4,r4
800038b0:	80 00       	ld.sh	r0,r0[0x0]
800038b2:	38 10       	mov	r0,-127

800038b4 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
800038b4:	eb cd 40 c0 	pushm	r6-r7,lr
800038b8:	18 96       	mov	r6,r12
800038ba:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
800038bc:	f0 1f 00 11 	mcall	80003900 <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800038c0:	0d 88       	ld.ub	r8,r6[0x0]
800038c2:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800038c4:	0c 3c       	cp.w	r12,r6
800038c6:	e0 88 00 19 	brls	800038f8 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038ca:	0d 98       	ld.ub	r8,r6[0x1]
800038cc:	30 49       	mov	r9,4
800038ce:	f2 08 18 00 	cp.b	r8,r9
800038d2:	c1 30       	breq	800038f8 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038d4:	ee 08 18 00 	cp.b	r8,r7
800038d8:	c0 a1       	brne	800038ec <udc_next_desc_in_iface+0x38>
800038da:	c1 08       	rjmp	800038fa <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038dc:	0d 98       	ld.ub	r8,r6[0x1]
800038de:	f2 08 18 00 	cp.b	r8,r9
800038e2:	c0 b0       	breq	800038f8 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038e4:	ee 08 18 00 	cp.b	r8,r7
800038e8:	c0 31       	brne	800038ee <udc_next_desc_in_iface+0x3a>
800038ea:	c0 88       	rjmp	800038fa <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038ec:	30 49       	mov	r9,4
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800038ee:	0d 88       	ld.ub	r8,r6[0x0]
800038f0:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800038f2:	0c 3c       	cp.w	r12,r6
800038f4:	fe 9b ff f4 	brhi	800038dc <udc_next_desc_in_iface+0x28>
800038f8:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL;	// No specific descriptor found
}
800038fa:	0c 9c       	mov	r12,r6
800038fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003900:	80 00       	ld.sh	r0,r0[0x0]
80003902:	38 10       	mov	r0,-127

80003904 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
80003904:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
80003906:	48 48       	lddpc	r8,80003914 <udc_valid_address+0x10>
80003908:	11 bc       	ld.ub	r12,r8[0x3]
8000390a:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8000390e:	f0 1f 00 03 	mcall	80003918 <udc_valid_address+0x14>
}
80003912:	d8 02       	popm	pc
80003914:	00 00       	add	r0,r0
80003916:	0a 10       	sub	r0,r5
80003918:	80 00       	ld.sh	r0,r0[0x0]
8000391a:	23 d0       	sub	r0,61

8000391c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
8000391c:	eb cd 40 e0 	pushm	r5-r7,lr
80003920:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num))
80003922:	f0 1f 00 12 	mcall	80003968 <udc_iface_enable+0x4c>
80003926:	c1 f0       	breq	80003964 <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003928:	49 18       	lddpc	r8,8000396c <udc_iface_enable+0x50>
8000392a:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000392c:	30 56       	mov	r6,5
8000392e:	0c 9b       	mov	r11,r6
80003930:	0e 9c       	mov	r12,r7
80003932:	f0 1f 00 10 	mcall	80003970 <udc_iface_enable+0x54>
80003936:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80003938:	c0 d0       	breq	80003952 <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
						ep_desc->bmAttributes,
						le16_to_cpu
8000393a:	19 ca       	ld.ub	r10,r12[0x4]
8000393c:	19 d8       	ld.ub	r8,r12[0x5]
8000393e:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
80003942:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80003944:	5c 7a       	castu.h	r10
80003946:	19 bb       	ld.ub	r11,r12[0x3]
80003948:	19 ac       	ld.ub	r12,r12[0x2]
8000394a:	f0 1f 00 0b 	mcall	80003974 <udc_iface_enable+0x58>
8000394e:	cf 01       	brne	8000392e <udc_iface_enable+0x12>
80003950:	c0 a8       	rjmp	80003964 <udc_iface_enable+0x48>
						(ep_desc->wMaxPacketSize)))
			return false;
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80003952:	48 a8       	lddpc	r8,80003978 <udc_iface_enable+0x5c>
80003954:	70 08       	ld.w	r8,r8[0x0]
80003956:	70 18       	ld.w	r8,r8[0x4]
80003958:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
8000395c:	70 0c       	ld.w	r12,r8[0x0]
8000395e:	5d 1c       	icall	r12
80003960:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003964:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003968:	80 00       	ld.sh	r0,r0[0x0]
8000396a:	38 30       	mov	r0,-125
8000396c:	00 00       	add	r0,r0
8000396e:	08 94       	mov	r4,r4
80003970:	80 00       	ld.sh	r0,r0[0x0]
80003972:	38 b4       	mov	r4,-117
80003974:	80 00       	ld.sh	r0,r0[0x0]
80003976:	29 1c       	sub	r12,-111
80003978:	00 00       	add	r0,r0
8000397a:	08 88       	andn	r8,r4

8000397c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
8000397c:	eb cd 40 e0 	pushm	r5-r7,lr
80003980:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003982:	18 97       	mov	r7,r12
80003984:	30 0b       	mov	r11,0
80003986:	f0 1f 00 12 	mcall	800039cc <udc_iface_disable+0x50>
8000398a:	c1 e0       	breq	800039c6 <udc_iface_disable+0x4a>
		return false;

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000398c:	49 18       	lddpc	r8,800039d0 <udc_iface_disable+0x54>
8000398e:	70 08       	ld.w	r8,r8[0x0]
80003990:	70 18       	ld.w	r8,r8[0x4]
80003992:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003996:	6a 3c       	ld.w	r12,r5[0xc]
80003998:	5d 1c       	icall	r12
8000399a:	18 9b       	mov	r11,r12
8000399c:	0c 9c       	mov	r12,r6
8000399e:	f0 1f 00 0c 	mcall	800039cc <udc_iface_disable+0x50>
800039a2:	c1 20       	breq	800039c6 <udc_iface_disable+0x4a>
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800039a4:	48 c8       	lddpc	r8,800039d4 <udc_iface_disable+0x58>
800039a6:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800039a8:	30 56       	mov	r6,5
800039aa:	0c 9b       	mov	r11,r6
800039ac:	0e 9c       	mov	r12,r7
800039ae:	f0 1f 00 0b 	mcall	800039d8 <udc_iface_disable+0x5c>
800039b2:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
							usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc)
800039b4:	c0 50       	breq	800039be <udc_iface_disable+0x42>
				break;
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
800039b6:	19 ac       	ld.ub	r12,r12[0x2]
800039b8:	f0 1f 00 09 	mcall	800039dc <udc_iface_disable+0x60>
		}
800039bc:	cf 7b       	rjmp	800039aa <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
800039be:	6a 18       	ld.w	r8,r5[0x4]
800039c0:	5d 18       	icall	r8
800039c2:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
800039c6:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800039ca:	00 00       	add	r0,r0
800039cc:	80 00       	ld.sh	r0,r0[0x0]
800039ce:	38 30       	mov	r0,-125
800039d0:	00 00       	add	r0,r0
800039d2:	08 88       	andn	r8,r4
800039d4:	00 00       	add	r0,r0
800039d6:	08 94       	mov	r4,r4
800039d8:	80 00       	ld.sh	r0,r0[0x0]
800039da:	38 b4       	mov	r4,-117
800039dc:	80 00       	ld.sh	r0,r0[0x0]
800039de:	25 94       	sub	r4,89

800039e0 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device, 
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
800039e0:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800039e4:	49 38       	lddpc	r8,80003a30 <udc_reset+0x50>
800039e6:	11 89       	ld.ub	r9,r8[0x0]
800039e8:	30 08       	mov	r8,0
800039ea:	f0 09 18 00 	cp.b	r9,r8
800039ee:	c1 70       	breq	80003a1c <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800039f0:	49 18       	lddpc	r8,80003a34 <udc_reset+0x54>
800039f2:	70 08       	ld.w	r8,r8[0x0]
800039f4:	70 08       	ld.w	r8,r8[0x0]
800039f6:	11 c9       	ld.ub	r9,r8[0x4]
800039f8:	30 08       	mov	r8,0
800039fa:	f0 09 18 00 	cp.b	r9,r8
800039fe:	c0 f0       	breq	80003a1c <udc_reset+0x3c>
80003a00:	30 07       	mov	r7,0
80003a02:	48 d6       	lddpc	r6,80003a34 <udc_reset+0x54>
				iface_num++) {
			udc_iface_disable(iface_num);
80003a04:	0e 9c       	mov	r12,r7
80003a06:	f0 1f 00 0d 	mcall	80003a38 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80003a0a:	2f f7       	sub	r7,-1
80003a0c:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003a0e:	6c 08       	ld.w	r8,r6[0x0]
80003a10:	70 08       	ld.w	r8,r8[0x0]
80003a12:	11 c8       	ld.ub	r8,r8[0x4]
80003a14:	ee 08 18 00 	cp.b	r8,r7
80003a18:	fe 9b ff f6 	brhi	80003a04 <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80003a1c:	30 09       	mov	r9,0
80003a1e:	48 58       	lddpc	r8,80003a30 <udc_reset+0x50>
80003a20:	b0 89       	st.b	r8[0x0],r9
	if (0 != (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status)) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80003a22:	e0 69 01 00 	mov	r9,256
80003a26:	48 68       	lddpc	r8,80003a3c <udc_reset+0x5c>
80003a28:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80003a2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003a2e:	00 00       	add	r0,r0
80003a30:	00 00       	add	r0,r0
80003a32:	08 8e       	andn	lr,r4
80003a34:	00 00       	add	r0,r0
80003a36:	08 88       	andn	r8,r4
80003a38:	80 00       	ld.sh	r0,r0[0x0]
80003a3a:	39 7c       	mov	r12,-105
80003a3c:	00 00       	add	r0,r0
80003a3e:	08 8c       	andn	r12,r4

80003a40 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80003a40:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80003a44:	fe f8 04 3c 	ld.w	r8,pc[1084]
80003a48:	30 09       	mov	r9,0
80003a4a:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80003a4c:	30 0a       	mov	r10,0
80003a4e:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80003a50:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
80003a52:	11 88       	ld.ub	r8,r8[0x0]
80003a54:	10 9a       	mov	r10,r8
80003a56:	f2 08 18 00 	cp.b	r8,r9
80003a5a:	c0 94       	brge	80003a6c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0)
80003a5c:	fe f9 04 24 	ld.w	r9,pc[1060]
80003a60:	92 3b       	ld.sh	r11,r9[0x6]
80003a62:	30 09       	mov	r9,0
80003a64:	f2 0b 19 00 	cp.h	r11,r9
80003a68:	e0 80 02 0a 	breq	80003e7c <udc_process_setup+0x43c>
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80003a6c:	10 99       	mov	r9,r8
80003a6e:	e2 19 00 60 	andl	r9,0x60,COH
80003a72:	e0 81 01 d9 	brne	80003e24 <udc_process_setup+0x3e4>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80003a76:	f2 0a 18 00 	cp.b	r10,r9
80003a7a:	e0 84 01 01 	brge	80003c7c <udc_process_setup+0x23c>
		// GET Standard Requests 
		if (udd_g_ctrlreq.req.wLength == 0)
80003a7e:	fe f9 04 02 	ld.w	r9,pc[1026]
80003a82:	92 39       	ld.sh	r9,r9[0x6]
80003a84:	58 09       	cp.w	r9,0
80003a86:	e0 80 01 cf 	breq	80003e24 <udc_process_setup+0x3e4>
			return false;	// Error for USB host

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003a8a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a8e:	e0 81 00 9e 	brne	80003bca <udc_process_setup+0x18a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003a92:	fe fa 03 ee 	ld.w	r10,pc[1006]
80003a96:	15 9a       	ld.ub	r10,r10[0x1]
80003a98:	30 6b       	mov	r11,6
80003a9a:	f6 0a 18 00 	cp.b	r10,r11
80003a9e:	c1 a0       	breq	80003ad2 <udc_process_setup+0x92>
80003aa0:	30 8b       	mov	r11,8
80003aa2:	f6 0a 18 00 	cp.b	r10,r11
80003aa6:	e0 80 00 85 	breq	80003bb0 <udc_process_setup+0x170>
80003aaa:	30 0b       	mov	r11,0
80003aac:	f6 0a 18 00 	cp.b	r10,r11
80003ab0:	e0 81 00 8d 	brne	80003bca <udc_process_setup+0x18a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status))
80003ab4:	30 28       	mov	r8,2
80003ab6:	f0 09 19 00 	cp.h	r9,r8
80003aba:	c0 40       	breq	80003ac2 <udc_process_setup+0x82>
80003abc:	30 0c       	mov	r12,0
80003abe:	e0 8f 01 af 	bral	80003e1c <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(
80003ac2:	30 2b       	mov	r11,2
80003ac4:	fe fc 03 c0 	ld.w	r12,pc[960]
80003ac8:	f0 1f 00 f0 	mcall	80003e88 <udc_process_setup+0x448>
80003acc:	30 1c       	mov	r12,1
80003ace:	e0 8f 01 a7 	bral	80003e1c <udc_process_setup+0x3dc>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003ad2:	fe f8 03 ae 	ld.w	r8,pc[942]
80003ad6:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80003ad8:	f2 08 16 08 	lsr	r8,r9,0x8
80003adc:	30 2a       	mov	r10,2
80003ade:	f4 08 18 00 	cp.b	r8,r10
80003ae2:	c1 00       	breq	80003b02 <udc_process_setup+0xc2>
80003ae4:	30 3a       	mov	r10,3
80003ae6:	f4 08 18 00 	cp.b	r8,r10
80003aea:	c2 a0       	breq	80003b3e <udc_process_setup+0xfe>
80003aec:	30 19       	mov	r9,1
80003aee:	f2 08 18 00 	cp.b	r8,r9
80003af2:	c5 d1       	brne	80003bac <udc_process_setup+0x16c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80003af4:	fe f8 03 98 	ld.w	r8,pc[920]
80003af8:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80003afa:	19 8b       	ld.ub	r11,r12[0x0]
80003afc:	f0 1f 00 e3 	mcall	80003e88 <udc_process_setup+0x448>
80003b00:	c4 78       	rjmp	80003b8e <udc_process_setup+0x14e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003b02:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80003b04:	fe f8 03 88 	ld.w	r8,pc[904]
80003b08:	70 08       	ld.w	r8,r8[0x0]
80003b0a:	f1 38 00 11 	ld.ub	r8,r8[17]
80003b0e:	f2 08 18 00 	cp.b	r8,r9
80003b12:	e0 88 00 4d 	brls	80003bac <udc_process_setup+0x16c>
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80003b16:	fe f8 03 76 	ld.w	r8,pc[886]
80003b1a:	70 18       	ld.w	r8,r8[0x4]
80003b1c:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80003b20:	19 a9       	ld.ub	r9,r12[0x2]
80003b22:	19 b8       	ld.ub	r8,r12[0x3]
80003b24:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003b28:	5c c8       	swap.bh	r8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
80003b2a:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80003b2e:	f0 1f 00 d7 	mcall	80003e88 <udc_process_setup+0x448>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80003b32:	fe f8 03 4e 	ld.w	r8,pc[846]
80003b36:	70 28       	ld.w	r8,r8[0x8]
80003b38:	30 29       	mov	r9,2
80003b3a:	b0 99       	st.b	r8[0x1],r9
80003b3c:	c2 98       	rjmp	80003b8e <udc_process_setup+0x14e>
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80003b3e:	5c 59       	castu.b	r9
80003b40:	58 19       	cp.w	r9,1
80003b42:	c1 00       	breq	80003b62 <udc_process_setup+0x122>
80003b44:	58 29       	cp.w	r9,2
80003b46:	c0 40       	breq	80003b4e <udc_process_setup+0x10e>
80003b48:	58 09       	cp.w	r9,0
80003b4a:	c0 60       	breq	80003b56 <udc_process_setup+0x116>
80003b4c:	c3 08       	rjmp	80003bac <udc_process_setup+0x16c>
80003b4e:	fe fc 03 42 	ld.w	r12,pc[834]
80003b52:	30 3b       	mov	r11,3
80003b54:	c0 a8       	rjmp	80003b68 <udc_process_setup+0x128>
	case 0:
		udd_set_setup_payload(
80003b56:	30 4b       	mov	r11,4
80003b58:	fe fc 03 3c 	ld.w	r12,pc[828]
80003b5c:	f0 1f 00 cb 	mcall	80003e88 <udc_process_setup+0x448>
80003b60:	c1 78       	rjmp	80003b8e <udc_process_setup+0x14e>
80003b62:	fe fc 03 36 	ld.w	r12,pc[822]
80003b66:	30 9b       	mov	r11,9
80003b68:	fe fa 03 34 	ld.w	r10,pc[820]
80003b6c:	2f ea       	sub	r10,-2
80003b6e:	18 98       	mov	r8,r12
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80003b70:	11 39       	ld.ub	r9,r8++
80003b72:	5c c9       	swap.bh	r9
80003b74:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
80003b76:	f0 0c 01 09 	sub	r9,r8,r12
80003b7a:	f6 09 18 00 	cp.b	r9,r11
80003b7e:	cf 93       	brcs	80003b70 <udc_process_setup+0x130>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
80003b80:	a1 7b       	lsl	r11,0x1
80003b82:	2f eb       	sub	r11,-2
80003b84:	fe fc 03 18 	ld.w	r12,pc[792]
80003b88:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
80003b8a:	f0 1f 00 c0 	mcall	80003e88 <udc_process_setup+0x448>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size)
80003b8e:	fe f8 02 f2 	ld.w	r8,pc[754]
80003b92:	90 39       	ld.sh	r9,r8[0x6]
80003b94:	90 68       	ld.sh	r8,r8[0xc]
80003b96:	f2 08 19 00 	cp.h	r8,r9
80003b9a:	e0 8b 00 04 	brhi	80003ba2 <udc_process_setup+0x162>
80003b9e:	30 1c       	mov	r12,1
80003ba0:	c3 e9       	rjmp	80003e1c <udc_process_setup+0x3dc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
80003ba2:	fe f8 02 de 	ld.w	r8,pc[734]
80003ba6:	b0 69       	st.h	r8[0xc],r9
80003ba8:	30 1c       	mov	r12,1
80003baa:	c3 99       	rjmp	80003e1c <udc_process_setup+0x3dc>
80003bac:	30 0c       	mov	r12,0
80003bae:	c3 79       	rjmp	80003e1c <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1)
80003bb0:	30 18       	mov	r8,1
80003bb2:	f0 09 19 00 	cp.h	r9,r8
80003bb6:	c0 30       	breq	80003bbc <udc_process_setup+0x17c>
80003bb8:	30 0c       	mov	r12,0
80003bba:	c3 19       	rjmp	80003e1c <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(&udc_num_configuration,1);
80003bbc:	30 1b       	mov	r11,1
80003bbe:	fe fc 02 e2 	ld.w	r12,pc[738]
80003bc2:	f0 1f 00 b2 	mcall	80003e88 <udc_process_setup+0x448>
80003bc6:	30 1c       	mov	r12,1
80003bc8:	c2 a9       	rjmp	80003e1c <udc_process_setup+0x3dc>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003bca:	58 18       	cp.w	r8,1
80003bcc:	c3 61       	brne	80003c38 <udc_process_setup+0x1f8>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003bce:	fe fa 02 b2 	ld.w	r10,pc[690]
80003bd2:	15 9b       	ld.ub	r11,r10[0x1]
80003bd4:	30 aa       	mov	r10,10
80003bd6:	f4 0b 18 00 	cp.b	r11,r10
80003bda:	c2 f1       	brne	80003c38 <udc_process_setup+0x1f8>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1)
80003bdc:	f0 09 19 00 	cp.h	r9,r8
80003be0:	c2 a1       	brne	80003c34 <udc_process_setup+0x1f4>
		return false;	// Error in request
	if (!udc_num_configuration)
80003be2:	fe f8 02 be 	ld.w	r8,pc[702]
80003be6:	11 89       	ld.ub	r9,r8[0x0]
80003be8:	30 08       	mov	r8,0
80003bea:	f0 09 18 00 	cp.b	r9,r8
80003bee:	c2 30       	breq	80003c34 <udc_process_setup+0x1f4>
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003bf0:	fe f8 02 90 	ld.w	r8,pc[656]
80003bf4:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003bf6:	fe f8 02 ae 	ld.w	r8,pc[686]
80003bfa:	70 08       	ld.w	r8,r8[0x0]
80003bfc:	70 08       	ld.w	r8,r8[0x0]
80003bfe:	11 c8       	ld.ub	r8,r8[0x4]
80003c00:	ee 08 18 00 	cp.b	r8,r7
80003c04:	e0 88 00 18 	brls	80003c34 <udc_process_setup+0x1f4>
		return false;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003c08:	30 0b       	mov	r11,0
80003c0a:	0e 9c       	mov	r12,r7
80003c0c:	f0 1f 00 a7 	mcall	80003ea8 <udc_process_setup+0x468>
80003c10:	c1 20       	breq	80003c34 <udc_process_setup+0x1f4>
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
80003c12:	fe f8 02 92 	ld.w	r8,pc[658]
80003c16:	70 08       	ld.w	r8,r8[0x0]
80003c18:	70 18       	ld.w	r8,r8[0x4]
80003c1a:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80003c1e:	70 3c       	ld.w	r12,r8[0xc]
80003c20:	5d 1c       	icall	r12
80003c22:	fe f8 02 8a 	ld.w	r8,pc[650]
80003c26:	b0 8c       	st.b	r8[0x0],r12
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80003c28:	30 1b       	mov	r11,1
80003c2a:	10 9c       	mov	r12,r8
80003c2c:	f0 1f 00 97 	mcall	80003e88 <udc_process_setup+0x448>
80003c30:	30 1c       	mov	r12,1
80003c32:	cf 58       	rjmp	80003e1c <udc_process_setup+0x3dc>
80003c34:	30 0c       	mov	r12,0
80003c36:	cf 38       	rjmp	80003e1c <udc_process_setup+0x3dc>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003c38:	58 28       	cp.w	r8,2
80003c3a:	e0 81 00 f5 	brne	80003e24 <udc_process_setup+0x3e4>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c3e:	fe f8 02 42 	ld.w	r8,pc[578]
80003c42:	11 9a       	ld.ub	r10,r8[0x1]
80003c44:	30 08       	mov	r8,0
80003c46:	f0 0a 18 00 	cp.b	r10,r8
80003c4a:	e0 81 00 e8 	brne	80003e1a <udc_process_setup+0x3da>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
80003c4e:	30 28       	mov	r8,2
80003c50:	f0 09 19 00 	cp.h	r9,r8
80003c54:	c0 30       	breq	80003c5a <udc_process_setup+0x21a>
80003c56:	30 0c       	mov	r12,0
80003c58:	ce 28       	rjmp	80003e1c <udc_process_setup+0x3dc>
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80003c5a:	fe f8 02 26 	ld.w	r8,pc[550]
80003c5e:	11 dc       	ld.ub	r12,r8[0x5]
80003c60:	f0 1f 00 94 	mcall	80003eb0 <udc_process_setup+0x470>
80003c64:	e0 68 01 00 	mov	r8,256
80003c68:	f9 b8 00 00 	moveq	r8,0
80003c6c:	fe fc 02 48 	ld.w	r12,pc[584]
80003c70:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload(
80003c72:	30 2b       	mov	r11,2
80003c74:	f0 1f 00 85 	mcall	80003e88 <udc_process_setup+0x448>
80003c78:	30 1c       	mov	r12,1
80003c7a:	cd 18       	rjmp	80003e1c <udc_process_setup+0x3dc>
			}
		}
#endif
	} else {
		// SET Standard Requests  
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003c7c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003c80:	c7 71       	brne	80003d6e <udc_process_setup+0x32e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c82:	fe f9 01 fe 	ld.w	r9,pc[510]
80003c86:	13 99       	ld.ub	r9,r9[0x1]
80003c88:	30 3a       	mov	r10,3
80003c8a:	f4 09 18 00 	cp.b	r9,r10
80003c8e:	e0 80 00 c6 	breq	80003e1a <udc_process_setup+0x3da>
80003c92:	e0 8b 00 07 	brhi	80003ca0 <udc_process_setup+0x260>
80003c96:	30 1a       	mov	r10,1
80003c98:	f4 09 18 00 	cp.b	r9,r10
80003c9c:	c6 91       	brne	80003d6e <udc_process_setup+0x32e>
80003c9e:	c1 78       	rjmp	80003ccc <udc_process_setup+0x28c>
80003ca0:	30 5a       	mov	r10,5
80003ca2:	f4 09 18 00 	cp.b	r9,r10
80003ca6:	c0 60       	breq	80003cb2 <udc_process_setup+0x272>
80003ca8:	30 9a       	mov	r10,9
80003caa:	f4 09 18 00 	cp.b	r9,r10
80003cae:	c6 01       	brne	80003d6e <udc_process_setup+0x32e>
80003cb0:	c2 28       	rjmp	80003cf4 <udc_process_setup+0x2b4>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003cb2:	4f 48       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003cb4:	90 39       	ld.sh	r9,r8[0x6]
80003cb6:	30 08       	mov	r8,0
80003cb8:	f0 09 19 00 	cp.h	r9,r8
80003cbc:	c0 30       	breq	80003cc2 <udc_process_setup+0x282>
80003cbe:	30 0c       	mov	r12,0
80003cc0:	ca e8       	rjmp	80003e1c <udc_process_setup+0x3dc>
		return false;

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
80003cc2:	4f e9       	lddpc	r9,80003eb8 <udc_process_setup+0x478>
80003cc4:	4e f8       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003cc6:	91 49       	st.w	r8[0x10],r9
80003cc8:	30 1c       	mov	r12,1
80003cca:	ca 98       	rjmp	80003e1c <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003ccc:	4e d8       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003cce:	90 39       	ld.sh	r9,r8[0x6]
80003cd0:	30 08       	mov	r8,0
80003cd2:	f0 09 19 00 	cp.h	r9,r8
80003cd6:	c0 d1       	brne	80003cf0 <udc_process_setup+0x2b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80003cd8:	4e a8       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003cda:	90 19       	ld.sh	r9,r8[0x2]
80003cdc:	30 18       	mov	r8,1
80003cde:	f0 09 19 00 	cp.h	r9,r8
80003ce2:	c0 71       	brne	80003cf0 <udc_process_setup+0x2b0>
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
80003ce4:	4e 88       	lddpc	r8,80003e84 <udc_process_setup+0x444>
80003ce6:	90 09       	ld.sh	r9,r8[0x0]
80003ce8:	a9 d9       	cbr	r9,0x9
80003cea:	b0 09       	st.h	r8[0x0],r9
80003cec:	30 1c       	mov	r12,1
80003cee:	c9 78       	rjmp	80003e1c <udc_process_setup+0x3dc>
80003cf0:	30 0c       	mov	r12,0
80003cf2:	c9 58       	rjmp	80003e1c <udc_process_setup+0x3dc>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength != 0)
80003cf4:	4e 38       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003cf6:	90 39       	ld.sh	r9,r8[0x6]
80003cf8:	30 08       	mov	r8,0
80003cfa:	f0 09 19 00 	cp.h	r9,r8
80003cfe:	c3 41       	brne	80003d66 <udc_process_setup+0x326>
		return false;
	// Authorize configuration only if the address is valid
	if (!udd_getaddress())
80003d00:	f0 1f 00 6f 	mcall	80003ebc <udc_process_setup+0x47c>
80003d04:	c3 10       	breq	80003d66 <udc_process_setup+0x326>
			return false;
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80003d06:	4d f8       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003d08:	11 b9       	ld.ub	r9,r8[0x3]
80003d0a:	4e 18       	lddpc	r8,80003e8c <udc_process_setup+0x44c>
80003d0c:	70 08       	ld.w	r8,r8[0x0]
80003d0e:	f1 38 00 11 	ld.ub	r8,r8[17]
80003d12:	10 39       	cp.w	r9,r8
80003d14:	e0 89 00 29 	brgt	80003d66 <udc_process_setup+0x326>
				udc_config.confdev_lsfs->bNumConfigurations)
			return false;
	}

	// Reset current configuration
	udc_reset();
80003d18:	f0 1f 00 6a 	mcall	80003ec0 <udc_process_setup+0x480>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80003d1c:	4d 98       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003d1e:	11 b8       	ld.ub	r8,r8[0x3]
80003d20:	4e 09       	lddpc	r9,80003ea0 <udc_process_setup+0x460>
80003d22:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
80003d24:	58 08       	cp.w	r8,0
80003d26:	c2 20       	breq	80003d6a <udc_process_setup+0x32a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
80003d28:	20 18       	sub	r8,1
80003d2a:	4d 99       	lddpc	r9,80003e8c <udc_process_setup+0x44c>
80003d2c:	72 19       	ld.w	r9,r9[0x4]
80003d2e:	f2 08 00 38 	add	r8,r9,r8<<0x3
80003d32:	4d d9       	lddpc	r9,80003ea4 <udc_process_setup+0x464>
80003d34:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d36:	70 08       	ld.w	r8,r8[0x0]
80003d38:	11 c9       	ld.ub	r9,r8[0x4]
80003d3a:	30 08       	mov	r8,0
80003d3c:	f0 09 18 00 	cp.b	r9,r8
80003d40:	c1 50       	breq	80003d6a <udc_process_setup+0x32a>
80003d42:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d44:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d46:	4d 86       	lddpc	r6,80003ea4 <udc_process_setup+0x464>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d48:	0a 9b       	mov	r11,r5
80003d4a:	0e 9c       	mov	r12,r7
80003d4c:	f0 1f 00 5e 	mcall	80003ec4 <udc_process_setup+0x484>
80003d50:	c0 b0       	breq	80003d66 <udc_process_setup+0x326>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80003d52:	2f f7       	sub	r7,-1
80003d54:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d56:	6c 08       	ld.w	r8,r6[0x0]
80003d58:	70 08       	ld.w	r8,r8[0x0]
80003d5a:	11 c8       	ld.ub	r8,r8[0x4]
80003d5c:	ee 08 18 00 	cp.b	r8,r7
80003d60:	fe 9b ff f4 	brhi	80003d48 <udc_process_setup+0x308>
80003d64:	c0 38       	rjmp	80003d6a <udc_process_setup+0x32a>
80003d66:	30 0c       	mov	r12,0
80003d68:	c5 a8       	rjmp	80003e1c <udc_process_setup+0x3dc>
80003d6a:	30 1c       	mov	r12,1
80003d6c:	c5 88       	rjmp	80003e1c <udc_process_setup+0x3dc>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003d6e:	58 18       	cp.w	r8,1
80003d70:	c2 21       	brne	80003db4 <udc_process_setup+0x374>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003d72:	4c 49       	lddpc	r9,80003e80 <udc_process_setup+0x440>
80003d74:	13 9a       	ld.ub	r10,r9[0x1]
80003d76:	30 b9       	mov	r9,11
80003d78:	f2 0a 18 00 	cp.b	r10,r9
80003d7c:	c1 c1       	brne	80003db4 <udc_process_setup+0x374>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength != 0)
80003d7e:	4c 18       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003d80:	90 39       	ld.sh	r9,r8[0x6]
80003d82:	30 08       	mov	r8,0
80003d84:	f0 09 19 00 	cp.h	r9,r8
80003d88:	c1 41       	brne	80003db0 <udc_process_setup+0x370>
		return false;	// Error in request
	if (!udc_num_configuration)
80003d8a:	4c 68       	lddpc	r8,80003ea0 <udc_process_setup+0x460>
80003d8c:	11 89       	ld.ub	r9,r8[0x0]
80003d8e:	30 08       	mov	r8,0
80003d90:	f0 09 18 00 	cp.b	r9,r8
80003d94:	c0 e0       	breq	80003db0 <udc_process_setup+0x370>
		return false;	// The device is not is configured state yet


	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
80003d96:	4b b8       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003d98:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num))
80003d9a:	11 d7       	ld.ub	r7,r8[0x5]
80003d9c:	0e 9c       	mov	r12,r7
80003d9e:	f0 1f 00 4b 	mcall	80003ec8 <udc_process_setup+0x488>
80003da2:	c0 70       	breq	80003db0 <udc_process_setup+0x370>
		return false;

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80003da4:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80003da8:	0e 9c       	mov	r12,r7
80003daa:	f0 1f 00 47 	mcall	80003ec4 <udc_process_setup+0x484>
80003dae:	c3 78       	rjmp	80003e1c <udc_process_setup+0x3dc>
80003db0:	30 0c       	mov	r12,0
80003db2:	c3 58       	rjmp	80003e1c <udc_process_setup+0x3dc>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003db4:	58 28       	cp.w	r8,2
80003db6:	c3 71       	brne	80003e24 <udc_process_setup+0x3e4>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003db8:	4b 28       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003dba:	11 98       	ld.ub	r8,r8[0x1]
80003dbc:	30 19       	mov	r9,1
80003dbe:	f2 08 18 00 	cp.b	r8,r9
80003dc2:	c0 60       	breq	80003dce <udc_process_setup+0x38e>
80003dc4:	30 39       	mov	r9,3
80003dc6:	f2 08 18 00 	cp.b	r8,r9
80003dca:	c2 81       	brne	80003e1a <udc_process_setup+0x3da>
80003dcc:	c1 48       	rjmp	80003df4 <udc_process_setup+0x3b4>
 *
 * \return true if success 
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003dce:	4a d8       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003dd0:	90 39       	ld.sh	r9,r8[0x6]
80003dd2:	30 08       	mov	r8,0
80003dd4:	f0 09 19 00 	cp.h	r9,r8
80003dd8:	c0 c1       	brne	80003df0 <udc_process_setup+0x3b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003dda:	4a a8       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003ddc:	90 19       	ld.sh	r9,r8[0x2]
80003dde:	30 08       	mov	r8,0
80003de0:	f0 09 19 00 	cp.h	r9,r8
80003de4:	c0 61       	brne	80003df0 <udc_process_setup+0x3b0>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003de6:	4a 78       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003de8:	11 dc       	ld.ub	r12,r8[0x5]
80003dea:	f0 1f 00 39 	mcall	80003ecc <udc_process_setup+0x48c>
80003dee:	c1 78       	rjmp	80003e1c <udc_process_setup+0x3dc>
80003df0:	30 0c       	mov	r12,0
80003df2:	c1 58       	rjmp	80003e1c <udc_process_setup+0x3dc>
 * \return true if success 
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_epset_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003df4:	4a 38       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003df6:	90 39       	ld.sh	r9,r8[0x6]
80003df8:	30 08       	mov	r8,0
80003dfa:	f0 09 19 00 	cp.h	r9,r8
80003dfe:	c0 c1       	brne	80003e16 <udc_process_setup+0x3d6>
		return false;
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003e00:	4a 08       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003e02:	90 19       	ld.sh	r9,r8[0x2]
80003e04:	30 08       	mov	r8,0
80003e06:	f0 09 19 00 	cp.h	r9,r8
80003e0a:	c0 61       	brne	80003e16 <udc_process_setup+0x3d6>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003e0c:	49 d8       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003e0e:	11 dc       	ld.ub	r12,r8[0x5]
80003e10:	f0 1f 00 30 	mcall	80003ed0 <udc_process_setup+0x490>
80003e14:	c0 48       	rjmp	80003e1c <udc_process_setup+0x3dc>
80003e16:	30 0c       	mov	r12,0
80003e18:	c0 28       	rjmp	80003e1c <udc_process_setup+0x3dc>
80003e1a:	30 0c       	mov	r12,0
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd())
80003e1c:	58 0c       	cp.w	r12,0
80003e1e:	c0 30       	breq	80003e24 <udc_process_setup+0x3e4>
80003e20:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
			return true;
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80003e24:	49 78       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003e26:	11 88       	ld.ub	r8,r8[0x0]
80003e28:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003e2c:	58 18       	cp.w	r8,1
80003e2e:	c2 71       	brne	80003e7c <udc_process_setup+0x43c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration)
80003e30:	49 c8       	lddpc	r8,80003ea0 <udc_process_setup+0x460>
80003e32:	11 89       	ld.ub	r9,r8[0x0]
80003e34:	30 08       	mov	r8,0
80003e36:	f0 09 18 00 	cp.b	r9,r8
80003e3a:	c2 10       	breq	80003e7c <udc_process_setup+0x43c>
		return false;	// The device is not is configured state yet
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003e3c:	49 18       	lddpc	r8,80003e80 <udc_process_setup+0x440>
80003e3e:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003e40:	49 98       	lddpc	r8,80003ea4 <udc_process_setup+0x464>
80003e42:	70 08       	ld.w	r8,r8[0x0]
80003e44:	70 08       	ld.w	r8,r8[0x0]
80003e46:	11 c8       	ld.ub	r8,r8[0x4]
80003e48:	ee 08 18 00 	cp.b	r8,r7
80003e4c:	e0 88 00 18 	brls	80003e7c <udc_process_setup+0x43c>
		return false;

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003e50:	0e 96       	mov	r6,r7
80003e52:	30 0b       	mov	r11,0
80003e54:	0e 9c       	mov	r12,r7
80003e56:	f0 1f 00 15 	mcall	80003ea8 <udc_process_setup+0x468>
80003e5a:	c1 10       	breq	80003e7c <udc_process_setup+0x43c>
		return false;
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003e5c:	49 28       	lddpc	r8,80003ea4 <udc_process_setup+0x464>
80003e5e:	70 08       	ld.w	r8,r8[0x0]
80003e60:	70 18       	ld.w	r8,r8[0x4]
80003e62:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003e66:	6e 3c       	ld.w	r12,r7[0xc]
80003e68:	5d 1c       	icall	r12
80003e6a:	18 9b       	mov	r11,r12
80003e6c:	0c 9c       	mov	r12,r6
80003e6e:	f0 1f 00 0f 	mcall	80003ea8 <udc_process_setup+0x468>
80003e72:	c0 50       	breq	80003e7c <udc_process_setup+0x43c>
		return false;

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80003e74:	6e 2c       	ld.w	r12,r7[0x8]
80003e76:	5d 1c       	icall	r12
80003e78:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003e7c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003e80:	00 00       	add	r0,r0
80003e82:	0a 10       	sub	r0,r5
80003e84:	00 00       	add	r0,r0
80003e86:	08 8c       	andn	r12,r4
80003e88:	80 00       	ld.sh	r0,r0[0x0]
80003e8a:	24 18       	sub	r8,65
80003e8c:	00 00       	add	r0,r0
80003e8e:	00 a4       	st.w	r0++,r4
80003e90:	00 00       	add	r0,r0
80003e92:	00 c0       	st.b	r0++,r0
80003e94:	00 00       	add	r0,r0
80003e96:	00 e4       	st.h	--r0,r4
80003e98:	00 00       	add	r0,r0
80003e9a:	00 c4       	st.b	r0++,r4
80003e9c:	00 00       	add	r0,r0
80003e9e:	00 d0       	st.w	--r0,r0
80003ea0:	00 00       	add	r0,r0
80003ea2:	08 8e       	andn	lr,r4
80003ea4:	00 00       	add	r0,r0
80003ea6:	08 88       	andn	r8,r4
80003ea8:	80 00       	ld.sh	r0,r0[0x0]
80003eaa:	38 30       	mov	r0,-125
80003eac:	00 00       	add	r0,r0
80003eae:	08 84       	andn	r4,r4
80003eb0:	80 00       	ld.sh	r0,r0[0x0]
80003eb2:	24 24       	sub	r4,66
80003eb4:	00 00       	add	r0,r0
80003eb6:	08 90       	mov	r0,r4
80003eb8:	80 00       	ld.sh	r0,r0[0x0]
80003eba:	39 04       	mov	r4,-112
80003ebc:	80 00       	ld.sh	r0,r0[0x0]
80003ebe:	23 f2       	sub	r2,63
80003ec0:	80 00       	ld.sh	r0,r0[0x0]
80003ec2:	39 e0       	mov	r0,-98
80003ec4:	80 00       	ld.sh	r0,r0[0x0]
80003ec6:	39 1c       	mov	r12,-111
80003ec8:	80 00       	ld.sh	r0,r0[0x0]
80003eca:	39 7c       	mov	r12,-105
80003ecc:	80 00       	ld.sh	r0,r0[0x0]
80003ece:	24 b4       	sub	r4,75
80003ed0:	80 00       	ld.sh	r0,r0[0x0]
80003ed2:	24 38       	sub	r8,67

80003ed4 <_read>:
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
{
80003ed4:	eb cd 40 fc 	pushm	r2-r7,lr
80003ed8:	20 1d       	sub	sp,4
80003eda:	16 94       	mov	r4,r11
80003edc:	14 95       	mov	r5,r10
	int nChars = 0;

	if (file != 0)
80003ede:	58 0c       	cp.w	r12,0
80003ee0:	c0 30       	breq	80003ee6 <_read+0x12>
80003ee2:	3f f7       	mov	r7,-1
80003ee4:	c1 98       	rjmp	80003f16 <_read+0x42>
		return -1;

	for (; len > 0; --len) {
80003ee6:	58 0a       	cp.w	r10,0
80003ee8:	e0 89 00 04 	brgt	80003ef0 <_read+0x1c>
80003eec:	30 07       	mov	r7,0
80003eee:	c1 48       	rjmp	80003f16 <_read+0x42>
80003ef0:	30 07       	mov	r7,0
		int c;
		ptr_get(stdio_base,&c);
80003ef2:	48 c3       	lddpc	r3,80003f20 <_read+0x4c>
80003ef4:	48 c6       	lddpc	r6,80003f24 <_read+0x50>
80003ef6:	1a 92       	mov	r2,sp
80003ef8:	66 0c       	ld.w	r12,r3[0x0]
80003efa:	6c 08       	ld.w	r8,r6[0x0]
80003efc:	1a 9b       	mov	r11,sp
80003efe:	5d 18       	icall	r8
		if (c < 0)
80003f00:	40 08       	lddsp	r8,sp[0x0]
80003f02:	58 08       	cp.w	r8,0
80003f04:	c0 95       	brlt	80003f16 <_read+0x42>
		break;
		*ptr++ = c;
80003f06:	e8 07 0b 08 	st.b	r4[r7],r8
		++nChars;
80003f0a:	2f f7       	sub	r7,-1
// GCC AVR32 implementation
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
80003f0c:	ea 07 01 08 	sub	r8,r5,r7
	int nChars = 0;

	if (file != 0)
		return -1;

	for (; len > 0; --len) {
80003f10:	58 08       	cp.w	r8,0
80003f12:	fe 99 ff f3 	brgt	80003ef8 <_read+0x24>
		break;
		*ptr++ = c;
		++nChars;
	}
	return nChars;
}
80003f16:	0e 9c       	mov	r12,r7
80003f18:	2f fd       	sub	sp,-4
80003f1a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003f1e:	00 00       	add	r0,r0
80003f20:	00 00       	add	r0,r0
80003f22:	0a 38       	cp.w	r8,r5
80003f24:	00 00       	add	r0,r0
80003f26:	0a 30       	cp.w	r0,r5

80003f28 <stdio_usb_enable>:
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80003f28:	30 19       	mov	r9,1
80003f2a:	48 28       	lddpc	r8,80003f30 <stdio_usb_enable+0x8>
80003f2c:	b0 89       	st.b	r8[0x0],r9
	return true;
}
80003f2e:	5e ff       	retal	1
80003f30:	00 00       	add	r0,r0
80003f32:	08 98       	mov	r8,r4

80003f34 <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
80003f34:	30 09       	mov	r9,0
80003f36:	48 28       	lddpc	r8,80003f3c <stdio_usb_disable+0x8>
80003f38:	b0 89       	st.b	r8[0x0],r9
}
80003f3a:	5e fc       	retal	r12
80003f3c:	00 00       	add	r0,r0
80003f3e:	08 98       	mov	r8,r4

80003f40 <stdio_usb_vbus_event>:
	
	*data = udi_cdc_getc ();
}

void stdio_usb_vbus_event(bool b_high)
{
80003f40:	d4 01       	pushm	lr
	if (b_high) {
80003f42:	58 0c       	cp.w	r12,0
80003f44:	c0 40       	breq	80003f4c <stdio_usb_vbus_event+0xc>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80003f46:	f0 1f 00 04 	mcall	80003f54 <stdio_usb_vbus_event+0x14>
80003f4a:	d8 02       	popm	pc
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
80003f4c:	f0 1f 00 03 	mcall	80003f58 <stdio_usb_vbus_event+0x18>
80003f50:	d8 02       	popm	pc
80003f52:	00 00       	add	r0,r0
80003f54:	80 00       	ld.sh	r0,r0[0x0]
80003f56:	2a ac       	sub	r12,-86
80003f58:	80 00       	ld.sh	r0,r0[0x0]
80003f5a:	27 5c       	sub	r12,117

80003f5c <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init (volatile void * usart)
{
80003f5c:	d4 01       	pushm	lr
	stdio_base = usart;
80003f5e:	48 98       	lddpc	r8,80003f80 <stdio_usb_init+0x24>
80003f60:	91 0c       	st.w	r8[0x0],r12
	ptr_put = stdio_usb_putchar;
80003f62:	48 99       	lddpc	r9,80003f84 <stdio_usb_init+0x28>
80003f64:	48 98       	lddpc	r8,80003f88 <stdio_usb_init+0x2c>
80003f66:	91 09       	st.w	r8[0x0],r9
	ptr_get = stdio_usb_getchar;
80003f68:	48 99       	lddpc	r9,80003f8c <stdio_usb_init+0x30>
80003f6a:	48 a8       	lddpc	r8,80003f90 <stdio_usb_init+0x34>
80003f6c:	91 09       	st.w	r8[0x0],r9

/*! \brief Start the USB Device stack
 */
static inline void udc_start(void)
{
	udd_enable();
80003f6e:	f0 1f 00 0a 	mcall	80003f94 <stdio_usb_init+0x38>
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
80003f72:	f0 1f 00 0a 	mcall	80003f98 <stdio_usb_init+0x3c>
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();

	if (! udc_include_vbus_monitoring ()) {
80003f76:	c0 41       	brne	80003f7e <stdio_usb_init+0x22>
		stdio_usb_vbus_event (true);
80003f78:	30 1c       	mov	r12,1
80003f7a:	f0 1f 00 09 	mcall	80003f9c <stdio_usb_init+0x40>
80003f7e:	d8 02       	popm	pc
80003f80:	00 00       	add	r0,r0
80003f82:	0a 38       	cp.w	r8,r5
80003f84:	80 00       	ld.sh	r0,r0[0x0]
80003f86:	3f cc       	mov	r12,-4
80003f88:	00 00       	add	r0,r0
80003f8a:	0a 34       	cp.w	r4,r5
80003f8c:	80 00       	ld.sh	r0,r0[0x0]
80003f8e:	3f a0       	mov	r0,-6
80003f90:	00 00       	add	r0,r0
80003f92:	0a 30       	cp.w	r0,r5
80003f94:	80 00       	ld.sh	r0,r0[0x0]
80003f96:	2b 1c       	sub	r12,-79
80003f98:	80 00       	ld.sh	r0,r0[0x0]
80003f9a:	23 cc       	sub	r12,60
80003f9c:	80 00       	ld.sh	r0,r0[0x0]
80003f9e:	3f 40       	mov	r0,-12

80003fa0 <stdio_usb_getchar>:

	return udi_cdc_putc (data) ? 0 : -1;
}

void stdio_usb_getchar (void volatile * usart, int * data)
{
80003fa0:	eb cd 40 80 	pushm	r7,lr
80003fa4:	16 97       	mov	r7,r11
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003fa6:	48 88       	lddpc	r8,80003fc4 <stdio_usb_getchar+0x24>
80003fa8:	11 89       	ld.ub	r9,r8[0x0]
80003faa:	30 08       	mov	r8,0
80003fac:	f0 09 18 00 	cp.b	r9,r8
80003fb0:	c0 51       	brne	80003fba <stdio_usb_getchar+0x1a>
		*data = 0;  // -1
80003fb2:	30 08       	mov	r8,0
80003fb4:	97 08       	st.w	r11[0x0],r8
		return;
80003fb6:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	
	*data = udi_cdc_getc ();
80003fba:	f0 1f 00 04 	mcall	80003fc8 <stdio_usb_getchar+0x28>
80003fbe:	8f 0c       	st.w	r7[0x0],r12
80003fc0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fc4:	00 00       	add	r0,r0
80003fc6:	08 98       	mov	r8,r4
80003fc8:	80 00       	ld.sh	r0,r0[0x0]
80003fca:	35 24       	mov	r4,82

80003fcc <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * usart, int data)
{
80003fcc:	d4 01       	pushm	lr
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003fce:	48 78       	lddpc	r8,80003fe8 <stdio_usb_putchar+0x1c>
80003fd0:	11 89       	ld.ub	r9,r8[0x0]
80003fd2:	30 08       	mov	r8,0
80003fd4:	f0 09 18 00 	cp.b	r9,r8
80003fd8:	c0 60       	breq	80003fe4 <stdio_usb_putchar+0x18>
		return 0;  // -1
	}

	return udi_cdc_putc (data) ? 0 : -1;
80003fda:	16 9c       	mov	r12,r11
80003fdc:	f0 1f 00 04 	mcall	80003fec <stdio_usb_putchar+0x20>
80003fe0:	c0 21       	brne	80003fe4 <stdio_usb_putchar+0x18>
80003fe2:	dc 0a       	popm	pc,r12=-1
80003fe4:	d8 0a       	popm	pc,r12=0
80003fe6:	00 00       	add	r0,r0
80003fe8:	00 00       	add	r0,r0
80003fea:	08 98       	mov	r8,r4
80003fec:	80 00       	ld.sh	r0,r0[0x0]
80003fee:	34 24       	mov	r4,66

80003ff0 <_write>:

#elif (defined(__GNUC__) && !defined(XMEGA))

	int __attribute__((weak))
	_write (int file, char * ptr, int len)
	{
80003ff0:	eb cd 40 f8 	pushm	r3-r7,lr
80003ff4:	16 94       	mov	r4,r11
80003ff6:	14 95       	mov	r5,r10
		int nChars = 0;
	
		if ( (file != 1)
80003ff8:	20 1c       	sub	r12,1
80003ffa:	58 2c       	cp.w	r12,2
80003ffc:	e0 8b 00 13 	brhi	80004022 <_write+0x32>
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80004000:	58 0a       	cp.w	r10,0
80004002:	c0 31       	brne	80004008 <_write+0x18>
80004004:	30 07       	mov	r7,0
80004006:	c0 f8       	rjmp	80004024 <_write+0x34>
80004008:	30 07       	mov	r7,0
			if (ptr_put(stdio_base, *ptr++) < 0) {
8000400a:	48 93       	lddpc	r3,8000402c <_write+0x3c>
8000400c:	48 96       	lddpc	r6,80004030 <_write+0x40>
8000400e:	66 0c       	ld.w	r12,r3[0x0]
80004010:	6c 08       	ld.w	r8,r6[0x0]
80004012:	e8 07 07 0b 	ld.ub	r11,r4[r7]
80004016:	5d 18       	icall	r8
80004018:	c0 55       	brlt	80004022 <_write+0x32>
				return -1;
			}
			++nChars;
8000401a:	2f f7       	sub	r7,-1
	
		if ( (file != 1)
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
8000401c:	0e 35       	cp.w	r5,r7
8000401e:	cf 81       	brne	8000400e <_write+0x1e>
80004020:	c0 28       	rjmp	80004024 <_write+0x34>
80004022:	3f f7       	mov	r7,-1
				return -1;
			}
			++nChars;
		}
		return nChars;
	}
80004024:	0e 9c       	mov	r12,r7
80004026:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000402a:	00 00       	add	r0,r0
8000402c:	00 00       	add	r0,r0
8000402e:	0a 38       	cp.w	r8,r5
80004030:	00 00       	add	r0,r0
80004032:	0a 34       	cp.w	r4,r5

80004034 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
80004034:	f8 c8 ff f8 	sub	r8,r12,-8
80004038:	99 18       	st.w	r12[0x4],r8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
8000403a:	3f f9       	mov	r9,-1
8000403c:	99 29       	st.w	r12[0x8],r9

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
8000403e:	99 38       	st.w	r12[0xc],r8
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
80004040:	99 48       	st.w	r12[0x10],r8

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
80004042:	30 08       	mov	r8,0
80004044:	99 08       	st.w	r12[0x0],r8
}
80004046:	5e fc       	retal	r12

80004048 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80004048:	30 08       	mov	r8,0
8000404a:	99 48       	st.w	r12[0x10],r8
}
8000404c:	5e fc       	retal	r12

8000404e <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
8000404e:	78 18       	ld.w	r8,r12[0x4]

	pxNewListItem->pxNext = pxIndex->pxNext;
80004050:	70 19       	ld.w	r9,r8[0x4]
80004052:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxPrevious = pxList->pxIndex;
80004054:	78 19       	ld.w	r9,r12[0x4]
80004056:	97 29       	st.w	r11[0x8],r9
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
80004058:	70 19       	ld.w	r9,r8[0x4]
8000405a:	93 2b       	st.w	r9[0x8],r11
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
8000405c:	91 1b       	st.w	r8[0x4],r11
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
8000405e:	99 1b       	st.w	r12[0x4],r11

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80004060:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
80004062:	78 08       	ld.w	r8,r12[0x0]
80004064:	2f f8       	sub	r8,-1
80004066:	99 08       	st.w	r12[0x0],r8
}
80004068:	5e fc       	retal	r12

8000406a <vListInsert>:
{
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
8000406a:	76 0a       	ld.w	r10,r11[0x0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
8000406c:	5b fa       	cp.w	r10,-1
8000406e:	c0 31       	brne	80004074 <vListInsert+0xa>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80004070:	78 48       	ld.w	r8,r12[0x10]
80004072:	c0 c8       	rjmp	8000408a <vListInsert+0x20>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
80004074:	f8 c8 ff f8 	sub	r8,r12,-8
80004078:	70 19       	ld.w	r9,r8[0x4]
8000407a:	72 09       	ld.w	r9,r9[0x0]
8000407c:	12 3a       	cp.w	r10,r9
8000407e:	c0 63       	brcs	8000408a <vListInsert+0x20>
80004080:	70 18       	ld.w	r8,r8[0x4]
80004082:	70 19       	ld.w	r9,r8[0x4]
80004084:	72 09       	ld.w	r9,r9[0x0]
80004086:	12 3a       	cp.w	r10,r9
80004088:	cf c2       	brcc	80004080 <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
8000408a:	70 19       	ld.w	r9,r8[0x4]
8000408c:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
8000408e:	93 2b       	st.w	r9[0x8],r11
	pxNewListItem->pxPrevious = pxIterator;
80004090:	97 28       	st.w	r11[0x8],r8
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
80004092:	91 1b       	st.w	r8[0x4],r11

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80004094:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
80004096:	78 08       	ld.w	r8,r12[0x0]
80004098:	2f f8       	sub	r8,-1
8000409a:	99 08       	st.w	r12[0x0],r8
}
8000409c:	5e fc       	retal	r12

8000409e <vListRemove>:

void vListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
8000409e:	78 18       	ld.w	r8,r12[0x4]
800040a0:	78 29       	ld.w	r9,r12[0x8]
800040a2:	91 29       	st.w	r8[0x8],r9
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
800040a4:	78 28       	ld.w	r8,r12[0x8]
800040a6:	78 19       	ld.w	r9,r12[0x4]
800040a8:	91 19       	st.w	r8[0x4],r9
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
800040aa:	78 48       	ld.w	r8,r12[0x10]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
800040ac:	70 19       	ld.w	r9,r8[0x4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
800040ae:	18 39       	cp.w	r9,r12
800040b0:	f9 f9 00 02 	ld.weq	r9,r12[0x8]
800040b4:	f1 f9 0a 01 	st.weq	r8[0x4],r9
	}

	pxItemToRemove->pvContainer = NULL;
800040b8:	30 09       	mov	r9,0
800040ba:	99 49       	st.w	r12[0x10],r9
	( pxList->uxNumberOfItems )--;
800040bc:	70 09       	ld.w	r9,r8[0x0]
800040be:	20 19       	sub	r9,1
800040c0:	91 09       	st.w	r8[0x0],r9
}
800040c2:	5e fc       	retal	r12

800040c4 <pxPortInitialiseStack>:
	/* Setup the initial stack of the task.  The stack is set exactly as
	expected by the portRESTORE_CONTEXT() macro. */

	/* When the task starts, it will expect to find the function parameter in R12. */
	pxTopOfStack--;
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x08080808;					/* R8 */
800040c4:	e0 68 08 08 	mov	r8,2056
800040c8:	ea 18 08 08 	orh	r8,0x808
800040cc:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x09090909;					/* R9 */
800040ce:	e0 68 09 09 	mov	r8,2313
800040d2:	ea 18 09 09 	orh	r8,0x909
800040d6:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0A0A0A0A;					/* R10 */
800040d8:	e0 68 0a 0a 	mov	r8,2570
800040dc:	ea 18 0a 0a 	orh	r8,0xa0a
800040e0:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0B0B0B0B;					/* R11 */
800040e2:	e0 68 0b 0b 	mov	r8,2827
800040e6:	ea 18 0b 0b 	orh	r8,0xb0b
800040ea:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pvParameters;					/* R12 */
800040ec:	18 da       	st.w	--r12,r10
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xDEADBEEF;					/* R14/LR */
800040ee:	e0 68 be ef 	mov	r8,48879
800040f2:	ea 18 de ad 	orh	r8,0xdead
800040f6:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE; /* R15/PC */
800040f8:	18 db       	st.w	--r12,r11
	*pxTopOfStack-- = ( portSTACK_TYPE ) portINITIAL_SR;				/* SR */
800040fa:	fc 18 00 40 	movh	r8,0x40
800040fe:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xFF0000FF;					/* R0 */
80004100:	e0 68 00 ff 	mov	r8,255
80004104:	ea 18 ff 00 	orh	r8,0xff00
80004108:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x01010101;					/* R1 */
8000410a:	e0 68 01 01 	mov	r8,257
8000410e:	ea 18 01 01 	orh	r8,0x101
80004112:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x02020202;					/* R2 */
80004114:	e0 68 02 02 	mov	r8,514
80004118:	ea 18 02 02 	orh	r8,0x202
8000411c:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x03030303;					/* R3 */
8000411e:	e0 68 03 03 	mov	r8,771
80004122:	ea 18 03 03 	orh	r8,0x303
80004126:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x04040404;					/* R4 */
80004128:	e0 68 04 04 	mov	r8,1028
8000412c:	ea 18 04 04 	orh	r8,0x404
80004130:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x05050505;					/* R5 */
80004132:	e0 68 05 05 	mov	r8,1285
80004136:	ea 18 05 05 	orh	r8,0x505
8000413a:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x06060606;					/* R6 */
8000413c:	e0 68 06 06 	mov	r8,1542
80004140:	ea 18 06 06 	orh	r8,0x606
80004144:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x07070707;					/* R7 */
80004146:	e0 68 07 07 	mov	r8,1799
8000414a:	ea 18 07 07 	orh	r8,0x707
8000414e:	18 d8       	st.w	--r12,r8
	*pxTopOfStack = ( portSTACK_TYPE ) portNO_CRITICAL_NESTING;			/* ulCriticalNesting */
80004150:	30 08       	mov	r8,0
80004152:	18 d8       	st.w	--r12,r8

	return pxTopOfStack;
}
80004154:	5e fc       	retal	r12
80004156:	d7 03       	nop

80004158 <vPortEnterCritical>:
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
__attribute__((__noinline__)) void vPortEnterCritical( void )
{
	/* Disable interrupts */
	portDISABLE_INTERRUPTS();
80004158:	d3 03       	ssrf	0x10

	/* Now interrupts are disabled ulCriticalNesting can be accessed
	 directly.  Increment ulCriticalNesting to keep a count of how many times
	 portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
8000415a:	48 38       	lddpc	r8,80004164 <vPortEnterCritical+0xc>
8000415c:	70 09       	ld.w	r9,r8[0x0]
8000415e:	2f f9       	sub	r9,-1
80004160:	91 09       	st.w	r8[0x0],r9
}
80004162:	5e fc       	retal	r12
80004164:	00 00       	add	r0,r0
80004166:	00 e8       	st.h	--r0,r8

80004168 <xPortStartScheduler>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
80004168:	d4 01       	pushm	lr
	};

#endif

	/* Disable all interrupt/exception. */
	portDISABLE_INTERRUPTS();
8000416a:	d3 03       	ssrf	0x10
		/* Start the timer/counter. */
		tc_start(tc, configTICK_TC_CHANNEL);
	}
	#else
	{
		INTC_register_interrupt(&vTick, AVR32_CORE_COMPARE_IRQ, AVR32_INTC_INT0);
8000416c:	30 0a       	mov	r10,0
8000416e:	14 9b       	mov	r11,r10
80004170:	49 2c       	lddpc	r12,800041b8 <xPortStartScheduler+0x50>
80004172:	f0 1f 00 13 	mcall	800041bc <xPortStartScheduler+0x54>
/* Schedule the COUNT&COMPARE match interrupt in (configCPU_CLOCK_HZ/configTICK_RATE_HZ)
clock cycles from now. */
#if( configTICK_USE_TC==0 )
	static void prvScheduleFirstTick(void)
	{
		Set_system_register(AVR32_COMPARE, configCPU_CLOCK_HZ/configTICK_RATE_HZ);
80004176:	e0 68 2e e0 	mov	r8,12000
8000417a:	e3 b8 00 43 	mtsr	0x10c,r8
		Set_system_register(AVR32_COUNT, 0);
8000417e:	30 08       	mov	r8,0
80004180:	e3 b8 00 42 	mtsr	0x108,r8
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Start the first task. */
	portRESTORE_CONTEXT();
80004184:	e0 68 09 6c 	mov	r8,2412
80004188:	ea 18 00 00 	orh	r8,0x0
8000418c:	70 00       	ld.w	r0,r8[0x0]
8000418e:	60 0d       	ld.w	sp,r0[0x0]
80004190:	1b 00       	ld.w	r0,sp++
80004192:	e0 68 00 e8 	mov	r8,232
80004196:	ea 18 00 00 	orh	r8,0x0
8000419a:	91 00       	st.w	r8[0x0],r0
8000419c:	e3 cd 00 ff 	ldm	sp++,r0-r7
800041a0:	2f ed       	sub	sp,-8
800041a2:	e3 cd 5f 00 	ldm	sp++,r8-r12,lr
800041a6:	fa f0 ff e0 	ld.w	r0,sp[-32]
800041aa:	e3 b0 00 00 	mtsr	0x0,r0
800041ae:	fa f0 ff dc 	ld.w	r0,sp[-36]
800041b2:	fa ff ff e4 	ld.w	pc,sp[-28]

	/* Should not get here! */
	return 0;
}
800041b6:	d8 0a       	popm	pc,r12=0
800041b8:	80 00       	ld.sh	r0,r0[0x0]
800041ba:	42 84       	lddsp	r4,sp[0xa0]
800041bc:	80 00       	ld.sh	r0,r0[0x0]
800041be:	22 3c       	sub	r12,35

800041c0 <SCALLYield>:
/*-----------------------------------------------------------*/
__attribute__((__naked__)) void SCALLYield( void );
__attribute__((__naked__)) void SCALLYield( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_SCALL();
800041c0:	20 6d       	sub	sp,24
800041c2:	eb cd 00 ff 	pushm	r0-r7
800041c6:	fa c7 ff c0 	sub	r7,sp,-64
800041ca:	ee f0 ff f8 	ld.w	r0,r7[-8]
800041ce:	ef 40 ff e0 	st.w	r7[-32],r0
800041d2:	ee f0 ff fc 	ld.w	r0,r7[-4]
800041d6:	ef 40 ff e4 	st.w	r7[-28],r0
800041da:	eb c7 5f 00 	stm	--r7,r8-r12,lr
800041de:	e0 68 00 e8 	mov	r8,232
800041e2:	ea 18 00 00 	orh	r8,0x0
800041e6:	70 00       	ld.w	r0,r8[0x0]
800041e8:	1a d0       	st.w	--sp,r0
800041ea:	f0 1f 00 1a 	mcall	80004250 <LABEL_RET_SCALL_266+0x14>
800041ee:	e0 68 09 6c 	mov	r8,2412
800041f2:	ea 18 00 00 	orh	r8,0x0
800041f6:	70 00       	ld.w	r0,r8[0x0]
800041f8:	81 0d       	st.w	r0[0x0],sp
	vTaskSwitchContext();
800041fa:	f0 1f 00 17 	mcall	80004254 <LABEL_RET_SCALL_266+0x18>
	portRESTORE_CONTEXT_SCALL();
800041fe:	e0 68 09 6c 	mov	r8,2412
80004202:	ea 18 00 00 	orh	r8,0x0
80004206:	70 00       	ld.w	r0,r8[0x0]
80004208:	60 0d       	ld.w	sp,r0[0x0]
8000420a:	1b 00       	ld.w	r0,sp++
8000420c:	e0 68 00 e8 	mov	r8,232
80004210:	ea 18 00 00 	orh	r8,0x0
80004214:	91 00       	st.w	r8[0x0],r0
80004216:	fa c7 ff d8 	sub	r7,sp,-40
8000421a:	e3 c7 5f 00 	ldm	r7++,r8-r12,lr
8000421e:	ee f0 ff e0 	ld.w	r0,r7[-32]
80004222:	e0 61 00 e8 	mov	r1,232
80004226:	ea 11 00 00 	orh	r1,0x0
8000422a:	62 02       	ld.w	r2,r1[0x0]
8000422c:	58 02       	cp.w	r2,0
8000422e:	c0 70       	breq	8000423c <LABEL_RET_SCALL_266>
80004230:	e4 c2 00 01 	sub	r2,r2,1
80004234:	83 02       	st.w	r1[0x0],r2
80004236:	58 02       	cp.w	r2,0
80004238:	c0 21       	brne	8000423c <LABEL_RET_SCALL_266>
8000423a:	b1 c0       	cbr	r0,0x10

8000423c <LABEL_RET_SCALL_266>:
8000423c:	ef 40 ff f8 	st.w	r7[-8],r0
80004240:	ee f0 ff e4 	ld.w	r0,r7[-28]
80004244:	ef 40 ff fc 	st.w	r7[-4],r0
80004248:	e3 cd 00 ff 	ldm	sp++,r0-r7
8000424c:	2f ad       	sub	sp,-24
8000424e:	d6 13       	rets
80004250:	80 00       	ld.sh	r0,r0[0x0]
80004252:	41 58       	lddsp	r8,sp[0x54]
80004254:	80 00       	ld.sh	r0,r0[0x0]
80004256:	43 98       	lddsp	r8,sp[0xe4]

80004258 <prvClearCcInt>:
		Set_system_register(AVR32_COUNT, 0);
	}

	__attribute__((__noinline__)) static void prvClearCcInt(void)
	{
		Set_system_register(AVR32_COMPARE, Get_system_register(AVR32_COMPARE));
80004258:	e1 b8 00 43 	mfsr	r8,0x10c
8000425c:	e3 b8 00 43 	mtsr	0x10c,r8
	}
80004260:	5e fc       	retal	r12
80004262:	d7 03       	nop

80004264 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

__attribute__((__noinline__)) void vPortExitCritical( void )
{
	if(ulCriticalNesting > portNO_CRITICAL_NESTING)
80004264:	48 78       	lddpc	r8,80004280 <vPortExitCritical+0x1c>
80004266:	70 08       	ld.w	r8,r8[0x0]
80004268:	58 08       	cp.w	r8,0
8000426a:	5e 0c       	reteq	r12
	{
		ulCriticalNesting--;
8000426c:	48 58       	lddpc	r8,80004280 <vPortExitCritical+0x1c>
8000426e:	70 09       	ld.w	r9,r8[0x0]
80004270:	20 19       	sub	r9,1
80004272:	91 09       	st.w	r8[0x0],r9
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
80004274:	70 08       	ld.w	r8,r8[0x0]
80004276:	58 08       	cp.w	r8,0
80004278:	5e 1c       	retne	r12
		{
			/* Enable all interrupt/exception. */
			portENABLE_INTERRUPTS();
8000427a:	d5 03       	csrf	0x10
8000427c:	5e fc       	retal	r12
8000427e:	00 00       	add	r0,r0
80004280:	00 00       	add	r0,r0
80004282:	00 e8       	st.h	--r0,r8

80004284 <vTick>:
/* The preemptive scheduler is defined as "naked" as the full context is saved
on entry as part of the context switch. */
__attribute__((__naked__)) static void vTick( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_OS_INT();
80004284:	eb cd 00 ff 	pushm	r0-r7
80004288:	e0 68 00 e8 	mov	r8,232
8000428c:	ea 18 00 00 	orh	r8,0x0
80004290:	70 00       	ld.w	r0,r8[0x0]
80004292:	1a d0       	st.w	--sp,r0
80004294:	7a 90       	ld.w	r0,sp[0x24]
80004296:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
8000429a:	58 10       	cp.w	r0,1
8000429c:	e0 8b 00 08 	brhi	800042ac <LABEL_INT_SKIP_SAVE_CONTEXT_240>
800042a0:	e0 68 09 6c 	mov	r8,2412
800042a4:	ea 18 00 00 	orh	r8,0x0
800042a8:	70 00       	ld.w	r0,r8[0x0]
800042aa:	81 0d       	st.w	r0[0x0],sp

800042ac <LABEL_INT_SKIP_SAVE_CONTEXT_240>:
	#if( configTICK_USE_TC==1 )
		/* Clear the interrupt flag. */
		prvClearTcInt();
	#else
		/* Clear the interrupt flag. */
		prvClearCcInt();
800042ac:	f0 1f 00 12 	mcall	800042f4 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x14>
	#endif

	/* Because FreeRTOS is not supposed to run with nested interrupts, put all OS
	calls in a critical section . */
	portENTER_CRITICAL();
800042b0:	f0 1f 00 12 	mcall	800042f8 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x18>
		vTaskIncrementTick();
800042b4:	f0 1f 00 12 	mcall	800042fc <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x1c>
	portEXIT_CRITICAL();
800042b8:	f0 1f 00 12 	mcall	80004300 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x20>

	/* Restore the context of the "elected task". */
	portRESTORE_CONTEXT_OS_INT();
800042bc:	7a 90       	ld.w	r0,sp[0x24]
800042be:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
800042c2:	58 10       	cp.w	r0,1
800042c4:	e0 8b 00 0e 	brhi	800042e0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257>
800042c8:	f0 1f 00 0c 	mcall	800042f8 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x18>
800042cc:	f0 1f 00 0e 	mcall	80004304 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x24>
800042d0:	f0 1f 00 0c 	mcall	80004300 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x20>
800042d4:	e0 68 09 6c 	mov	r8,2412
800042d8:	ea 18 00 00 	orh	r8,0x0
800042dc:	70 00       	ld.w	r0,r8[0x0]
800042de:	60 0d       	ld.w	sp,r0[0x0]

800042e0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257>:
800042e0:	1b 00       	ld.w	r0,sp++
800042e2:	e0 68 00 e8 	mov	r8,232
800042e6:	ea 18 00 00 	orh	r8,0x0
800042ea:	91 00       	st.w	r8[0x0],r0
800042ec:	e3 cd 00 ff 	ldm	sp++,r0-r7
800042f0:	d6 03       	rete
800042f2:	00 00       	add	r0,r0
800042f4:	80 00       	ld.sh	r0,r0[0x0]
800042f6:	42 58       	lddsp	r8,sp[0x94]
800042f8:	80 00       	ld.sh	r0,r0[0x0]
800042fa:	41 58       	lddsp	r8,sp[0x54]
800042fc:	80 00       	ld.sh	r0,r0[0x0]
800042fe:	44 14       	lddsp	r4,sp[0x104]
80004300:	80 00       	ld.sh	r0,r0[0x0]
80004302:	42 64       	lddsp	r4,sp[0x98]
80004304:	80 00       	ld.sh	r0,r0[0x0]
80004306:	43 98       	lddsp	r8,sp[0xe4]

80004308 <__malloc_lock>:
 * safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_lock(struct _reent *ptr);
void __malloc_lock(struct _reent *ptr)
{
80004308:	d4 01       	pushm	lr
	vTaskSuspendAll();
8000430a:	f0 1f 00 02 	mcall	80004310 <__malloc_lock+0x8>
}
8000430e:	d8 02       	popm	pc
80004310:	80 00       	ld.sh	r0,r0[0x0]
80004312:	43 88       	lddsp	r8,sp[0xe0]

80004314 <__malloc_unlock>:
 * a safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_unlock(struct _reent *ptr);
void __malloc_unlock(struct _reent *ptr)
{
80004314:	d4 01       	pushm	lr
	xTaskResumeAll();
80004316:	f0 1f 00 02 	mcall	8000431c <__malloc_unlock+0x8>
}
8000431a:	d8 02       	popm	pc
8000431c:	80 00       	ld.sh	r0,r0[0x0]
8000431e:	45 2c       	lddsp	r12,sp[0x148]

80004320 <_init_startup>:
 * exception vectors are not compatible with the SCALL management in the current
 * FreeRTOS port. More low-level initializations are besides added here.
 */
int _init_startup(void);
int _init_startup(void)
{
80004320:	d4 01       	pushm	lr
		extern void __heap_end__;
		portBASE_TYPE *pxMem;
	#endif

	/* Load the Exception Vector Base Address in the corresponding system register. */
	Set_system_register( AVR32_EVBA, ( int ) &_evba );
80004322:	48 48       	lddpc	r8,80004330 <_init_startup+0x10>
80004324:	e3 b8 00 01 	mtsr	0x4,r8

	/* Enable exceptions. */
	ENABLE_ALL_EXCEPTIONS();
80004328:	d5 53       	csrf	0x15

	/* Initialize interrupt handling. */
	INTC_init_interrupts();
8000432a:	f0 1f 00 03 	mcall	80004334 <_init_startup+0x14>
	}
	#endif

  // Don't-care value for GCC.
  return 1;
}
8000432e:	da 0a       	popm	pc,r12=1
80004330:	80 00       	ld.sh	r0,r0[0x0]
80004332:	5a 00       	cp.w	r0,-32
80004334:	80 00       	ld.sh	r0,r0[0x0]
80004336:	22 6c       	sub	r12,38

80004338 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80004338:	eb cd 40 80 	pushm	r7,lr
8000433c:	18 97       	mov	r7,r12
	if( pv )
8000433e:	58 0c       	cp.w	r12,0
80004340:	c0 80       	breq	80004350 <vPortFree+0x18>
	{
		vTaskSuspendAll();
80004342:	f0 1f 00 05 	mcall	80004354 <vPortFree+0x1c>
		{
			free( pv );
80004346:	0e 9c       	mov	r12,r7
80004348:	f0 1f 00 04 	mcall	80004358 <vPortFree+0x20>
		}
		xTaskResumeAll();
8000434c:	f0 1f 00 04 	mcall	8000435c <vPortFree+0x24>
80004350:	e3 cd 80 80 	ldm	sp++,r7,pc
80004354:	80 00       	ld.sh	r0,r0[0x0]
80004356:	43 88       	lddsp	r8,sp[0xe0]
80004358:	80 00       	ld.sh	r0,r0[0x0]
8000435a:	4b 70       	lddpc	r0,80004434 <vTaskIncrementTick+0x20>
8000435c:	80 00       	ld.sh	r0,r0[0x0]
8000435e:	45 2c       	lddsp	r12,sp[0x148]

80004360 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
80004360:	eb cd 40 80 	pushm	r7,lr
80004364:	18 97       	mov	r7,r12
void *pvReturn;

	vTaskSuspendAll();
80004366:	f0 1f 00 06 	mcall	8000437c <pvPortMalloc+0x1c>
	{
		pvReturn = malloc( xWantedSize );
8000436a:	0e 9c       	mov	r12,r7
8000436c:	f0 1f 00 05 	mcall	80004380 <pvPortMalloc+0x20>
80004370:	18 97       	mov	r7,r12
	}
	xTaskResumeAll();
80004372:	f0 1f 00 05 	mcall	80004384 <pvPortMalloc+0x24>
		}
	}
	#endif
	
	return pvReturn;
}
80004376:	0e 9c       	mov	r12,r7
80004378:	e3 cd 80 80 	ldm	sp++,r7,pc
8000437c:	80 00       	ld.sh	r0,r0[0x0]
8000437e:	43 88       	lddsp	r8,sp[0xe0]
80004380:	80 00       	ld.sh	r0,r0[0x0]
80004382:	4b 84       	lddpc	r4,80004460 <vTaskIncrementTick+0x4c>
80004384:	80 00       	ld.sh	r0,r0[0x0]
80004386:	45 2c       	lddsp	r12,sp[0x148]

80004388 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
80004388:	48 38       	lddpc	r8,80004394 <vTaskSuspendAll+0xc>
8000438a:	70 09       	ld.w	r9,r8[0x0]
8000438c:	2f f9       	sub	r9,-1
8000438e:	91 09       	st.w	r8[0x0],r9
}
80004390:	5e fc       	retal	r12
80004392:	00 00       	add	r0,r0
80004394:	00 00       	add	r0,r0
80004396:	09 9c       	ld.ub	r12,r4[0x1]

80004398 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
80004398:	49 a8       	lddpc	r8,80004400 <vTaskSwitchContext+0x68>
8000439a:	70 08       	ld.w	r8,r8[0x0]
8000439c:	58 08       	cp.w	r8,0
8000439e:	c0 b1       	brne	800043b4 <vTaskSwitchContext+0x1c>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
800043a0:	49 98       	lddpc	r8,80004404 <vTaskSwitchContext+0x6c>
800043a2:	70 08       	ld.w	r8,r8[0x0]
800043a4:	f0 08 00 28 	add	r8,r8,r8<<0x2
800043a8:	49 89       	lddpc	r9,80004408 <vTaskSwitchContext+0x70>
800043aa:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800043ae:	58 08       	cp.w	r8,0
800043b0:	c0 60       	breq	800043bc <vTaskSwitchContext+0x24>
800043b2:	c1 18       	rjmp	800043d4 <vTaskSwitchContext+0x3c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
800043b4:	30 19       	mov	r9,1
800043b6:	49 68       	lddpc	r8,8000440c <vTaskSwitchContext+0x74>
800043b8:	91 09       	st.w	r8[0x0],r9
800043ba:	5e fc       	retal	r12
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
800043bc:	49 28       	lddpc	r8,80004404 <vTaskSwitchContext+0x6c>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
800043be:	49 3a       	lddpc	r10,80004408 <vTaskSwitchContext+0x70>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
800043c0:	70 09       	ld.w	r9,r8[0x0]
800043c2:	20 19       	sub	r9,1
800043c4:	91 09       	st.w	r8[0x0],r9
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
800043c6:	70 09       	ld.w	r9,r8[0x0]
800043c8:	f2 09 00 29 	add	r9,r9,r9<<0x2
800043cc:	f4 09 03 29 	ld.w	r9,r10[r9<<0x2]
800043d0:	58 09       	cp.w	r9,0
800043d2:	cf 70       	breq	800043c0 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
800043d4:	48 c8       	lddpc	r8,80004404 <vTaskSwitchContext+0x6c>
800043d6:	70 08       	ld.w	r8,r8[0x0]
800043d8:	f0 08 00 28 	add	r8,r8,r8<<0x2
800043dc:	48 b9       	lddpc	r9,80004408 <vTaskSwitchContext+0x70>
800043de:	f2 08 00 28 	add	r8,r9,r8<<0x2
800043e2:	70 19       	ld.w	r9,r8[0x4]
800043e4:	72 19       	ld.w	r9,r9[0x4]
800043e6:	91 19       	st.w	r8[0x4],r9
800043e8:	f0 ca ff f8 	sub	r10,r8,-8
800043ec:	14 39       	cp.w	r9,r10
800043ee:	f3 f9 00 01 	ld.weq	r9,r9[0x4]
800043f2:	f1 f9 0a 01 	st.weq	r8[0x4],r9
800043f6:	70 18       	ld.w	r8,r8[0x4]
800043f8:	70 39       	ld.w	r9,r8[0xc]
800043fa:	48 68       	lddpc	r8,80004410 <vTaskSwitchContext+0x78>
800043fc:	91 09       	st.w	r8[0x0],r9
800043fe:	5e fc       	retal	r12
80004400:	00 00       	add	r0,r0
80004402:	09 9c       	ld.ub	r12,r4[0x1]
80004404:	00 00       	add	r0,r0
80004406:	09 d4       	ld.ub	r4,r4[0x5]
80004408:	00 00       	add	r0,r0
8000440a:	08 b8       	st.h	r4++,r8
8000440c:	00 00       	add	r0,r0
8000440e:	09 bc       	ld.ub	r12,r4[0x3]
80004410:	00 00       	add	r0,r0
80004412:	09 6c       	ld.uh	r12,--r4

80004414 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
80004414:	eb cd 40 fe 	pushm	r1-r7,lr
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80004418:	4b a8       	lddpc	r8,80004500 <vTaskIncrementTick+0xec>
8000441a:	70 08       	ld.w	r8,r8[0x0]
8000441c:	58 08       	cp.w	r8,0
8000441e:	c6 a1       	brne	800044f2 <vTaskIncrementTick+0xde>
	{
		++xTickCount;
80004420:	4b 98       	lddpc	r8,80004504 <vTaskIncrementTick+0xf0>
80004422:	70 09       	ld.w	r9,r8[0x0]
80004424:	2f f9       	sub	r9,-1
80004426:	91 09       	st.w	r8[0x0],r9
		if( xTickCount == ( portTickType ) 0 )
80004428:	70 08       	ld.w	r8,r8[0x0]
8000442a:	58 08       	cp.w	r8,0
8000442c:	c1 a1       	brne	80004460 <vTaskIncrementTick+0x4c>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
8000442e:	4b 78       	lddpc	r8,80004508 <vTaskIncrementTick+0xf4>
80004430:	70 0a       	ld.w	r10,r8[0x0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
80004432:	4b 79       	lddpc	r9,8000450c <vTaskIncrementTick+0xf8>
80004434:	72 0b       	ld.w	r11,r9[0x0]
80004436:	91 0b       	st.w	r8[0x0],r11
			pxOverflowDelayedTaskList = pxTemp;
80004438:	93 0a       	st.w	r9[0x0],r10
			xNumOfOverflows++;
8000443a:	4b 69       	lddpc	r9,80004510 <vTaskIncrementTick+0xfc>
8000443c:	72 0a       	ld.w	r10,r9[0x0]
8000443e:	2f fa       	sub	r10,-1
80004440:	93 0a       	st.w	r9[0x0],r10
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80004442:	70 08       	ld.w	r8,r8[0x0]
80004444:	70 08       	ld.w	r8,r8[0x0]
80004446:	58 08       	cp.w	r8,0
80004448:	c0 51       	brne	80004452 <vTaskIncrementTick+0x3e>
				/* The new current delayed list is empty.  Set 
				xNextTaskUnblockTime to the maximum possible value so it is 
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until 
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
8000444a:	3f f9       	mov	r9,-1
8000444c:	4b 28       	lddpc	r8,80004514 <vTaskIncrementTick+0x100>
8000444e:	91 09       	st.w	r8[0x0],r9
80004450:	c0 88       	rjmp	80004460 <vTaskIncrementTick+0x4c>
			{
				/* The new current delayed list is not empty, get the value of 
				the item at the head of the delayed list.  This is the time at 
				which the task at the head of the delayed list should be removed 
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80004452:	4a e8       	lddpc	r8,80004508 <vTaskIncrementTick+0xf4>
80004454:	70 08       	ld.w	r8,r8[0x0]
80004456:	70 38       	ld.w	r8,r8[0xc]
80004458:	70 38       	ld.w	r8,r8[0xc]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
8000445a:	70 19       	ld.w	r9,r8[0x4]
8000445c:	4a e8       	lddpc	r8,80004514 <vTaskIncrementTick+0x100>
8000445e:	91 09       	st.w	r8[0x0],r9
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
80004460:	4a 98       	lddpc	r8,80004504 <vTaskIncrementTick+0xf0>
80004462:	70 09       	ld.w	r9,r8[0x0]
80004464:	4a c8       	lddpc	r8,80004514 <vTaskIncrementTick+0x100>
80004466:	70 08       	ld.w	r8,r8[0x0]
80004468:	10 39       	cp.w	r9,r8
8000446a:	c4 83       	brcs	800044fa <vTaskIncrementTick+0xe6>
8000446c:	4a 78       	lddpc	r8,80004508 <vTaskIncrementTick+0xf4>
8000446e:	70 08       	ld.w	r8,r8[0x0]
80004470:	70 08       	ld.w	r8,r8[0x0]
80004472:	58 08       	cp.w	r8,0
80004474:	c0 c0       	breq	8000448c <vTaskIncrementTick+0x78>
80004476:	4a 58       	lddpc	r8,80004508 <vTaskIncrementTick+0xf4>
80004478:	70 08       	ld.w	r8,r8[0x0]
8000447a:	70 38       	ld.w	r8,r8[0xc]
8000447c:	70 37       	ld.w	r7,r8[0xc]
8000447e:	6e 18       	ld.w	r8,r7[0x4]
80004480:	4a 19       	lddpc	r9,80004504 <vTaskIncrementTick+0xf0>
80004482:	72 09       	ld.w	r9,r9[0x0]
80004484:	12 38       	cp.w	r8,r9
80004486:	e0 88 00 14 	brls	800044ae <vTaskIncrementTick+0x9a>
8000448a:	c0 e8       	rjmp	800044a6 <vTaskIncrementTick+0x92>
8000448c:	3f f9       	mov	r9,-1
8000448e:	4a 28       	lddpc	r8,80004514 <vTaskIncrementTick+0x100>
80004490:	91 09       	st.w	r8[0x0],r9
80004492:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80004496:	6a 08       	ld.w	r8,r5[0x0]
80004498:	70 38       	ld.w	r8,r8[0xc]
8000449a:	70 37       	ld.w	r7,r8[0xc]
8000449c:	6e 18       	ld.w	r8,r7[0x4]
8000449e:	64 09       	ld.w	r9,r2[0x0]
800044a0:	12 38       	cp.w	r8,r9
800044a2:	e0 88 00 0b 	brls	800044b8 <vTaskIncrementTick+0xa4>
800044a6:	49 c9       	lddpc	r9,80004514 <vTaskIncrementTick+0x100>
800044a8:	93 08       	st.w	r9[0x0],r8
800044aa:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800044ae:	49 b4       	lddpc	r4,80004518 <vTaskIncrementTick+0x104>
800044b0:	08 91       	mov	r1,r4
800044b2:	49 b3       	lddpc	r3,8000451c <vTaskIncrementTick+0x108>
800044b4:	49 55       	lddpc	r5,80004508 <vTaskIncrementTick+0xf4>
800044b6:	49 42       	lddpc	r2,80004504 <vTaskIncrementTick+0xf0>
800044b8:	ee c6 ff fc 	sub	r6,r7,-4
800044bc:	0c 9c       	mov	r12,r6
800044be:	f0 1f 00 19 	mcall	80004520 <vTaskIncrementTick+0x10c>
800044c2:	6e a8       	ld.w	r8,r7[0x28]
800044c4:	58 08       	cp.w	r8,0
800044c6:	c0 50       	breq	800044d0 <vTaskIncrementTick+0xbc>
800044c8:	ee cc ff e8 	sub	r12,r7,-24
800044cc:	f0 1f 00 15 	mcall	80004520 <vTaskIncrementTick+0x10c>
800044d0:	6e bc       	ld.w	r12,r7[0x2c]
800044d2:	68 08       	ld.w	r8,r4[0x0]
800044d4:	10 3c       	cp.w	r12,r8
800044d6:	e3 fc ba 00 	st.whi	r1[0x0],r12
800044da:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
800044de:	0c 9b       	mov	r11,r6
800044e0:	e6 0c 00 2c 	add	r12,r3,r12<<0x2
800044e4:	f0 1f 00 10 	mcall	80004524 <vTaskIncrementTick+0x110>
800044e8:	6a 08       	ld.w	r8,r5[0x0]
800044ea:	70 08       	ld.w	r8,r8[0x0]
800044ec:	58 08       	cp.w	r8,0
800044ee:	cd 41       	brne	80004496 <vTaskIncrementTick+0x82>
800044f0:	cc eb       	rjmp	8000448c <vTaskIncrementTick+0x78>
	}
	else
	{
		++uxMissedTicks;
800044f2:	48 e8       	lddpc	r8,80004528 <vTaskIncrementTick+0x114>
800044f4:	70 09       	ld.w	r9,r8[0x0]
800044f6:	2f f9       	sub	r9,-1
800044f8:	91 09       	st.w	r8[0x0],r9
800044fa:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800044fe:	00 00       	add	r0,r0
80004500:	00 00       	add	r0,r0
80004502:	09 9c       	ld.ub	r12,r4[0x1]
80004504:	00 00       	add	r0,r0
80004506:	09 98       	ld.ub	r8,r4[0x1]
80004508:	00 00       	add	r0,r0
8000450a:	08 a4       	st.w	r4++,r4
8000450c:	00 00       	add	r0,r0
8000450e:	08 b4       	st.h	r4++,r4
80004510:	00 00       	add	r0,r0
80004512:	08 b0       	st.h	r4++,r0
80004514:	00 00       	add	r0,r0
80004516:	00 ec       	st.h	--r0,r12
80004518:	00 00       	add	r0,r0
8000451a:	09 d4       	ld.ub	r4,r4[0x5]
8000451c:	00 00       	add	r0,r0
8000451e:	08 b8       	st.h	r4++,r8
80004520:	80 00       	ld.sh	r0,r0[0x0]
80004522:	40 9e       	lddsp	lr,sp[0x24]
80004524:	80 00       	ld.sh	r0,r0[0x0]
80004526:	40 4e       	lddsp	lr,sp[0x10]
80004528:	00 00       	add	r0,r0
8000452a:	08 9c       	mov	r12,r4

8000452c <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
8000452c:	d4 31       	pushm	r0-r7,lr
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
8000452e:	f0 1f 00 2c 	mcall	800045dc <xTaskResumeAll+0xb0>
	{
		--uxSchedulerSuspended;
80004532:	4a c8       	lddpc	r8,800045e0 <xTaskResumeAll+0xb4>
80004534:	70 09       	ld.w	r9,r8[0x0]
80004536:	20 19       	sub	r9,1
80004538:	91 09       	st.w	r8[0x0],r9

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
8000453a:	70 08       	ld.w	r8,r8[0x0]
8000453c:	58 08       	cp.w	r8,0
8000453e:	c4 a1       	brne	800045d2 <xTaskResumeAll+0xa6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
80004540:	4a 98       	lddpc	r8,800045e4 <xTaskResumeAll+0xb8>
80004542:	70 08       	ld.w	r8,r8[0x0]
80004544:	58 08       	cp.w	r8,0
80004546:	c4 60       	breq	800045d2 <xTaskResumeAll+0xa6>
80004548:	30 04       	mov	r4,0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
8000454a:	4a 85       	lddpc	r5,800045e8 <xTaskResumeAll+0xbc>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
8000454c:	4a 83       	lddpc	r3,800045ec <xTaskResumeAll+0xc0>
8000454e:	06 90       	mov	r0,r3
80004550:	4a 82       	lddpc	r2,800045f0 <xTaskResumeAll+0xc4>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80004552:	4a 91       	lddpc	r1,800045f4 <xTaskResumeAll+0xc8>
80004554:	c1 e8       	rjmp	80004590 <xTaskResumeAll+0x64>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
80004556:	6a 38       	ld.w	r8,r5[0xc]
80004558:	70 37       	ld.w	r7,r8[0xc]
					vListRemove( &( pxTCB->xEventListItem ) );
8000455a:	ee cc ff e8 	sub	r12,r7,-24
8000455e:	f0 1f 00 27 	mcall	800045f8 <xTaskResumeAll+0xcc>
					vListRemove( &( pxTCB->xGenericListItem ) );
80004562:	ee c6 ff fc 	sub	r6,r7,-4
80004566:	0c 9c       	mov	r12,r6
80004568:	f0 1f 00 24 	mcall	800045f8 <xTaskResumeAll+0xcc>
					prvAddTaskToReadyQueue( pxTCB );
8000456c:	6e bc       	ld.w	r12,r7[0x2c]
8000456e:	66 08       	ld.w	r8,r3[0x0]
80004570:	10 3c       	cp.w	r12,r8
80004572:	e1 fc ba 00 	st.whi	r0[0x0],r12
80004576:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
8000457a:	0c 9b       	mov	r11,r6
8000457c:	e4 0c 00 2c 	add	r12,r2,r12<<0x2
80004580:	f0 1f 00 1f 	mcall	800045fc <xTaskResumeAll+0xd0>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80004584:	62 08       	ld.w	r8,r1[0x0]
80004586:	6e b9       	ld.w	r9,r7[0x2c]
80004588:	70 b8       	ld.w	r8,r8[0x2c]
8000458a:	10 39       	cp.w	r9,r8
8000458c:	f9 b4 02 01 	movhs	r4,1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80004590:	6a 08       	ld.w	r8,r5[0x0]
80004592:	58 08       	cp.w	r8,0
80004594:	ce 11       	brne	80004556 <xTaskResumeAll+0x2a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80004596:	49 b8       	lddpc	r8,80004600 <xTaskResumeAll+0xd4>
80004598:	70 08       	ld.w	r8,r8[0x0]
8000459a:	58 08       	cp.w	r8,0
8000459c:	c0 f0       	breq	800045ba <xTaskResumeAll+0x8e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
8000459e:	49 98       	lddpc	r8,80004600 <xTaskResumeAll+0xd4>
800045a0:	70 08       	ld.w	r8,r8[0x0]
800045a2:	58 08       	cp.w	r8,0
800045a4:	c1 10       	breq	800045c6 <xTaskResumeAll+0x9a>
					{
						vTaskIncrementTick();
						--uxMissedTicks;
800045a6:	49 77       	lddpc	r7,80004600 <xTaskResumeAll+0xd4>
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
800045a8:	f0 1f 00 17 	mcall	80004604 <xTaskResumeAll+0xd8>
						--uxMissedTicks;
800045ac:	6e 08       	ld.w	r8,r7[0x0]
800045ae:	20 18       	sub	r8,1
800045b0:	8f 08       	st.w	r7[0x0],r8
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
800045b2:	6e 08       	ld.w	r8,r7[0x0]
800045b4:	58 08       	cp.w	r8,0
800045b6:	cf 91       	brne	800045a8 <xTaskResumeAll+0x7c>
800045b8:	c0 78       	rjmp	800045c6 <xTaskResumeAll+0x9a>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
800045ba:	58 14       	cp.w	r4,1
800045bc:	c0 50       	breq	800045c6 <xTaskResumeAll+0x9a>
800045be:	49 38       	lddpc	r8,80004608 <xTaskResumeAll+0xdc>
800045c0:	70 08       	ld.w	r8,r8[0x0]
800045c2:	58 18       	cp.w	r8,1
800045c4:	c0 71       	brne	800045d2 <xTaskResumeAll+0xa6>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
800045c6:	30 09       	mov	r9,0
800045c8:	49 08       	lddpc	r8,80004608 <xTaskResumeAll+0xdc>
800045ca:	91 09       	st.w	r8[0x0],r9
					portYIELD_WITHIN_API();
800045cc:	d7 33       	scall
800045ce:	30 17       	mov	r7,1
800045d0:	c0 28       	rjmp	800045d4 <xTaskResumeAll+0xa8>
800045d2:	30 07       	mov	r7,0
				}
			}
		}
	}
	taskEXIT_CRITICAL();
800045d4:	f0 1f 00 0e 	mcall	8000460c <xTaskResumeAll+0xe0>

	return xAlreadyYielded;
}
800045d8:	0e 9c       	mov	r12,r7
800045da:	d8 32       	popm	r0-r7,pc
800045dc:	80 00       	ld.sh	r0,r0[0x0]
800045de:	41 58       	lddsp	r8,sp[0x54]
800045e0:	00 00       	add	r0,r0
800045e2:	09 9c       	ld.ub	r12,r4[0x1]
800045e4:	00 00       	add	r0,r0
800045e6:	09 b8       	ld.ub	r8,r4[0x3]
800045e8:	00 00       	add	r0,r0
800045ea:	09 70       	ld.ub	r0,--r4
800045ec:	00 00       	add	r0,r0
800045ee:	09 d4       	ld.ub	r4,r4[0x5]
800045f0:	00 00       	add	r0,r0
800045f2:	08 b8       	st.h	r4++,r8
800045f4:	00 00       	add	r0,r0
800045f6:	09 6c       	ld.uh	r12,--r4
800045f8:	80 00       	ld.sh	r0,r0[0x0]
800045fa:	40 9e       	lddsp	lr,sp[0x24]
800045fc:	80 00       	ld.sh	r0,r0[0x0]
800045fe:	40 4e       	lddsp	lr,sp[0x10]
80004600:	00 00       	add	r0,r0
80004602:	08 9c       	mov	r12,r4
80004604:	80 00       	ld.sh	r0,r0[0x0]
80004606:	44 14       	lddsp	r4,sp[0x104]
80004608:	00 00       	add	r0,r0
8000460a:	09 bc       	ld.ub	r12,r4[0x3]
8000460c:	80 00       	ld.sh	r0,r0[0x0]
8000460e:	42 64       	lddsp	r4,sp[0x98]

80004610 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
80004610:	eb cd 40 80 	pushm	r7,lr
80004614:	18 97       	mov	r7,r12
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
80004616:	49 08       	lddpc	r8,80004654 <prvAddCurrentTaskToDelayedList+0x44>
80004618:	70 08       	ld.w	r8,r8[0x0]
8000461a:	91 1c       	st.w	r8[0x4],r12

	if( xTimeToWake < xTickCount )
8000461c:	48 f8       	lddpc	r8,80004658 <prvAddCurrentTaskToDelayedList+0x48>
8000461e:	70 08       	ld.w	r8,r8[0x0]
80004620:	10 3c       	cp.w	r12,r8
80004622:	c0 a2       	brcc	80004636 <prvAddCurrentTaskToDelayedList+0x26>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80004624:	48 c8       	lddpc	r8,80004654 <prvAddCurrentTaskToDelayedList+0x44>
80004626:	70 0b       	ld.w	r11,r8[0x0]
80004628:	48 d8       	lddpc	r8,8000465c <prvAddCurrentTaskToDelayedList+0x4c>
8000462a:	70 0c       	ld.w	r12,r8[0x0]
8000462c:	2f cb       	sub	r11,-4
8000462e:	f0 1f 00 0d 	mcall	80004660 <prvAddCurrentTaskToDelayedList+0x50>
80004632:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80004636:	48 88       	lddpc	r8,80004654 <prvAddCurrentTaskToDelayedList+0x44>
80004638:	70 0b       	ld.w	r11,r8[0x0]
8000463a:	48 b8       	lddpc	r8,80004664 <prvAddCurrentTaskToDelayedList+0x54>
8000463c:	70 0c       	ld.w	r12,r8[0x0]
8000463e:	2f cb       	sub	r11,-4
80004640:	f0 1f 00 08 	mcall	80004660 <prvAddCurrentTaskToDelayedList+0x50>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
80004644:	48 98       	lddpc	r8,80004668 <prvAddCurrentTaskToDelayedList+0x58>
80004646:	70 08       	ld.w	r8,r8[0x0]
80004648:	10 37       	cp.w	r7,r8
8000464a:	c0 32       	brcc	80004650 <prvAddCurrentTaskToDelayedList+0x40>
		{
			xNextTaskUnblockTime = xTimeToWake;
8000464c:	48 78       	lddpc	r8,80004668 <prvAddCurrentTaskToDelayedList+0x58>
8000464e:	91 07       	st.w	r8[0x0],r7
80004650:	e3 cd 80 80 	ldm	sp++,r7,pc
80004654:	00 00       	add	r0,r0
80004656:	09 6c       	ld.uh	r12,--r4
80004658:	00 00       	add	r0,r0
8000465a:	09 98       	ld.ub	r8,r4[0x1]
8000465c:	00 00       	add	r0,r0
8000465e:	08 b4       	st.h	r4++,r4
80004660:	80 00       	ld.sh	r0,r0[0x0]
80004662:	40 6a       	lddsp	r10,sp[0x18]
80004664:	00 00       	add	r0,r0
80004666:	08 a4       	st.w	r4++,r4
80004668:	00 00       	add	r0,r0
8000466a:	00 ec       	st.h	--r0,r12

8000466c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
8000466c:	eb cd 40 c0 	pushm	r6-r7,lr
80004670:	18 97       	mov	r7,r12
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
80004672:	58 0c       	cp.w	r12,0
80004674:	c1 10       	breq	80004696 <vTaskDelay+0x2a>
		{
			vTaskSuspendAll();
80004676:	f0 1f 00 0a 	mcall	8000469c <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
8000467a:	48 a8       	lddpc	r8,800046a0 <vTaskDelay+0x34>
8000467c:	70 06       	ld.w	r6,r8[0x0]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
8000467e:	48 a8       	lddpc	r8,800046a4 <vTaskDelay+0x38>
80004680:	70 0c       	ld.w	r12,r8[0x0]
80004682:	2f cc       	sub	r12,-4
80004684:	f0 1f 00 09 	mcall	800046a8 <vTaskDelay+0x3c>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80004688:	ee 06 00 0c 	add	r12,r7,r6
8000468c:	f0 1f 00 08 	mcall	800046ac <vTaskDelay+0x40>
			}
			xAlreadyYielded = xTaskResumeAll();
80004690:	f0 1f 00 08 	mcall	800046b0 <vTaskDelay+0x44>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
80004694:	c0 21       	brne	80004698 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
80004696:	d7 33       	scall
80004698:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000469c:	80 00       	ld.sh	r0,r0[0x0]
8000469e:	43 88       	lddsp	r8,sp[0xe0]
800046a0:	00 00       	add	r0,r0
800046a2:	09 98       	ld.ub	r8,r4[0x1]
800046a4:	00 00       	add	r0,r0
800046a6:	09 6c       	ld.uh	r12,--r4
800046a8:	80 00       	ld.sh	r0,r0[0x0]
800046aa:	40 9e       	lddsp	lr,sp[0x24]
800046ac:	80 00       	ld.sh	r0,r0[0x0]
800046ae:	46 10       	lddsp	r0,sp[0x184]
800046b0:	80 00       	ld.sh	r0,r0[0x0]
800046b2:	45 2c       	lddsp	r12,sp[0x148]

800046b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
800046b4:	eb cd 40 f8 	pushm	r3-r7,lr
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
800046b8:	49 57       	lddpc	r7,8000470c <prvIdleTask+0x58>
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
800046ba:	49 64       	lddpc	r4,80004710 <prvIdleTask+0x5c>

				taskENTER_CRITICAL();
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					--uxCurrentNumberOfTasks;
800046bc:	49 63       	lddpc	r3,80004714 <prvIdleTask+0x60>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
800046be:	49 75       	lddpc	r5,80004718 <prvIdleTask+0x64>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
800046c0:	6e 08       	ld.w	r8,r7[0x0]
800046c2:	58 08       	cp.w	r8,0
800046c4:	c1 e0       	breq	80004700 <prvIdleTask+0x4c>
		{
			vTaskSuspendAll();
800046c6:	f0 1f 00 16 	mcall	8000471c <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
800046ca:	68 06       	ld.w	r6,r4[0x0]
			xTaskResumeAll();
800046cc:	f0 1f 00 15 	mcall	80004720 <prvIdleTask+0x6c>

			if( xListIsEmpty == pdFALSE )
800046d0:	58 06       	cp.w	r6,0
800046d2:	c1 70       	breq	80004700 <prvIdleTask+0x4c>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
800046d4:	f0 1f 00 14 	mcall	80004724 <prvIdleTask+0x70>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
800046d8:	68 38       	ld.w	r8,r4[0xc]
800046da:	70 36       	ld.w	r6,r8[0xc]
					vListRemove( &( pxTCB->xGenericListItem ) );
800046dc:	ec cc ff fc 	sub	r12,r6,-4
800046e0:	f0 1f 00 12 	mcall	80004728 <prvIdleTask+0x74>
					--uxCurrentNumberOfTasks;
800046e4:	66 08       	ld.w	r8,r3[0x0]
800046e6:	20 18       	sub	r8,1
800046e8:	87 08       	st.w	r3[0x0],r8
					--uxTasksDeleted;
800046ea:	6e 08       	ld.w	r8,r7[0x0]
800046ec:	20 18       	sub	r8,1
800046ee:	8f 08       	st.w	r7[0x0],r8
				}
				taskEXIT_CRITICAL();
800046f0:	f0 1f 00 0f 	mcall	8000472c <prvIdleTask+0x78>

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
800046f4:	6c cc       	ld.w	r12,r6[0x30]
800046f6:	f0 1f 00 0f 	mcall	80004730 <prvIdleTask+0x7c>
		vPortFree( pxTCB );
800046fa:	0c 9c       	mov	r12,r6
800046fc:	f0 1f 00 0d 	mcall	80004730 <prvIdleTask+0x7c>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
80004700:	6a 08       	ld.w	r8,r5[0x0]
80004702:	58 18       	cp.w	r8,1
80004704:	fe 98 ff de 	brls	800046c0 <prvIdleTask+0xc>
			{
				taskYIELD();
80004708:	d7 33       	scall
8000470a:	cd bb       	rjmp	800046c0 <prvIdleTask+0xc>
8000470c:	00 00       	add	r0,r0
8000470e:	08 ac       	st.w	r4++,r12
80004710:	00 00       	add	r0,r0
80004712:	09 58       	ld.sh	r8,--r4
80004714:	00 00       	add	r0,r0
80004716:	09 b8       	ld.ub	r8,r4[0x3]
80004718:	00 00       	add	r0,r0
8000471a:	08 b8       	st.h	r4++,r8
8000471c:	80 00       	ld.sh	r0,r0[0x0]
8000471e:	43 88       	lddsp	r8,sp[0xe0]
80004720:	80 00       	ld.sh	r0,r0[0x0]
80004722:	45 2c       	lddsp	r12,sp[0x148]
80004724:	80 00       	ld.sh	r0,r0[0x0]
80004726:	41 58       	lddsp	r8,sp[0x54]
80004728:	80 00       	ld.sh	r0,r0[0x0]
8000472a:	40 9e       	lddsp	lr,sp[0x24]
8000472c:	80 00       	ld.sh	r0,r0[0x0]
8000472e:	42 64       	lddsp	r4,sp[0x98]
80004730:	80 00       	ld.sh	r0,r0[0x0]
80004732:	43 38       	lddsp	r8,sp[0xcc]

80004734 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
80004734:	d4 31       	pushm	r0-r7,lr
80004736:	20 1d       	sub	sp,4
80004738:	fa c4 ff d8 	sub	r4,sp,-40
8000473c:	50 0c       	stdsp	sp[0x0],r12
8000473e:	16 91       	mov	r1,r11
80004740:	14 97       	mov	r7,r10
80004742:	12 90       	mov	r0,r9
80004744:	10 93       	mov	r3,r8
80004746:	68 02       	ld.w	r2,r4[0x0]
80004748:	68 16       	ld.w	r6,r4[0x4]
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
8000474a:	34 4c       	mov	r12,68
8000474c:	f0 1f 00 5b 	mcall	800048b8 <xTaskGenericCreate+0x184>
80004750:	18 95       	mov	r5,r12

	if( pxNewTCB != NULL )
80004752:	c0 31       	brne	80004758 <xTaskGenericCreate+0x24>
80004754:	3f fc       	mov	r12,-1
80004756:	ca d8       	rjmp	800048b0 <xTaskGenericCreate+0x17c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
80004758:	58 06       	cp.w	r6,0
8000475a:	e0 81 00 ad 	brne	800048b4 <xTaskGenericCreate+0x180>
8000475e:	0e 9c       	mov	r12,r7
80004760:	5c 7c       	castu.h	r12
80004762:	a3 6c       	lsl	r12,0x2
80004764:	f0 1f 00 55 	mcall	800048b8 <xTaskGenericCreate+0x184>
80004768:	18 96       	mov	r6,r12
8000476a:	8b cc       	st.w	r5[0x30],r12

		if( pxNewTCB->pxStack == NULL )
8000476c:	c0 61       	brne	80004778 <xTaskGenericCreate+0x44>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
8000476e:	0a 9c       	mov	r12,r5
80004770:	f0 1f 00 53 	mcall	800048bc <xTaskGenericCreate+0x188>
80004774:	3f fc       	mov	r12,-1
80004776:	c9 d8       	rjmp	800048b0 <xTaskGenericCreate+0x17c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
80004778:	5c 77       	castu.h	r7
8000477a:	ee 0a 15 02 	lsl	r10,r7,0x2
8000477e:	e0 6b 00 a5 	mov	r11,165
80004782:	0c 9c       	mov	r12,r6
80004784:	f0 1f 00 4f 	mcall	800048c0 <xTaskGenericCreate+0x18c>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
80004788:	ee c6 00 01 	sub	r6,r7,1
8000478c:	6a c8       	ld.w	r8,r5[0x30]
8000478e:	f0 06 00 26 	add	r6,r8,r6<<0x2
80004792:	e0 16 ff fc 	andl	r6,0xfffc
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
80004796:	31 0a       	mov	r10,16
80004798:	02 9b       	mov	r11,r1
8000479a:	ea cc ff cc 	sub	r12,r5,-52
8000479e:	f0 1f 00 4a 	mcall	800048c4 <xTaskGenericCreate+0x190>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
800047a2:	30 08       	mov	r8,0
800047a4:	eb 68 00 43 	st.b	r5[67],r8
800047a8:	58 73       	cp.w	r3,7
800047aa:	e6 07 17 80 	movls	r7,r3
800047ae:	f9 b7 0b 07 	movhi	r7,7
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
800047b2:	8b b7       	st.w	r5[0x2c],r7
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
800047b4:	ea c4 ff fc 	sub	r4,r5,-4
800047b8:	08 9c       	mov	r12,r4
800047ba:	f0 1f 00 44 	mcall	800048c8 <xTaskGenericCreate+0x194>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
800047be:	ea cc ff e8 	sub	r12,r5,-24
800047c2:	f0 1f 00 42 	mcall	800048c8 <xTaskGenericCreate+0x194>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
800047c6:	8b 45       	st.w	r5[0x10],r5

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
800047c8:	ee 07 11 08 	rsub	r7,r7,8
800047cc:	8b 67       	st.w	r5[0x18],r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
800047ce:	8b 95       	st.w	r5[0x24],r5
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
800047d0:	00 9a       	mov	r10,r0
800047d2:	40 0b       	lddsp	r11,sp[0x0]
800047d4:	0c 9c       	mov	r12,r6
800047d6:	f0 1f 00 3e 	mcall	800048cc <xTaskGenericCreate+0x198>
800047da:	8b 0c       	st.w	r5[0x0],r12
		if( ( void * ) pxCreatedTask != NULL )
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
800047dc:	58 02       	cp.w	r2,0
800047de:	e5 f5 1a 00 	st.wne	r2[0x0],r5
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
800047e2:	f0 1f 00 3c 	mcall	800048d0 <xTaskGenericCreate+0x19c>
		{
			uxCurrentNumberOfTasks++;
800047e6:	4b c8       	lddpc	r8,800048d4 <xTaskGenericCreate+0x1a0>
800047e8:	70 09       	ld.w	r9,r8[0x0]
800047ea:	2f f9       	sub	r9,-1
800047ec:	91 09       	st.w	r8[0x0],r9
			if( pxCurrentTCB == NULL )
800047ee:	4b b8       	lddpc	r8,800048d8 <xTaskGenericCreate+0x1a4>
800047f0:	70 08       	ld.w	r8,r8[0x0]
800047f2:	58 08       	cp.w	r8,0
800047f4:	c2 61       	brne	80004840 <xTaskGenericCreate+0x10c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
800047f6:	4b 98       	lddpc	r8,800048d8 <xTaskGenericCreate+0x1a4>
800047f8:	91 05       	st.w	r8[0x0],r5

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
800047fa:	4b 78       	lddpc	r8,800048d4 <xTaskGenericCreate+0x1a0>
800047fc:	70 08       	ld.w	r8,r8[0x0]
800047fe:	58 18       	cp.w	r8,1
80004800:	c2 b1       	brne	80004856 <xTaskGenericCreate+0x122>
80004802:	4b 77       	lddpc	r7,800048dc <xTaskGenericCreate+0x1a8>

/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
80004804:	ee c6 ff 60 	sub	r6,r7,-160
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
80004808:	0e 9c       	mov	r12,r7
8000480a:	f0 1f 00 36 	mcall	800048e0 <xTaskGenericCreate+0x1ac>
8000480e:	2e c7       	sub	r7,-20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
80004810:	0c 37       	cp.w	r7,r6
80004812:	cf b1       	brne	80004808 <xTaskGenericCreate+0xd4>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
80004814:	4b 47       	lddpc	r7,800048e4 <xTaskGenericCreate+0x1b0>
80004816:	0e 9c       	mov	r12,r7
80004818:	f0 1f 00 32 	mcall	800048e0 <xTaskGenericCreate+0x1ac>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
8000481c:	4b 36       	lddpc	r6,800048e8 <xTaskGenericCreate+0x1b4>
8000481e:	0c 9c       	mov	r12,r6
80004820:	f0 1f 00 30 	mcall	800048e0 <xTaskGenericCreate+0x1ac>
	vListInitialise( ( xList * ) &xPendingReadyList );
80004824:	4b 2c       	lddpc	r12,800048ec <xTaskGenericCreate+0x1b8>
80004826:	f0 1f 00 2f 	mcall	800048e0 <xTaskGenericCreate+0x1ac>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
8000482a:	4b 2c       	lddpc	r12,800048f0 <xTaskGenericCreate+0x1bc>
8000482c:	f0 1f 00 2d 	mcall	800048e0 <xTaskGenericCreate+0x1ac>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
80004830:	4b 1c       	lddpc	r12,800048f4 <xTaskGenericCreate+0x1c0>
80004832:	f0 1f 00 2c 	mcall	800048e0 <xTaskGenericCreate+0x1ac>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80004836:	4b 18       	lddpc	r8,800048f8 <xTaskGenericCreate+0x1c4>
80004838:	91 07       	st.w	r8[0x0],r7
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
8000483a:	4b 18       	lddpc	r8,800048fc <xTaskGenericCreate+0x1c8>
8000483c:	91 06       	st.w	r8[0x0],r6
8000483e:	c0 c8       	rjmp	80004856 <xTaskGenericCreate+0x122>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80004840:	4b 08       	lddpc	r8,80004900 <xTaskGenericCreate+0x1cc>
80004842:	70 08       	ld.w	r8,r8[0x0]
80004844:	58 08       	cp.w	r8,0
80004846:	c0 81       	brne	80004856 <xTaskGenericCreate+0x122>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80004848:	4a 48       	lddpc	r8,800048d8 <xTaskGenericCreate+0x1a4>
8000484a:	70 08       	ld.w	r8,r8[0x0]
8000484c:	70 b8       	ld.w	r8,r8[0x2c]
8000484e:	10 33       	cp.w	r3,r8
80004850:	c0 33       	brcs	80004856 <xTaskGenericCreate+0x122>
					{
						pxCurrentTCB = pxNewTCB;
80004852:	4a 28       	lddpc	r8,800048d8 <xTaskGenericCreate+0x1a4>
80004854:	91 05       	st.w	r8[0x0],r5
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
80004856:	6a b8       	ld.w	r8,r5[0x2c]
80004858:	4a b9       	lddpc	r9,80004904 <xTaskGenericCreate+0x1d0>
8000485a:	72 09       	ld.w	r9,r9[0x0]
8000485c:	12 38       	cp.w	r8,r9
8000485e:	e0 88 00 04 	brls	80004866 <xTaskGenericCreate+0x132>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
80004862:	4a 99       	lddpc	r9,80004904 <xTaskGenericCreate+0x1d0>
80004864:	93 08       	st.w	r9[0x0],r8
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
80004866:	4a 98       	lddpc	r8,80004908 <xTaskGenericCreate+0x1d4>
80004868:	70 09       	ld.w	r9,r8[0x0]
8000486a:	2f f9       	sub	r9,-1
8000486c:	91 09       	st.w	r8[0x0],r9

			prvAddTaskToReadyQueue( pxNewTCB );
8000486e:	6a b8       	ld.w	r8,r5[0x2c]
80004870:	4a 79       	lddpc	r9,8000490c <xTaskGenericCreate+0x1d8>
80004872:	72 09       	ld.w	r9,r9[0x0]
80004874:	12 38       	cp.w	r8,r9
80004876:	e0 88 00 04 	brls	8000487e <xTaskGenericCreate+0x14a>
8000487a:	4a 59       	lddpc	r9,8000490c <xTaskGenericCreate+0x1d8>
8000487c:	93 08       	st.w	r9[0x0],r8
8000487e:	6a bc       	ld.w	r12,r5[0x2c]
80004880:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80004884:	08 9b       	mov	r11,r4
80004886:	49 68       	lddpc	r8,800048dc <xTaskGenericCreate+0x1a8>
80004888:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
8000488c:	f0 1f 00 21 	mcall	80004910 <xTaskGenericCreate+0x1dc>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
80004890:	f0 1f 00 21 	mcall	80004914 <xTaskGenericCreate+0x1e0>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
80004894:	49 b8       	lddpc	r8,80004900 <xTaskGenericCreate+0x1cc>
80004896:	70 08       	ld.w	r8,r8[0x0]
80004898:	58 08       	cp.w	r8,0
8000489a:	c0 a0       	breq	800048ae <xTaskGenericCreate+0x17a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
8000489c:	48 f8       	lddpc	r8,800048d8 <xTaskGenericCreate+0x1a4>
8000489e:	70 08       	ld.w	r8,r8[0x0]
800048a0:	70 b8       	ld.w	r8,r8[0x2c]
800048a2:	10 33       	cp.w	r3,r8
800048a4:	e0 88 00 05 	brls	800048ae <xTaskGenericCreate+0x17a>
			{
				portYIELD_WITHIN_API();
800048a8:	d7 33       	scall
800048aa:	30 1c       	mov	r12,1
800048ac:	c0 28       	rjmp	800048b0 <xTaskGenericCreate+0x17c>
800048ae:	30 1c       	mov	r12,1
			}
		}
	}

	return xReturn;
}
800048b0:	2f fd       	sub	sp,-4
800048b2:	d8 32       	popm	r0-r7,pc
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
800048b4:	99 c6       	st.w	r12[0x30],r6
800048b6:	c6 1b       	rjmp	80004778 <xTaskGenericCreate+0x44>
800048b8:	80 00       	ld.sh	r0,r0[0x0]
800048ba:	43 60       	lddsp	r0,sp[0xd8]
800048bc:	80 00       	ld.sh	r0,r0[0x0]
800048be:	43 38       	lddsp	r8,sp[0xcc]
800048c0:	80 00       	ld.sh	r0,r0[0x0]
800048c2:	4f c8       	lddpc	r8,80004ab0 <main+0x18>
800048c4:	80 00       	ld.sh	r0,r0[0x0]
800048c6:	51 18       	stdsp	sp[0x44],r8
800048c8:	80 00       	ld.sh	r0,r0[0x0]
800048ca:	40 48       	lddsp	r8,sp[0x10]
800048cc:	80 00       	ld.sh	r0,r0[0x0]
800048ce:	40 c4       	lddsp	r4,sp[0x30]
800048d0:	80 00       	ld.sh	r0,r0[0x0]
800048d2:	41 58       	lddsp	r8,sp[0x54]
800048d4:	00 00       	add	r0,r0
800048d6:	09 b8       	ld.ub	r8,r4[0x3]
800048d8:	00 00       	add	r0,r0
800048da:	09 6c       	ld.uh	r12,--r4
800048dc:	00 00       	add	r0,r0
800048de:	08 b8       	st.h	r4++,r8
800048e0:	80 00       	ld.sh	r0,r0[0x0]
800048e2:	40 34       	lddsp	r4,sp[0xc]
800048e4:	00 00       	add	r0,r0
800048e6:	09 84       	ld.ub	r4,r4[0x0]
800048e8:	00 00       	add	r0,r0
800048ea:	09 a0       	ld.ub	r0,r4[0x2]
800048ec:	00 00       	add	r0,r0
800048ee:	09 70       	ld.ub	r0,--r4
800048f0:	00 00       	add	r0,r0
800048f2:	09 58       	ld.sh	r8,--r4
800048f4:	00 00       	add	r0,r0
800048f6:	09 c0       	ld.ub	r0,r4[0x4]
800048f8:	00 00       	add	r0,r0
800048fa:	08 a4       	st.w	r4++,r4
800048fc:	00 00       	add	r0,r0
800048fe:	08 b4       	st.h	r4++,r4
80004900:	00 00       	add	r0,r0
80004902:	08 a8       	st.w	r4++,r8
80004904:	00 00       	add	r0,r0
80004906:	08 a0       	st.w	r4++,r0
80004908:	00 00       	add	r0,r0
8000490a:	09 b4       	ld.ub	r4,r4[0x3]
8000490c:	00 00       	add	r0,r0
8000490e:	09 d4       	ld.ub	r4,r4[0x5]
80004910:	80 00       	ld.sh	r0,r0[0x0]
80004912:	40 4e       	lddsp	lr,sp[0x10]
80004914:	80 00       	ld.sh	r0,r0[0x0]
80004916:	42 64       	lddsp	r4,sp[0x98]

80004918 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
80004918:	d4 01       	pushm	lr
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
8000491a:	30 09       	mov	r9,0
8000491c:	1a d9       	st.w	--sp,r9
8000491e:	1a d9       	st.w	--sp,r9
80004920:	1a d9       	st.w	--sp,r9
80004922:	12 98       	mov	r8,r9
80004924:	e0 6a 01 00 	mov	r10,256
80004928:	48 9b       	lddpc	r11,8000494c <vTaskStartScheduler+0x34>
8000492a:	48 ac       	lddpc	r12,80004950 <vTaskStartScheduler+0x38>
8000492c:	f0 1f 00 0a 	mcall	80004954 <vTaskStartScheduler+0x3c>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
80004930:	2f dd       	sub	sp,-12
80004932:	58 1c       	cp.w	r12,1
80004934:	c0 a1       	brne	80004948 <vTaskStartScheduler+0x30>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
80004936:	d3 03       	ssrf	0x10

		xSchedulerRunning = pdTRUE;
80004938:	30 19       	mov	r9,1
8000493a:	48 88       	lddpc	r8,80004958 <vTaskStartScheduler+0x40>
8000493c:	91 09       	st.w	r8[0x0],r9
		xTickCount = ( portTickType ) 0;
8000493e:	30 09       	mov	r9,0
80004940:	48 78       	lddpc	r8,8000495c <vTaskStartScheduler+0x44>
80004942:	91 09       	st.w	r8[0x0],r9
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
80004944:	f0 1f 00 07 	mcall	80004960 <vTaskStartScheduler+0x48>
80004948:	d8 02       	popm	pc
8000494a:	00 00       	add	r0,r0
8000494c:	80 00       	ld.sh	r0,r0[0x0]
8000494e:	5d 08       	ror	r8
80004950:	80 00       	ld.sh	r0,r0[0x0]
80004952:	46 b4       	lddsp	r4,sp[0x1ac]
80004954:	80 00       	ld.sh	r0,r0[0x0]
80004956:	47 34       	lddsp	r4,sp[0x1cc]
80004958:	00 00       	add	r0,r0
8000495a:	08 a8       	st.w	r4++,r8
8000495c:	00 00       	add	r0,r0
8000495e:	09 98       	ld.ub	r8,r4[0x1]
80004960:	80 00       	ld.sh	r0,r0[0x0]
80004962:	41 68       	lddsp	r8,sp[0x58]

80004964 <vCpuWork>:
		gpio_set_gpio_pin(RESPONSE_C);
	}
	
}

static void vCpuWork(void *pvParameters){
80004964:	eb cd 40 c0 	pushm	r6-r7,lr
80004968:	30 08       	mov	r8,0
	{
		for(i=0; i<1000000; i++)
		{
			dummy = 2.5 * i; //not important
		}
		gpio_toggle_pin(LED0_GPIO);
8000496a:	32 36       	mov	r6,35
8000496c:	10 97       	mov	r7,r8
8000496e:	c0 28       	rjmp	80004972 <vCpuWork+0xe>
static void vCpuWork(void *pvParameters){
	int i;
	double dummy;
	while(1)
	{
		for(i=0; i<1000000; i++)
80004970:	2f f8       	sub	r8,-1
80004972:	ee 58 42 3f 	cp.w	r8,999999
80004976:	fe 9a ff fd 	brle	80004970 <vCpuWork+0xc>
		{
			dummy = 2.5 * i; //not important
		}
		gpio_toggle_pin(LED0_GPIO);
8000497a:	0c 9c       	mov	r12,r6
8000497c:	f0 1f 00 02 	mcall	80004984 <vCpuWork+0x20>
80004980:	0e 98       	mov	r8,r7
80004982:	cf 8b       	rjmp	80004972 <vCpuWork+0xe>
80004984:	80 00       	ld.sh	r0,r0[0x0]
80004986:	22 22       	sub	r2,34

80004988 <vtaskC>:
		gpio_set_gpio_pin(RESPONSE_B);
	}
	
}

static void vtaskC(void *pvParameters){
80004988:	d4 21       	pushm	r4-r7,lr
	while(1){
		while (gpio_get_pin_value(TEST_C))vTaskDelay(5/portTICK_RATE_MS);
8000498a:	31 b7       	mov	r7,27
8000498c:	30 56       	mov	r6,5
		
		gpio_clr_gpio_pin(RESPONSE_C);
8000498e:	32 05       	mov	r5,32
		vTaskDelay(1/portTICK_RATE_MS);
80004990:	30 14       	mov	r4,1
80004992:	c0 48       	rjmp	8000499a <vtaskC+0x12>
	
}

static void vtaskC(void *pvParameters){
	while(1){
		while (gpio_get_pin_value(TEST_C))vTaskDelay(5/portTICK_RATE_MS);
80004994:	0c 9c       	mov	r12,r6
80004996:	f0 1f 00 09 	mcall	800049b8 <vtaskC+0x30>
8000499a:	0e 9c       	mov	r12,r7
8000499c:	f0 1f 00 08 	mcall	800049bc <vtaskC+0x34>
800049a0:	cf a1       	brne	80004994 <vtaskC+0xc>
		
		gpio_clr_gpio_pin(RESPONSE_C);
800049a2:	0a 9c       	mov	r12,r5
800049a4:	f0 1f 00 07 	mcall	800049c0 <vtaskC+0x38>
		vTaskDelay(1/portTICK_RATE_MS);
800049a8:	08 9c       	mov	r12,r4
800049aa:	f0 1f 00 04 	mcall	800049b8 <vtaskC+0x30>
		gpio_set_gpio_pin(RESPONSE_C);
800049ae:	0a 9c       	mov	r12,r5
800049b0:	f0 1f 00 05 	mcall	800049c4 <vtaskC+0x3c>
800049b4:	cf 3b       	rjmp	8000499a <vtaskC+0x12>
800049b6:	00 00       	add	r0,r0
800049b8:	80 00       	ld.sh	r0,r0[0x0]
800049ba:	46 6c       	lddsp	r12,sp[0x198]
800049bc:	80 00       	ld.sh	r0,r0[0x0]
800049be:	21 d4       	sub	r4,29
800049c0:	80 00       	ld.sh	r0,r0[0x0]
800049c2:	22 06       	sub	r6,32
800049c4:	80 00       	ld.sh	r0,r0[0x0]
800049c6:	21 ea       	sub	r10,30

800049c8 <vtaskB>:

	}
	
}

static void vtaskB(void *pvParameters){
800049c8:	d4 21       	pushm	r4-r7,lr
	while(1){
		while (gpio_get_pin_value(TEST_B))vTaskDelay(5/portTICK_RATE_MS);
800049ca:	31 d7       	mov	r7,29
800049cc:	30 56       	mov	r6,5
		
		gpio_clr_gpio_pin(RESPONSE_B);
800049ce:	31 c5       	mov	r5,28
		vTaskDelay(1/portTICK_RATE_MS);
800049d0:	30 14       	mov	r4,1
800049d2:	c0 48       	rjmp	800049da <vtaskB+0x12>
	
}

static void vtaskB(void *pvParameters){
	while(1){
		while (gpio_get_pin_value(TEST_B))vTaskDelay(5/portTICK_RATE_MS);
800049d4:	0c 9c       	mov	r12,r6
800049d6:	f0 1f 00 09 	mcall	800049f8 <vtaskB+0x30>
800049da:	0e 9c       	mov	r12,r7
800049dc:	f0 1f 00 08 	mcall	800049fc <vtaskB+0x34>
800049e0:	cf a1       	brne	800049d4 <vtaskB+0xc>
		
		gpio_clr_gpio_pin(RESPONSE_B);
800049e2:	0a 9c       	mov	r12,r5
800049e4:	f0 1f 00 07 	mcall	80004a00 <vtaskB+0x38>
		vTaskDelay(1/portTICK_RATE_MS);
800049e8:	08 9c       	mov	r12,r4
800049ea:	f0 1f 00 04 	mcall	800049f8 <vtaskB+0x30>
		gpio_set_gpio_pin(RESPONSE_B);
800049ee:	0a 9c       	mov	r12,r5
800049f0:	f0 1f 00 05 	mcall	80004a04 <vtaskB+0x3c>
800049f4:	cf 3b       	rjmp	800049da <vtaskB+0x12>
800049f6:	00 00       	add	r0,r0
800049f8:	80 00       	ld.sh	r0,r0[0x0]
800049fa:	46 6c       	lddsp	r12,sp[0x198]
800049fc:	80 00       	ld.sh	r0,r0[0x0]
800049fe:	21 d4       	sub	r4,29
80004a00:	80 00       	ld.sh	r0,r0[0x0]
80004a02:	22 06       	sub	r6,32
80004a04:	80 00       	ld.sh	r0,r0[0x0]
80004a06:	21 ea       	sub	r10,30

80004a08 <vtaskA>:
			gpio_toggle_pin(LED1_GPIO);
			vTaskDelay(500/portTICK_RATE_MS);
		}
}*/

static void vtaskA(void *pvParameters){
80004a08:	d4 21       	pushm	r4-r7,lr
	while(1){
		while (gpio_get_pin_value(TEST_A))vTaskDelay(5/portTICK_RATE_MS);
80004a0a:	31 f7       	mov	r7,31
80004a0c:	30 56       	mov	r6,5
	
		gpio_clr_gpio_pin(RESPONSE_A);
80004a0e:	31 e5       	mov	r5,30
		vTaskDelay(1/portTICK_RATE_MS);
80004a10:	30 14       	mov	r4,1
80004a12:	c0 48       	rjmp	80004a1a <vtaskA+0x12>
		}
}*/

static void vtaskA(void *pvParameters){
	while(1){
		while (gpio_get_pin_value(TEST_A))vTaskDelay(5/portTICK_RATE_MS);
80004a14:	0c 9c       	mov	r12,r6
80004a16:	f0 1f 00 09 	mcall	80004a38 <vtaskA+0x30>
80004a1a:	0e 9c       	mov	r12,r7
80004a1c:	f0 1f 00 08 	mcall	80004a3c <vtaskA+0x34>
80004a20:	cf a1       	brne	80004a14 <vtaskA+0xc>
	
		gpio_clr_gpio_pin(RESPONSE_A);
80004a22:	0a 9c       	mov	r12,r5
80004a24:	f0 1f 00 07 	mcall	80004a40 <vtaskA+0x38>
		vTaskDelay(1/portTICK_RATE_MS);
80004a28:	08 9c       	mov	r12,r4
80004a2a:	f0 1f 00 04 	mcall	80004a38 <vtaskA+0x30>
		gpio_set_gpio_pin(RESPONSE_A);
80004a2e:	0a 9c       	mov	r12,r5
80004a30:	f0 1f 00 05 	mcall	80004a44 <vtaskA+0x3c>
80004a34:	cf 3b       	rjmp	80004a1a <vtaskA+0x12>
80004a36:	00 00       	add	r0,r0
80004a38:	80 00       	ld.sh	r0,r0[0x0]
80004a3a:	46 6c       	lddsp	r12,sp[0x198]
80004a3c:	80 00       	ld.sh	r0,r0[0x0]
80004a3e:	21 d4       	sub	r4,29
80004a40:	80 00       	ld.sh	r0,r0[0x0]
80004a42:	22 06       	sub	r6,32
80004a44:	80 00       	ld.sh	r0,r0[0x0]
80004a46:	21 ea       	sub	r10,30

80004a48 <init>:
#define RESPONSE_B AVR32_PIN_PA28
#define TEST_C AVR32_PIN_PA27
#define RESPONSE_C AVR32_PIN_PB00

void init()
{
80004a48:	eb cd 40 80 	pushm	r7,lr
	// board init
	board_init();
80004a4c:	f0 1f 00 0e 	mcall	80004a84 <init+0x3c>
		.dfll_f       = EXAMPLE_TARGET_DFLL_FREQ_HZ,
		.pextra_params = &gc_dfllif_ref_opt
	};
	pcl_configure_clocks(&pcl_dfll_freq_param);
#else
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
80004a50:	30 3a       	mov	r10,3
80004a52:	e0 6b 1b 00 	mov	r11,6912
80004a56:	ea 1b 00 b7 	orh	r11,0xb7
80004a5a:	30 0c       	mov	r12,0
80004a5c:	f0 1f 00 0b 	mcall	80004a88 <init+0x40>
#endif	
	
	// stdio init
	stdio_usb_init(&CONFIG_USART_IF);
80004a60:	fe 7c 1c 00 	mov	r12,-58368
80004a64:	f0 1f 00 0a 	mcall	80004a8c <init+0x44>

	// Specify that stdout and stdin should not be buffered.

#if defined(__GNUC__) && defined(__AVR32__)
	setbuf(stdout, NULL);
80004a68:	48 a7       	lddpc	r7,80004a90 <init+0x48>
80004a6a:	6e 08       	ld.w	r8,r7[0x0]
80004a6c:	30 0b       	mov	r11,0
80004a6e:	70 1c       	ld.w	r12,r8[0x4]
80004a70:	f0 1f 00 09 	mcall	80004a94 <init+0x4c>
	setbuf(stdin,  NULL);
80004a74:	6e 08       	ld.w	r8,r7[0x0]
80004a76:	30 0b       	mov	r11,0
80004a78:	70 0c       	ld.w	r12,r8[0x0]
80004a7a:	f0 1f 00 07 	mcall	80004a94 <init+0x4c>
#endif
}
80004a7e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a82:	00 00       	add	r0,r0
80004a84:	80 00       	ld.sh	r0,r0[0x0]
80004a86:	20 ec       	sub	r12,14
80004a88:	80 00       	ld.sh	r0,r0[0x0]
80004a8a:	23 b0       	sub	r0,59
80004a8c:	80 00       	ld.sh	r0,r0[0x0]
80004a8e:	3f 5c       	mov	r12,-11
80004a90:	00 00       	add	r0,r0
80004a92:	01 e0       	ld.ub	r0,r0[0x6]
80004a94:	80 00       	ld.sh	r0,r0[0x0]
80004a96:	4f f8       	lddpc	r8,80004c90 <_malloc_r+0xfc>

80004a98 <main>:

/*********************************************************************
Functions
*********************************************************************/
int main()
{
80004a98:	eb cd 40 c0 	pushm	r6-r7,lr
	// initialize
	init();
80004a9c:	f0 1f 00 20 	mcall	80004b1c <main+0x84>
	
	// start code from here
	gpio_set_gpio_pin(RESPONSE_A);
80004aa0:	31 ec       	mov	r12,30
80004aa2:	f0 1f 00 20 	mcall	80004b20 <main+0x88>
	gpio_set_gpio_pin(RESPONSE_B);
80004aa6:	31 cc       	mov	r12,28
80004aa8:	f0 1f 00 1e 	mcall	80004b20 <main+0x88>
	gpio_set_gpio_pin(RESPONSE_C);
80004aac:	32 0c       	mov	r12,32
80004aae:	f0 1f 00 1d 	mcall	80004b20 <main+0x88>
	// start basic task
	xTaskCreate( vtaskA, (signed char * ) "BASIC", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
80004ab2:	49 d6       	lddpc	r6,80004b24 <main+0x8c>
80004ab4:	30 07       	mov	r7,0
80004ab6:	1a d7       	st.w	--sp,r7
80004ab8:	1a d7       	st.w	--sp,r7
80004aba:	1a d7       	st.w	--sp,r7
80004abc:	30 28       	mov	r8,2
80004abe:	0e 99       	mov	r9,r7
80004ac0:	e0 6a 01 00 	mov	r10,256
80004ac4:	0c 9b       	mov	r11,r6
80004ac6:	49 9c       	lddpc	r12,80004b28 <main+0x90>
80004ac8:	f0 1f 00 19 	mcall	80004b2c <main+0x94>
	xTaskCreate( vtaskB, (signed char * ) "BASIC", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
80004acc:	1a d7       	st.w	--sp,r7
80004ace:	1a d7       	st.w	--sp,r7
80004ad0:	1a d7       	st.w	--sp,r7
80004ad2:	30 28       	mov	r8,2
80004ad4:	0e 99       	mov	r9,r7
80004ad6:	e0 6a 01 00 	mov	r10,256
80004ada:	0c 9b       	mov	r11,r6
80004adc:	49 5c       	lddpc	r12,80004b30 <main+0x98>
80004ade:	f0 1f 00 14 	mcall	80004b2c <main+0x94>
	xTaskCreate( vtaskC, (signed char * ) "BASIC", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
80004ae2:	1a d7       	st.w	--sp,r7
80004ae4:	1a d7       	st.w	--sp,r7
80004ae6:	1a d7       	st.w	--sp,r7
80004ae8:	30 28       	mov	r8,2
80004aea:	0e 99       	mov	r9,r7
80004aec:	e0 6a 01 00 	mov	r10,256
80004af0:	0c 9b       	mov	r11,r6
80004af2:	49 1c       	lddpc	r12,80004b34 <main+0x9c>
80004af4:	f0 1f 00 0e 	mcall	80004b2c <main+0x94>
	xTaskCreate( vCpuWork, (signed char * ) "BASIC", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
80004af8:	2f 7d       	sub	sp,-36
80004afa:	1a d7       	st.w	--sp,r7
80004afc:	1a d7       	st.w	--sp,r7
80004afe:	1a d7       	st.w	--sp,r7
80004b00:	30 18       	mov	r8,1
80004b02:	0e 99       	mov	r9,r7
80004b04:	e0 6a 01 00 	mov	r10,256
80004b08:	0c 9b       	mov	r11,r6
80004b0a:	48 cc       	lddpc	r12,80004b38 <main+0xa0>
80004b0c:	f0 1f 00 08 	mcall	80004b2c <main+0x94>
	// Start the scheduler, anything after this will not run.
	vTaskStartScheduler();
80004b10:	f0 1f 00 0b 	mcall	80004b3c <main+0xa4>
80004b14:	2f dd       	sub	sp,-12
}
80004b16:	0e 9c       	mov	r12,r7
80004b18:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004b1c:	80 00       	ld.sh	r0,r0[0x0]
80004b1e:	4a 48       	lddpc	r8,80004bac <_malloc_r+0x18>
80004b20:	80 00       	ld.sh	r0,r0[0x0]
80004b22:	21 ea       	sub	r10,30
80004b24:	80 00       	ld.sh	r0,r0[0x0]
80004b26:	5d 10       	icall	r0
80004b28:	80 00       	ld.sh	r0,r0[0x0]
80004b2a:	4a 08       	lddpc	r8,80004ba8 <_malloc_r+0x14>
80004b2c:	80 00       	ld.sh	r0,r0[0x0]
80004b2e:	47 34       	lddsp	r4,sp[0x1cc]
80004b30:	80 00       	ld.sh	r0,r0[0x0]
80004b32:	49 c8       	lddpc	r8,80004ba0 <_malloc_r+0xc>
80004b34:	80 00       	ld.sh	r0,r0[0x0]
80004b36:	49 88       	lddpc	r8,80004b94 <_malloc_r>
80004b38:	80 00       	ld.sh	r0,r0[0x0]
80004b3a:	49 64       	lddpc	r4,80004b90 <malloc+0xc>
80004b3c:	80 00       	ld.sh	r0,r0[0x0]
80004b3e:	49 18       	lddpc	r8,80004b80 <free+0x10>

80004b40 <atexit>:
80004b40:	d4 01       	pushm	lr
80004b42:	30 09       	mov	r9,0
80004b44:	18 9b       	mov	r11,r12
80004b46:	12 9a       	mov	r10,r9
80004b48:	12 9c       	mov	r12,r9
80004b4a:	e0 a0 03 37 	rcall	800051b8 <__register_exitproc>
80004b4e:	d8 02       	popm	pc

80004b50 <exit>:
80004b50:	d4 21       	pushm	r4-r7,lr
80004b52:	30 0b       	mov	r11,0
80004b54:	18 97       	mov	r7,r12
80004b56:	e0 a0 03 85 	rcall	80005260 <__call_exitprocs>
80004b5a:	48 58       	lddpc	r8,80004b6c <exit+0x1c>
80004b5c:	70 0c       	ld.w	r12,r8[0x0]
80004b5e:	78 a8       	ld.w	r8,r12[0x28]
80004b60:	58 08       	cp.w	r8,0
80004b62:	c0 20       	breq	80004b66 <exit+0x16>
80004b64:	5d 18       	icall	r8
80004b66:	0e 9c       	mov	r12,r7
80004b68:	e0 a0 02 ed 	rcall	80005142 <_exit>
80004b6c:	80 00       	ld.sh	r0,r0[0x0]
80004b6e:	5d 18       	icall	r8

80004b70 <free>:
80004b70:	d4 01       	pushm	lr
80004b72:	48 48       	lddpc	r8,80004b80 <free+0x10>
80004b74:	18 9b       	mov	r11,r12
80004b76:	70 0c       	ld.w	r12,r8[0x0]
80004b78:	e0 a0 05 5a 	rcall	8000562c <_free_r>
80004b7c:	d8 02       	popm	pc
80004b7e:	d7 03       	nop
80004b80:	00 00       	add	r0,r0
80004b82:	01 e0       	ld.ub	r0,r0[0x6]

80004b84 <malloc>:
80004b84:	d4 01       	pushm	lr
80004b86:	48 38       	lddpc	r8,80004b90 <malloc+0xc>
80004b88:	18 9b       	mov	r11,r12
80004b8a:	70 0c       	ld.w	r12,r8[0x0]
80004b8c:	c0 4c       	rcall	80004b94 <_malloc_r>
80004b8e:	d8 02       	popm	pc
80004b90:	00 00       	add	r0,r0
80004b92:	01 e0       	ld.ub	r0,r0[0x6]

80004b94 <_malloc_r>:
80004b94:	d4 31       	pushm	r0-r7,lr
80004b96:	f6 c8 ff f5 	sub	r8,r11,-11
80004b9a:	18 95       	mov	r5,r12
80004b9c:	10 97       	mov	r7,r8
80004b9e:	e0 17 ff f8 	andl	r7,0xfff8
80004ba2:	59 68       	cp.w	r8,22
80004ba4:	f9 b7 08 10 	movls	r7,16
80004ba8:	16 37       	cp.w	r7,r11
80004baa:	5f 38       	srlo	r8
80004bac:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80004bb0:	c0 50       	breq	80004bba <_malloc_r+0x26>
80004bb2:	30 c8       	mov	r8,12
80004bb4:	99 38       	st.w	r12[0xc],r8
80004bb6:	e0 8f 01 ed 	bral	80004f90 <_malloc_r+0x3fc>
80004bba:	fe b0 fb a7 	rcall	80004308 <__malloc_lock>
80004bbe:	e0 47 01 f7 	cp.w	r7,503
80004bc2:	e0 8b 00 1c 	brhi	80004bfa <_malloc_r+0x66>
80004bc6:	ee 03 16 03 	lsr	r3,r7,0x3
80004bca:	4c c8       	lddpc	r8,80004cf8 <_malloc_r+0x164>
80004bcc:	f0 03 00 38 	add	r8,r8,r3<<0x3
80004bd0:	70 36       	ld.w	r6,r8[0xc]
80004bd2:	10 36       	cp.w	r6,r8
80004bd4:	c0 61       	brne	80004be0 <_malloc_r+0x4c>
80004bd6:	ec c8 ff f8 	sub	r8,r6,-8
80004bda:	70 36       	ld.w	r6,r8[0xc]
80004bdc:	10 36       	cp.w	r6,r8
80004bde:	c0 c0       	breq	80004bf6 <_malloc_r+0x62>
80004be0:	6c 18       	ld.w	r8,r6[0x4]
80004be2:	e0 18 ff fc 	andl	r8,0xfffc
80004be6:	6c 3a       	ld.w	r10,r6[0xc]
80004be8:	ec 08 00 09 	add	r9,r6,r8
80004bec:	0a 9c       	mov	r12,r5
80004bee:	6c 28       	ld.w	r8,r6[0x8]
80004bf0:	95 28       	st.w	r10[0x8],r8
80004bf2:	91 3a       	st.w	r8[0xc],r10
80004bf4:	c4 68       	rjmp	80004c80 <_malloc_r+0xec>
80004bf6:	2f e3       	sub	r3,-2
80004bf8:	c4 c8       	rjmp	80004c90 <_malloc_r+0xfc>
80004bfa:	ee 03 16 09 	lsr	r3,r7,0x9
80004bfe:	c0 41       	brne	80004c06 <_malloc_r+0x72>
80004c00:	ee 03 16 03 	lsr	r3,r7,0x3
80004c04:	c2 68       	rjmp	80004c50 <_malloc_r+0xbc>
80004c06:	58 43       	cp.w	r3,4
80004c08:	e0 8b 00 06 	brhi	80004c14 <_malloc_r+0x80>
80004c0c:	ee 03 16 06 	lsr	r3,r7,0x6
80004c10:	2c 83       	sub	r3,-56
80004c12:	c1 f8       	rjmp	80004c50 <_malloc_r+0xbc>
80004c14:	59 43       	cp.w	r3,20
80004c16:	e0 8b 00 04 	brhi	80004c1e <_malloc_r+0x8a>
80004c1a:	2a 53       	sub	r3,-91
80004c1c:	c1 a8       	rjmp	80004c50 <_malloc_r+0xbc>
80004c1e:	e0 43 00 54 	cp.w	r3,84
80004c22:	e0 8b 00 06 	brhi	80004c2e <_malloc_r+0x9a>
80004c26:	ee 03 16 0c 	lsr	r3,r7,0xc
80004c2a:	29 23       	sub	r3,-110
80004c2c:	c1 28       	rjmp	80004c50 <_malloc_r+0xbc>
80004c2e:	e0 43 01 54 	cp.w	r3,340
80004c32:	e0 8b 00 06 	brhi	80004c3e <_malloc_r+0xaa>
80004c36:	ee 03 16 0f 	lsr	r3,r7,0xf
80004c3a:	28 93       	sub	r3,-119
80004c3c:	c0 a8       	rjmp	80004c50 <_malloc_r+0xbc>
80004c3e:	e0 43 05 54 	cp.w	r3,1364
80004c42:	e0 88 00 04 	brls	80004c4a <_malloc_r+0xb6>
80004c46:	37 e3       	mov	r3,126
80004c48:	c0 48       	rjmp	80004c50 <_malloc_r+0xbc>
80004c4a:	ee 03 16 12 	lsr	r3,r7,0x12
80004c4e:	28 43       	sub	r3,-124
80004c50:	4a aa       	lddpc	r10,80004cf8 <_malloc_r+0x164>
80004c52:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80004c56:	74 36       	ld.w	r6,r10[0xc]
80004c58:	c1 98       	rjmp	80004c8a <_malloc_r+0xf6>
80004c5a:	6c 19       	ld.w	r9,r6[0x4]
80004c5c:	e0 19 ff fc 	andl	r9,0xfffc
80004c60:	f2 07 01 0b 	sub	r11,r9,r7
80004c64:	58 fb       	cp.w	r11,15
80004c66:	e0 8a 00 04 	brle	80004c6e <_malloc_r+0xda>
80004c6a:	20 13       	sub	r3,1
80004c6c:	c1 18       	rjmp	80004c8e <_malloc_r+0xfa>
80004c6e:	6c 38       	ld.w	r8,r6[0xc]
80004c70:	58 0b       	cp.w	r11,0
80004c72:	c0 b5       	brlt	80004c88 <_malloc_r+0xf4>
80004c74:	6c 2a       	ld.w	r10,r6[0x8]
80004c76:	ec 09 00 09 	add	r9,r6,r9
80004c7a:	0a 9c       	mov	r12,r5
80004c7c:	91 2a       	st.w	r8[0x8],r10
80004c7e:	95 38       	st.w	r10[0xc],r8
80004c80:	72 18       	ld.w	r8,r9[0x4]
80004c82:	a1 a8       	sbr	r8,0x0
80004c84:	93 18       	st.w	r9[0x4],r8
80004c86:	cb a8       	rjmp	80004dfa <_malloc_r+0x266>
80004c88:	10 96       	mov	r6,r8
80004c8a:	14 36       	cp.w	r6,r10
80004c8c:	ce 71       	brne	80004c5a <_malloc_r+0xc6>
80004c8e:	2f f3       	sub	r3,-1
80004c90:	49 aa       	lddpc	r10,80004cf8 <_malloc_r+0x164>
80004c92:	f4 cc ff f8 	sub	r12,r10,-8
80004c96:	78 26       	ld.w	r6,r12[0x8]
80004c98:	18 36       	cp.w	r6,r12
80004c9a:	c6 c0       	breq	80004d72 <_malloc_r+0x1de>
80004c9c:	6c 19       	ld.w	r9,r6[0x4]
80004c9e:	e0 19 ff fc 	andl	r9,0xfffc
80004ca2:	f2 07 01 08 	sub	r8,r9,r7
80004ca6:	58 f8       	cp.w	r8,15
80004ca8:	e0 89 00 8e 	brgt	80004dc4 <_malloc_r+0x230>
80004cac:	99 3c       	st.w	r12[0xc],r12
80004cae:	99 2c       	st.w	r12[0x8],r12
80004cb0:	58 08       	cp.w	r8,0
80004cb2:	c0 55       	brlt	80004cbc <_malloc_r+0x128>
80004cb4:	ec 09 00 09 	add	r9,r6,r9
80004cb8:	0a 9c       	mov	r12,r5
80004cba:	ce 3b       	rjmp	80004c80 <_malloc_r+0xec>
80004cbc:	e0 49 01 ff 	cp.w	r9,511
80004cc0:	e0 8b 00 13 	brhi	80004ce6 <_malloc_r+0x152>
80004cc4:	a3 99       	lsr	r9,0x3
80004cc6:	f4 09 00 38 	add	r8,r10,r9<<0x3
80004cca:	70 2b       	ld.w	r11,r8[0x8]
80004ccc:	8d 38       	st.w	r6[0xc],r8
80004cce:	8d 2b       	st.w	r6[0x8],r11
80004cd0:	97 36       	st.w	r11[0xc],r6
80004cd2:	91 26       	st.w	r8[0x8],r6
80004cd4:	a3 49       	asr	r9,0x2
80004cd6:	74 18       	ld.w	r8,r10[0x4]
80004cd8:	30 1b       	mov	r11,1
80004cda:	f6 09 09 49 	lsl	r9,r11,r9
80004cde:	f1 e9 10 09 	or	r9,r8,r9
80004ce2:	95 19       	st.w	r10[0x4],r9
80004ce4:	c4 78       	rjmp	80004d72 <_malloc_r+0x1de>
80004ce6:	f2 0a 16 09 	lsr	r10,r9,0x9
80004cea:	58 4a       	cp.w	r10,4
80004cec:	e0 8b 00 08 	brhi	80004cfc <_malloc_r+0x168>
80004cf0:	f2 0a 16 06 	lsr	r10,r9,0x6
80004cf4:	2c 8a       	sub	r10,-56
80004cf6:	c2 18       	rjmp	80004d38 <_malloc_r+0x1a4>
80004cf8:	00 00       	add	r0,r0
80004cfa:	01 e4       	ld.ub	r4,r0[0x6]
80004cfc:	59 4a       	cp.w	r10,20
80004cfe:	e0 8b 00 04 	brhi	80004d06 <_malloc_r+0x172>
80004d02:	2a 5a       	sub	r10,-91
80004d04:	c1 a8       	rjmp	80004d38 <_malloc_r+0x1a4>
80004d06:	e0 4a 00 54 	cp.w	r10,84
80004d0a:	e0 8b 00 06 	brhi	80004d16 <_malloc_r+0x182>
80004d0e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004d12:	29 2a       	sub	r10,-110
80004d14:	c1 28       	rjmp	80004d38 <_malloc_r+0x1a4>
80004d16:	e0 4a 01 54 	cp.w	r10,340
80004d1a:	e0 8b 00 06 	brhi	80004d26 <_malloc_r+0x192>
80004d1e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004d22:	28 9a       	sub	r10,-119
80004d24:	c0 a8       	rjmp	80004d38 <_malloc_r+0x1a4>
80004d26:	e0 4a 05 54 	cp.w	r10,1364
80004d2a:	e0 88 00 04 	brls	80004d32 <_malloc_r+0x19e>
80004d2e:	37 ea       	mov	r10,126
80004d30:	c0 48       	rjmp	80004d38 <_malloc_r+0x1a4>
80004d32:	f2 0a 16 12 	lsr	r10,r9,0x12
80004d36:	28 4a       	sub	r10,-124
80004d38:	4c 8b       	lddpc	r11,80004e58 <_malloc_r+0x2c4>
80004d3a:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004d3e:	68 28       	ld.w	r8,r4[0x8]
80004d40:	08 38       	cp.w	r8,r4
80004d42:	c0 e1       	brne	80004d5e <_malloc_r+0x1ca>
80004d44:	76 19       	ld.w	r9,r11[0x4]
80004d46:	a3 4a       	asr	r10,0x2
80004d48:	30 1e       	mov	lr,1
80004d4a:	fc 0a 09 4a 	lsl	r10,lr,r10
80004d4e:	f3 ea 10 0a 	or	r10,r9,r10
80004d52:	10 99       	mov	r9,r8
80004d54:	97 1a       	st.w	r11[0x4],r10
80004d56:	c0 a8       	rjmp	80004d6a <_malloc_r+0x1d6>
80004d58:	70 28       	ld.w	r8,r8[0x8]
80004d5a:	08 38       	cp.w	r8,r4
80004d5c:	c0 60       	breq	80004d68 <_malloc_r+0x1d4>
80004d5e:	70 1a       	ld.w	r10,r8[0x4]
80004d60:	e0 1a ff fc 	andl	r10,0xfffc
80004d64:	14 39       	cp.w	r9,r10
80004d66:	cf 93       	brcs	80004d58 <_malloc_r+0x1c4>
80004d68:	70 39       	ld.w	r9,r8[0xc]
80004d6a:	8d 39       	st.w	r6[0xc],r9
80004d6c:	8d 28       	st.w	r6[0x8],r8
80004d6e:	91 36       	st.w	r8[0xc],r6
80004d70:	93 26       	st.w	r9[0x8],r6
80004d72:	e6 08 14 02 	asr	r8,r3,0x2
80004d76:	30 1b       	mov	r11,1
80004d78:	4b 84       	lddpc	r4,80004e58 <_malloc_r+0x2c4>
80004d7a:	f6 08 09 4b 	lsl	r11,r11,r8
80004d7e:	68 18       	ld.w	r8,r4[0x4]
80004d80:	10 3b       	cp.w	r11,r8
80004d82:	e0 8b 00 6d 	brhi	80004e5c <_malloc_r+0x2c8>
80004d86:	f7 e8 00 09 	and	r9,r11,r8
80004d8a:	c0 b1       	brne	80004da0 <_malloc_r+0x20c>
80004d8c:	e0 13 ff fc 	andl	r3,0xfffc
80004d90:	a1 7b       	lsl	r11,0x1
80004d92:	2f c3       	sub	r3,-4
80004d94:	c0 38       	rjmp	80004d9a <_malloc_r+0x206>
80004d96:	2f c3       	sub	r3,-4
80004d98:	a1 7b       	lsl	r11,0x1
80004d9a:	f7 e8 00 09 	and	r9,r11,r8
80004d9e:	cf c0       	breq	80004d96 <_malloc_r+0x202>
80004da0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80004da4:	06 92       	mov	r2,r3
80004da6:	1c 91       	mov	r1,lr
80004da8:	62 36       	ld.w	r6,r1[0xc]
80004daa:	c2 e8       	rjmp	80004e06 <_malloc_r+0x272>
80004dac:	6c 1a       	ld.w	r10,r6[0x4]
80004dae:	e0 1a ff fc 	andl	r10,0xfffc
80004db2:	f4 07 01 08 	sub	r8,r10,r7
80004db6:	58 f8       	cp.w	r8,15
80004db8:	e0 8a 00 15 	brle	80004de2 <_malloc_r+0x24e>
80004dbc:	6c 3a       	ld.w	r10,r6[0xc]
80004dbe:	6c 29       	ld.w	r9,r6[0x8]
80004dc0:	95 29       	st.w	r10[0x8],r9
80004dc2:	93 3a       	st.w	r9[0xc],r10
80004dc4:	0e 99       	mov	r9,r7
80004dc6:	ec 07 00 07 	add	r7,r6,r7
80004dca:	a1 a9       	sbr	r9,0x0
80004dcc:	99 37       	st.w	r12[0xc],r7
80004dce:	99 27       	st.w	r12[0x8],r7
80004dd0:	8d 19       	st.w	r6[0x4],r9
80004dd2:	ee 08 09 08 	st.w	r7[r8],r8
80004dd6:	8f 2c       	st.w	r7[0x8],r12
80004dd8:	8f 3c       	st.w	r7[0xc],r12
80004dda:	a1 a8       	sbr	r8,0x0
80004ddc:	0a 9c       	mov	r12,r5
80004dde:	8f 18       	st.w	r7[0x4],r8
80004de0:	c0 d8       	rjmp	80004dfa <_malloc_r+0x266>
80004de2:	6c 39       	ld.w	r9,r6[0xc]
80004de4:	58 08       	cp.w	r8,0
80004de6:	c0 f5       	brlt	80004e04 <_malloc_r+0x270>
80004de8:	ec 0a 00 0a 	add	r10,r6,r10
80004dec:	74 18       	ld.w	r8,r10[0x4]
80004dee:	a1 a8       	sbr	r8,0x0
80004df0:	0a 9c       	mov	r12,r5
80004df2:	95 18       	st.w	r10[0x4],r8
80004df4:	6c 28       	ld.w	r8,r6[0x8]
80004df6:	93 28       	st.w	r9[0x8],r8
80004df8:	91 39       	st.w	r8[0xc],r9
80004dfa:	fe b0 fa 8d 	rcall	80004314 <__malloc_unlock>
80004dfe:	ec cc ff f8 	sub	r12,r6,-8
80004e02:	d8 32       	popm	r0-r7,pc
80004e04:	12 96       	mov	r6,r9
80004e06:	02 36       	cp.w	r6,r1
80004e08:	cd 21       	brne	80004dac <_malloc_r+0x218>
80004e0a:	2f f2       	sub	r2,-1
80004e0c:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80004e10:	c0 30       	breq	80004e16 <_malloc_r+0x282>
80004e12:	2f 81       	sub	r1,-8
80004e14:	cc ab       	rjmp	80004da8 <_malloc_r+0x214>
80004e16:	1c 98       	mov	r8,lr
80004e18:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004e1c:	c0 81       	brne	80004e2c <_malloc_r+0x298>
80004e1e:	68 19       	ld.w	r9,r4[0x4]
80004e20:	f6 08 11 ff 	rsub	r8,r11,-1
80004e24:	f3 e8 00 08 	and	r8,r9,r8
80004e28:	89 18       	st.w	r4[0x4],r8
80004e2a:	c0 78       	rjmp	80004e38 <_malloc_r+0x2a4>
80004e2c:	f0 c9 00 08 	sub	r9,r8,8
80004e30:	20 13       	sub	r3,1
80004e32:	70 08       	ld.w	r8,r8[0x0]
80004e34:	12 38       	cp.w	r8,r9
80004e36:	cf 10       	breq	80004e18 <_malloc_r+0x284>
80004e38:	a1 7b       	lsl	r11,0x1
80004e3a:	68 18       	ld.w	r8,r4[0x4]
80004e3c:	10 3b       	cp.w	r11,r8
80004e3e:	e0 8b 00 0f 	brhi	80004e5c <_malloc_r+0x2c8>
80004e42:	58 0b       	cp.w	r11,0
80004e44:	c0 c0       	breq	80004e5c <_malloc_r+0x2c8>
80004e46:	04 93       	mov	r3,r2
80004e48:	c0 38       	rjmp	80004e4e <_malloc_r+0x2ba>
80004e4a:	2f c3       	sub	r3,-4
80004e4c:	a1 7b       	lsl	r11,0x1
80004e4e:	f7 e8 00 09 	and	r9,r11,r8
80004e52:	ca 71       	brne	80004da0 <_malloc_r+0x20c>
80004e54:	cf bb       	rjmp	80004e4a <_malloc_r+0x2b6>
80004e56:	d7 03       	nop
80004e58:	00 00       	add	r0,r0
80004e5a:	01 e4       	ld.ub	r4,r0[0x6]
80004e5c:	68 23       	ld.w	r3,r4[0x8]
80004e5e:	66 12       	ld.w	r2,r3[0x4]
80004e60:	e0 12 ff fc 	andl	r2,0xfffc
80004e64:	0e 32       	cp.w	r2,r7
80004e66:	5f 39       	srlo	r9
80004e68:	e4 07 01 08 	sub	r8,r2,r7
80004e6c:	58 f8       	cp.w	r8,15
80004e6e:	5f aa       	srle	r10
80004e70:	f5 e9 10 09 	or	r9,r10,r9
80004e74:	e0 80 00 9a 	breq	80004fa8 <_malloc_r+0x414>
80004e78:	4c 78       	lddpc	r8,80004f94 <_malloc_r+0x400>
80004e7a:	70 01       	ld.w	r1,r8[0x0]
80004e7c:	4c 78       	lddpc	r8,80004f98 <_malloc_r+0x404>
80004e7e:	2f 01       	sub	r1,-16
80004e80:	70 08       	ld.w	r8,r8[0x0]
80004e82:	0e 01       	add	r1,r7
80004e84:	5b f8       	cp.w	r8,-1
80004e86:	c0 40       	breq	80004e8e <_malloc_r+0x2fa>
80004e88:	28 11       	sub	r1,-127
80004e8a:	e0 11 ff 80 	andl	r1,0xff80
80004e8e:	02 9b       	mov	r11,r1
80004e90:	0a 9c       	mov	r12,r5
80004e92:	ca 3c       	rcall	80004fd8 <_sbrk_r>
80004e94:	18 96       	mov	r6,r12
80004e96:	5b fc       	cp.w	r12,-1
80004e98:	c6 d0       	breq	80004f72 <_malloc_r+0x3de>
80004e9a:	e6 02 00 08 	add	r8,r3,r2
80004e9e:	10 3c       	cp.w	r12,r8
80004ea0:	c0 32       	brcc	80004ea6 <_malloc_r+0x312>
80004ea2:	08 33       	cp.w	r3,r4
80004ea4:	c6 71       	brne	80004f72 <_malloc_r+0x3de>
80004ea6:	4b ea       	lddpc	r10,80004f9c <_malloc_r+0x408>
80004ea8:	74 09       	ld.w	r9,r10[0x0]
80004eaa:	e2 09 00 09 	add	r9,r1,r9
80004eae:	95 09       	st.w	r10[0x0],r9
80004eb0:	10 36       	cp.w	r6,r8
80004eb2:	c0 a1       	brne	80004ec6 <_malloc_r+0x332>
80004eb4:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80004eb8:	c0 71       	brne	80004ec6 <_malloc_r+0x332>
80004eba:	e2 02 00 02 	add	r2,r1,r2
80004ebe:	68 28       	ld.w	r8,r4[0x8]
80004ec0:	a1 a2       	sbr	r2,0x0
80004ec2:	91 12       	st.w	r8[0x4],r2
80004ec4:	c4 b8       	rjmp	80004f5a <_malloc_r+0x3c6>
80004ec6:	4b 5a       	lddpc	r10,80004f98 <_malloc_r+0x404>
80004ec8:	74 0b       	ld.w	r11,r10[0x0]
80004eca:	5b fb       	cp.w	r11,-1
80004ecc:	c0 31       	brne	80004ed2 <_malloc_r+0x33e>
80004ece:	95 06       	st.w	r10[0x0],r6
80004ed0:	c0 68       	rjmp	80004edc <_malloc_r+0x348>
80004ed2:	ec 09 00 09 	add	r9,r6,r9
80004ed6:	4b 2a       	lddpc	r10,80004f9c <_malloc_r+0x408>
80004ed8:	10 19       	sub	r9,r8
80004eda:	95 09       	st.w	r10[0x0],r9
80004edc:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80004ee0:	f0 09 11 08 	rsub	r9,r8,8
80004ee4:	58 08       	cp.w	r8,0
80004ee6:	f2 08 17 10 	movne	r8,r9
80004eea:	ed d8 e1 06 	addne	r6,r6,r8
80004eee:	28 08       	sub	r8,-128
80004ef0:	ec 01 00 01 	add	r1,r6,r1
80004ef4:	0a 9c       	mov	r12,r5
80004ef6:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80004efa:	f0 01 01 01 	sub	r1,r8,r1
80004efe:	02 9b       	mov	r11,r1
80004f00:	c6 cc       	rcall	80004fd8 <_sbrk_r>
80004f02:	4a 78       	lddpc	r8,80004f9c <_malloc_r+0x408>
80004f04:	5b fc       	cp.w	r12,-1
80004f06:	ec 0c 17 00 	moveq	r12,r6
80004f0a:	f9 b1 00 00 	moveq	r1,0
80004f0e:	70 09       	ld.w	r9,r8[0x0]
80004f10:	0c 1c       	sub	r12,r6
80004f12:	89 26       	st.w	r4[0x8],r6
80004f14:	02 0c       	add	r12,r1
80004f16:	12 01       	add	r1,r9
80004f18:	a1 ac       	sbr	r12,0x0
80004f1a:	91 01       	st.w	r8[0x0],r1
80004f1c:	8d 1c       	st.w	r6[0x4],r12
80004f1e:	08 33       	cp.w	r3,r4
80004f20:	c1 d0       	breq	80004f5a <_malloc_r+0x3c6>
80004f22:	58 f2       	cp.w	r2,15
80004f24:	e0 8b 00 05 	brhi	80004f2e <_malloc_r+0x39a>
80004f28:	30 18       	mov	r8,1
80004f2a:	8d 18       	st.w	r6[0x4],r8
80004f2c:	c2 38       	rjmp	80004f72 <_malloc_r+0x3de>
80004f2e:	30 59       	mov	r9,5
80004f30:	20 c2       	sub	r2,12
80004f32:	e0 12 ff f8 	andl	r2,0xfff8
80004f36:	e6 02 00 08 	add	r8,r3,r2
80004f3a:	91 29       	st.w	r8[0x8],r9
80004f3c:	91 19       	st.w	r8[0x4],r9
80004f3e:	66 18       	ld.w	r8,r3[0x4]
80004f40:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004f44:	e5 e8 10 08 	or	r8,r2,r8
80004f48:	87 18       	st.w	r3[0x4],r8
80004f4a:	58 f2       	cp.w	r2,15
80004f4c:	e0 88 00 07 	brls	80004f5a <_malloc_r+0x3c6>
80004f50:	e6 cb ff f8 	sub	r11,r3,-8
80004f54:	0a 9c       	mov	r12,r5
80004f56:	e0 a0 03 6b 	rcall	8000562c <_free_r>
80004f5a:	49 29       	lddpc	r9,80004fa0 <_malloc_r+0x40c>
80004f5c:	72 0a       	ld.w	r10,r9[0x0]
80004f5e:	49 08       	lddpc	r8,80004f9c <_malloc_r+0x408>
80004f60:	70 08       	ld.w	r8,r8[0x0]
80004f62:	14 38       	cp.w	r8,r10
80004f64:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004f68:	48 f9       	lddpc	r9,80004fa4 <_malloc_r+0x410>
80004f6a:	72 0a       	ld.w	r10,r9[0x0]
80004f6c:	14 38       	cp.w	r8,r10
80004f6e:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004f72:	68 28       	ld.w	r8,r4[0x8]
80004f74:	70 18       	ld.w	r8,r8[0x4]
80004f76:	e0 18 ff fc 	andl	r8,0xfffc
80004f7a:	0e 38       	cp.w	r8,r7
80004f7c:	5f 39       	srlo	r9
80004f7e:	0e 18       	sub	r8,r7
80004f80:	58 f8       	cp.w	r8,15
80004f82:	5f aa       	srle	r10
80004f84:	f5 e9 10 09 	or	r9,r10,r9
80004f88:	c1 00       	breq	80004fa8 <_malloc_r+0x414>
80004f8a:	0a 9c       	mov	r12,r5
80004f8c:	fe b0 f9 c4 	rcall	80004314 <__malloc_unlock>
80004f90:	d8 3a       	popm	r0-r7,pc,r12=0
80004f92:	d7 03       	nop
80004f94:	00 00       	add	r0,r0
80004f96:	09 e0       	ld.ub	r0,r4[0x6]
80004f98:	00 00       	add	r0,r0
80004f9a:	05 f0       	ld.ub	r0,r2[0x7]
80004f9c:	00 00       	add	r0,r0
80004f9e:	09 e4       	ld.ub	r4,r4[0x6]
80004fa0:	00 00       	add	r0,r0
80004fa2:	09 dc       	ld.ub	r12,r4[0x5]
80004fa4:	00 00       	add	r0,r0
80004fa6:	09 d8       	ld.ub	r8,r4[0x5]
80004fa8:	68 26       	ld.w	r6,r4[0x8]
80004faa:	a1 a8       	sbr	r8,0x0
80004fac:	0e 99       	mov	r9,r7
80004fae:	a1 a9       	sbr	r9,0x0
80004fb0:	8d 19       	st.w	r6[0x4],r9
80004fb2:	ec 07 00 07 	add	r7,r6,r7
80004fb6:	0a 9c       	mov	r12,r5
80004fb8:	89 27       	st.w	r4[0x8],r7
80004fba:	8f 18       	st.w	r7[0x4],r8
80004fbc:	fe b0 f9 ac 	rcall	80004314 <__malloc_unlock>
80004fc0:	ec cc ff f8 	sub	r12,r6,-8
80004fc4:	d8 32       	popm	r0-r7,pc
80004fc6:	d7 03       	nop

80004fc8 <memset>:
80004fc8:	18 98       	mov	r8,r12
80004fca:	c0 38       	rjmp	80004fd0 <memset+0x8>
80004fcc:	10 cb       	st.b	r8++,r11
80004fce:	20 1a       	sub	r10,1
80004fd0:	58 0a       	cp.w	r10,0
80004fd2:	cf d1       	brne	80004fcc <memset+0x4>
80004fd4:	5e fc       	retal	r12
80004fd6:	d7 03       	nop

80004fd8 <_sbrk_r>:
80004fd8:	d4 21       	pushm	r4-r7,lr
80004fda:	30 08       	mov	r8,0
80004fdc:	18 97       	mov	r7,r12
80004fde:	48 66       	lddpc	r6,80004ff4 <_sbrk_r+0x1c>
80004fe0:	16 9c       	mov	r12,r11
80004fe2:	8d 08       	st.w	r6[0x0],r8
80004fe4:	cc cc       	rcall	8000517c <_sbrk>
80004fe6:	5b fc       	cp.w	r12,-1
80004fe8:	c0 51       	brne	80004ff2 <_sbrk_r+0x1a>
80004fea:	6c 08       	ld.w	r8,r6[0x0]
80004fec:	58 08       	cp.w	r8,0
80004fee:	ef f8 1a 03 	st.wne	r7[0xc],r8
80004ff2:	d8 22       	popm	r4-r7,pc
80004ff4:	00 00       	add	r0,r0
80004ff6:	0a 3c       	cp.w	r12,r5

80004ff8 <setbuf>:
80004ff8:	d4 01       	pushm	lr
80004ffa:	e0 69 04 00 	mov	r9,1024
80004ffe:	58 0b       	cp.w	r11,0
80005000:	f9 ba 00 02 	moveq	r10,2
80005004:	f9 ba 01 00 	movne	r10,0
80005008:	c0 2c       	rcall	8000500c <setvbuf>
8000500a:	d8 02       	popm	pc

8000500c <setvbuf>:
8000500c:	d4 31       	pushm	r0-r7,lr
8000500e:	4b f8       	lddpc	r8,80005108 <setvbuf+0xfc>
80005010:	18 97       	mov	r7,r12
80005012:	16 96       	mov	r6,r11
80005014:	14 95       	mov	r5,r10
80005016:	12 94       	mov	r4,r9
80005018:	70 0c       	ld.w	r12,r8[0x0]
8000501a:	58 0c       	cp.w	r12,0
8000501c:	c0 60       	breq	80005028 <setvbuf+0x1c>
8000501e:	78 68       	ld.w	r8,r12[0x18]
80005020:	58 08       	cp.w	r8,0
80005022:	c0 31       	brne	80005028 <setvbuf+0x1c>
80005024:	e0 a0 02 68 	rcall	800054f4 <__sinit>
80005028:	4b 98       	lddpc	r8,8000510c <setvbuf+0x100>
8000502a:	10 37       	cp.w	r7,r8
8000502c:	c0 51       	brne	80005036 <setvbuf+0x2a>
8000502e:	4b 78       	lddpc	r8,80005108 <setvbuf+0xfc>
80005030:	70 08       	ld.w	r8,r8[0x0]
80005032:	70 07       	ld.w	r7,r8[0x0]
80005034:	c0 e8       	rjmp	80005050 <setvbuf+0x44>
80005036:	4b 78       	lddpc	r8,80005110 <setvbuf+0x104>
80005038:	10 37       	cp.w	r7,r8
8000503a:	c0 51       	brne	80005044 <setvbuf+0x38>
8000503c:	4b 38       	lddpc	r8,80005108 <setvbuf+0xfc>
8000503e:	70 08       	ld.w	r8,r8[0x0]
80005040:	70 17       	ld.w	r7,r8[0x4]
80005042:	c0 78       	rjmp	80005050 <setvbuf+0x44>
80005044:	4b 48       	lddpc	r8,80005114 <setvbuf+0x108>
80005046:	10 37       	cp.w	r7,r8
80005048:	c0 41       	brne	80005050 <setvbuf+0x44>
8000504a:	4b 08       	lddpc	r8,80005108 <setvbuf+0xfc>
8000504c:	70 08       	ld.w	r8,r8[0x0]
8000504e:	70 27       	ld.w	r7,r8[0x8]
80005050:	58 25       	cp.w	r5,2
80005052:	5f b8       	srhi	r8
80005054:	f1 e4 13 f8 	or	r8,r8,r4>>0x1f
80005058:	c0 20       	breq	8000505c <setvbuf+0x50>
8000505a:	dc 3a       	popm	r0-r7,pc,r12=-1
8000505c:	4a b3       	lddpc	r3,80005108 <setvbuf+0xfc>
8000505e:	0e 9b       	mov	r11,r7
80005060:	66 0c       	ld.w	r12,r3[0x0]
80005062:	c6 dd       	rcall	8000533c <_fflush_r>
80005064:	30 08       	mov	r8,0
80005066:	8f 68       	st.w	r7[0x18],r8
80005068:	8f 18       	st.w	r7[0x4],r8
8000506a:	8e 68       	ld.sh	r8,r7[0xc]
8000506c:	ed b8 00 07 	bld	r8,0x7
80005070:	c0 51       	brne	8000507a <setvbuf+0x6e>
80005072:	66 0c       	ld.w	r12,r3[0x0]
80005074:	6e 4b       	ld.w	r11,r7[0x10]
80005076:	e0 a0 02 db 	rcall	8000562c <_free_r>
8000507a:	8e 68       	ld.sh	r8,r7[0xc]
8000507c:	e0 18 ff 7c 	andl	r8,0xff7c
80005080:	ae 68       	st.h	r7[0xc],r8
80005082:	58 25       	cp.w	r5,2
80005084:	c0 31       	brne	8000508a <setvbuf+0x7e>
80005086:	30 0c       	mov	r12,0
80005088:	c1 38       	rjmp	800050ae <setvbuf+0xa2>
8000508a:	58 06       	cp.w	r6,0
8000508c:	c2 11       	brne	800050ce <setvbuf+0xc2>
8000508e:	e0 63 04 00 	mov	r3,1024
80005092:	58 04       	cp.w	r4,0
80005094:	e6 04 17 00 	moveq	r4,r3
80005098:	08 9c       	mov	r12,r4
8000509a:	fe b0 fd 75 	rcall	80004b84 <malloc>
8000509e:	18 96       	mov	r6,r12
800050a0:	c1 41       	brne	800050c8 <setvbuf+0xbc>
800050a2:	06 9c       	mov	r12,r3
800050a4:	fe b0 fd 70 	rcall	80004b84 <malloc>
800050a8:	18 96       	mov	r6,r12
800050aa:	c0 e1       	brne	800050c6 <setvbuf+0xba>
800050ac:	3f fc       	mov	r12,-1
800050ae:	8e 68       	ld.sh	r8,r7[0xc]
800050b0:	a1 b8       	sbr	r8,0x1
800050b2:	ae 68       	st.h	r7[0xc],r8
800050b4:	ee c8 ff b9 	sub	r8,r7,-71
800050b8:	8f 48       	st.w	r7[0x10],r8
800050ba:	8f 08       	st.w	r7[0x0],r8
800050bc:	30 08       	mov	r8,0
800050be:	8f 28       	st.w	r7[0x8],r8
800050c0:	30 18       	mov	r8,1
800050c2:	8f 58       	st.w	r7[0x14],r8
800050c4:	d8 32       	popm	r0-r7,pc
800050c6:	06 94       	mov	r4,r3
800050c8:	8e 68       	ld.sh	r8,r7[0xc]
800050ca:	a7 b8       	sbr	r8,0x7
800050cc:	ae 68       	st.h	r7[0xc],r8
800050ce:	58 15       	cp.w	r5,1
800050d0:	c0 71       	brne	800050de <setvbuf+0xd2>
800050d2:	8e 68       	ld.sh	r8,r7[0xc]
800050d4:	a1 a8       	sbr	r8,0x0
800050d6:	ae 68       	st.h	r7[0xc],r8
800050d8:	e8 08 11 00 	rsub	r8,r4,0
800050dc:	8f 68       	st.w	r7[0x18],r8
800050de:	48 b8       	lddpc	r8,80005108 <setvbuf+0xfc>
800050e0:	fe c9 fc 90 	sub	r9,pc,-880
800050e4:	70 08       	ld.w	r8,r8[0x0]
800050e6:	8f 46       	st.w	r7[0x10],r6
800050e8:	91 a9       	st.w	r8[0x28],r9
800050ea:	8f 06       	st.w	r7[0x0],r6
800050ec:	8f 54       	st.w	r7[0x14],r4
800050ee:	8e 68       	ld.sh	r8,r7[0xc]
800050f0:	10 9c       	mov	r12,r8
800050f2:	e2 1c 00 08 	andl	r12,0x8,COH
800050f6:	c0 70       	breq	80005104 <setvbuf+0xf8>
800050f8:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800050fc:	30 0c       	mov	r12,0
800050fe:	f9 b4 01 00 	movne	r4,0
80005102:	8f 24       	st.w	r7[0x8],r4
80005104:	d8 32       	popm	r0-r7,pc
80005106:	d7 03       	nop
80005108:	00 00       	add	r0,r0
8000510a:	01 e0       	ld.ub	r0,r0[0x6]
8000510c:	80 00       	ld.sh	r0,r0[0x0]
8000510e:	5d 1c       	icall	r12
80005110:	80 00       	ld.sh	r0,r0[0x0]
80005112:	5d 3c       	musfr	r12
80005114:	80 00       	ld.sh	r0,r0[0x0]
80005116:	5d 5c       	*unknown*

80005118 <strncpy>:
80005118:	30 08       	mov	r8,0
8000511a:	10 3a       	cp.w	r10,r8
8000511c:	5e 0c       	reteq	r12
8000511e:	f6 08 07 09 	ld.ub	r9,r11[r8]
80005122:	f8 08 0b 09 	st.b	r12[r8],r9
80005126:	2f f8       	sub	r8,-1
80005128:	58 09       	cp.w	r9,0
8000512a:	cf 81       	brne	8000511a <strncpy+0x2>
8000512c:	10 3a       	cp.w	r10,r8
8000512e:	5e 0c       	reteq	r12
80005130:	f8 08 0b 09 	st.b	r12[r8],r9
80005134:	2f f8       	sub	r8,-1
80005136:	cf bb       	rjmp	8000512c <strncpy+0x14>

80005138 <_init_argv>:
80005138:	30 e8       	mov	r8,14
8000513a:	d6 73       	breakpoint
8000513c:	3f fc       	mov	r12,-1
8000513e:	35 8b       	mov	r11,88
80005140:	5e fc       	retal	r12

80005142 <_exit>:
80005142:	30 d8       	mov	r8,13
80005144:	d6 73       	breakpoint
80005146:	3f fc       	mov	r12,-1
80005148:	35 8b       	mov	r11,88
8000514a:	c0 08       	rjmp	8000514a <_exit+0x8>

8000514c <_close>:
8000514c:	30 28       	mov	r8,2
8000514e:	d6 73       	breakpoint
80005150:	3f fc       	mov	r12,-1
80005152:	35 8b       	mov	r11,88
80005154:	58 0c       	cp.w	r12,0
80005156:	5e 4c       	retge	r12
80005158:	48 2a       	lddpc	r10,80005160 <_close+0x14>
8000515a:	95 0b       	st.w	r10[0x0],r11
8000515c:	5e fc       	retal	r12
8000515e:	d7 03       	nop
80005160:	00 00       	add	r0,r0
80005162:	0a 3c       	cp.w	r12,r5

80005164 <_lseek>:
80005164:	30 58       	mov	r8,5
80005166:	d6 73       	breakpoint
80005168:	3f fc       	mov	r12,-1
8000516a:	35 8b       	mov	r11,88
8000516c:	58 0c       	cp.w	r12,0
8000516e:	5e 4c       	retge	r12
80005170:	48 2a       	lddpc	r10,80005178 <_lseek+0x14>
80005172:	95 0b       	st.w	r10[0x0],r11
80005174:	5e fc       	retal	r12
80005176:	d7 03       	nop
80005178:	00 00       	add	r0,r0
8000517a:	0a 3c       	cp.w	r12,r5

8000517c <_sbrk>:
8000517c:	d4 01       	pushm	lr
8000517e:	48 c8       	lddpc	r8,800051ac <_sbrk+0x30>
80005180:	70 09       	ld.w	r9,r8[0x0]
80005182:	58 09       	cp.w	r9,0
80005184:	c0 31       	brne	8000518a <_sbrk+0xe>
80005186:	48 b9       	lddpc	r9,800051b0 <_sbrk+0x34>
80005188:	91 09       	st.w	r8[0x0],r9
8000518a:	48 99       	lddpc	r9,800051ac <_sbrk+0x30>
8000518c:	48 aa       	lddpc	r10,800051b4 <_sbrk+0x38>
8000518e:	72 08       	ld.w	r8,r9[0x0]
80005190:	f0 0c 00 0c 	add	r12,r8,r12
80005194:	14 3c       	cp.w	r12,r10
80005196:	e0 8b 00 04 	brhi	8000519e <_sbrk+0x22>
8000519a:	93 0c       	st.w	r9[0x0],r12
8000519c:	c0 58       	rjmp	800051a6 <_sbrk+0x2a>
8000519e:	cc 9c       	rcall	80005330 <__errno>
800051a0:	30 c8       	mov	r8,12
800051a2:	99 08       	st.w	r12[0x0],r8
800051a4:	3f f8       	mov	r8,-1
800051a6:	10 9c       	mov	r12,r8
800051a8:	d8 02       	popm	pc
800051aa:	d7 03       	nop
800051ac:	00 00       	add	r0,r0
800051ae:	0a 0c       	add	r12,r5
800051b0:	00 00       	add	r0,r0
800051b2:	0a 40       	or	r0,r5
800051b4:	00 00       	add	r0,r0
800051b6:	f0 00       	*unknown*

800051b8 <__register_exitproc>:
800051b8:	d4 31       	pushm	r0-r7,lr
800051ba:	4a 98       	lddpc	r8,8000525c <__register_exitproc+0xa4>
800051bc:	70 03       	ld.w	r3,r8[0x0]
800051be:	67 24       	ld.w	r4,r3[0x48]
800051c0:	e6 c8 ff b4 	sub	r8,r3,-76
800051c4:	58 04       	cp.w	r4,0
800051c6:	f0 04 17 00 	moveq	r4,r8
800051ca:	e7 f4 0a 12 	st.weq	r3[0x48],r4
800051ce:	18 97       	mov	r7,r12
800051d0:	16 96       	mov	r6,r11
800051d2:	14 95       	mov	r5,r10
800051d4:	12 92       	mov	r2,r9
800051d6:	68 18       	ld.w	r8,r4[0x4]
800051d8:	59 f8       	cp.w	r8,31
800051da:	e0 8a 00 0e 	brle	800051f6 <__register_exitproc+0x3e>
800051de:	e0 6c 00 8c 	mov	r12,140
800051e2:	fe b0 fc d1 	rcall	80004b84 <malloc>
800051e6:	18 94       	mov	r4,r12
800051e8:	c3 80       	breq	80005258 <__register_exitproc+0xa0>
800051ea:	67 28       	ld.w	r8,r3[0x48]
800051ec:	99 08       	st.w	r12[0x0],r8
800051ee:	e7 4c 00 48 	st.w	r3[72],r12
800051f2:	30 08       	mov	r8,0
800051f4:	99 18       	st.w	r12[0x4],r8
800051f6:	58 07       	cp.w	r7,0
800051f8:	c2 70       	breq	80005246 <__register_exitproc+0x8e>
800051fa:	e8 fc 00 88 	ld.w	r12,r4[136]
800051fe:	58 0c       	cp.w	r12,0
80005200:	c0 d1       	brne	8000521a <__register_exitproc+0x62>
80005202:	e0 6c 01 08 	mov	r12,264
80005206:	fe b0 fc bf 	rcall	80004b84 <malloc>
8000520a:	c2 70       	breq	80005258 <__register_exitproc+0xa0>
8000520c:	30 08       	mov	r8,0
8000520e:	e9 4c 00 88 	st.w	r4[136],r12
80005212:	f9 48 01 04 	st.w	r12[260],r8
80005216:	f9 48 01 00 	st.w	r12[256],r8
8000521a:	68 18       	ld.w	r8,r4[0x4]
8000521c:	f0 c9 ff e0 	sub	r9,r8,-32
80005220:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
80005224:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
80005228:	30 1a       	mov	r10,1
8000522a:	f8 f9 01 00 	ld.w	r9,r12[256]
8000522e:	f4 08 09 48 	lsl	r8,r10,r8
80005232:	10 49       	or	r9,r8
80005234:	f9 49 01 00 	st.w	r12[256],r9
80005238:	58 27       	cp.w	r7,2
8000523a:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
8000523e:	f3 d8 e0 38 	oreq	r8,r9,r8
80005242:	f9 f8 0a 41 	st.weq	r12[0x104],r8
80005246:	68 18       	ld.w	r8,r4[0x4]
80005248:	30 0c       	mov	r12,0
8000524a:	f0 c9 ff ff 	sub	r9,r8,-1
8000524e:	2f e8       	sub	r8,-2
80005250:	89 19       	st.w	r4[0x4],r9
80005252:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
80005256:	d8 32       	popm	r0-r7,pc
80005258:	dc 3a       	popm	r0-r7,pc,r12=-1
8000525a:	d7 03       	nop
8000525c:	80 00       	ld.sh	r0,r0[0x0]
8000525e:	5d 18       	icall	r8

80005260 <__call_exitprocs>:
80005260:	d4 31       	pushm	r0-r7,lr
80005262:	20 3d       	sub	sp,12
80005264:	4b 28       	lddpc	r8,8000532c <__call_exitprocs+0xcc>
80005266:	50 2c       	stdsp	sp[0x8],r12
80005268:	70 08       	ld.w	r8,r8[0x0]
8000526a:	16 91       	mov	r1,r11
8000526c:	50 08       	stdsp	sp[0x0],r8
8000526e:	2b 88       	sub	r8,-72
80005270:	50 18       	stdsp	sp[0x4],r8
80005272:	40 0a       	lddsp	r10,sp[0x0]
80005274:	40 14       	lddsp	r4,sp[0x4]
80005276:	75 27       	ld.w	r7,r10[0x48]
80005278:	c5 58       	rjmp	80005322 <__call_exitprocs+0xc2>
8000527a:	6e 15       	ld.w	r5,r7[0x4]
8000527c:	ee f6 00 88 	ld.w	r6,r7[136]
80005280:	ea c2 ff ff 	sub	r2,r5,-1
80005284:	20 15       	sub	r5,1
80005286:	ee 02 00 22 	add	r2,r7,r2<<0x2
8000528a:	ec 05 00 23 	add	r3,r6,r5<<0x2
8000528e:	c3 58       	rjmp	800052f8 <__call_exitprocs+0x98>
80005290:	58 01       	cp.w	r1,0
80005292:	c0 70       	breq	800052a0 <__call_exitprocs+0x40>
80005294:	58 06       	cp.w	r6,0
80005296:	c2 e0       	breq	800052f2 <__call_exitprocs+0x92>
80005298:	e6 f8 00 80 	ld.w	r8,r3[128]
8000529c:	02 38       	cp.w	r8,r1
8000529e:	c2 a1       	brne	800052f2 <__call_exitprocs+0x92>
800052a0:	6e 19       	ld.w	r9,r7[0x4]
800052a2:	64 08       	ld.w	r8,r2[0x0]
800052a4:	20 19       	sub	r9,1
800052a6:	12 35       	cp.w	r5,r9
800052a8:	ef f5 0a 01 	st.weq	r7[0x4],r5
800052ac:	f9 b9 01 00 	movne	r9,0
800052b0:	e5 f9 1a 00 	st.wne	r2[0x0],r9
800052b4:	58 08       	cp.w	r8,0
800052b6:	c1 e0       	breq	800052f2 <__call_exitprocs+0x92>
800052b8:	6e 10       	ld.w	r0,r7[0x4]
800052ba:	58 06       	cp.w	r6,0
800052bc:	c0 90       	breq	800052ce <__call_exitprocs+0x6e>
800052be:	30 1a       	mov	r10,1
800052c0:	f4 05 09 49 	lsl	r9,r10,r5
800052c4:	ec fa 01 00 	ld.w	r10,r6[256]
800052c8:	f3 ea 00 0a 	and	r10,r9,r10
800052cc:	c0 31       	brne	800052d2 <__call_exitprocs+0x72>
800052ce:	5d 18       	icall	r8
800052d0:	c0 b8       	rjmp	800052e6 <__call_exitprocs+0x86>
800052d2:	ec fa 01 04 	ld.w	r10,r6[260]
800052d6:	66 0b       	ld.w	r11,r3[0x0]
800052d8:	14 69       	and	r9,r10
800052da:	c0 41       	brne	800052e2 <__call_exitprocs+0x82>
800052dc:	40 2c       	lddsp	r12,sp[0x8]
800052de:	5d 18       	icall	r8
800052e0:	c0 38       	rjmp	800052e6 <__call_exitprocs+0x86>
800052e2:	16 9c       	mov	r12,r11
800052e4:	5d 18       	icall	r8
800052e6:	6e 18       	ld.w	r8,r7[0x4]
800052e8:	10 30       	cp.w	r0,r8
800052ea:	cc 41       	brne	80005272 <__call_exitprocs+0x12>
800052ec:	68 08       	ld.w	r8,r4[0x0]
800052ee:	0e 38       	cp.w	r8,r7
800052f0:	cc 11       	brne	80005272 <__call_exitprocs+0x12>
800052f2:	20 15       	sub	r5,1
800052f4:	20 43       	sub	r3,4
800052f6:	20 42       	sub	r2,4
800052f8:	58 05       	cp.w	r5,0
800052fa:	cc b4       	brge	80005290 <__call_exitprocs+0x30>
800052fc:	6e 18       	ld.w	r8,r7[0x4]
800052fe:	58 08       	cp.w	r8,0
80005300:	c0 f1       	brne	8000531e <__call_exitprocs+0xbe>
80005302:	6e 08       	ld.w	r8,r7[0x0]
80005304:	58 08       	cp.w	r8,0
80005306:	c0 c0       	breq	8000531e <__call_exitprocs+0xbe>
80005308:	89 08       	st.w	r4[0x0],r8
8000530a:	58 06       	cp.w	r6,0
8000530c:	c0 40       	breq	80005314 <__call_exitprocs+0xb4>
8000530e:	0c 9c       	mov	r12,r6
80005310:	fe b0 fc 30 	rcall	80004b70 <free>
80005314:	0e 9c       	mov	r12,r7
80005316:	fe b0 fc 2d 	rcall	80004b70 <free>
8000531a:	68 07       	ld.w	r7,r4[0x0]
8000531c:	c0 38       	rjmp	80005322 <__call_exitprocs+0xc2>
8000531e:	0e 94       	mov	r4,r7
80005320:	6e 07       	ld.w	r7,r7[0x0]
80005322:	58 07       	cp.w	r7,0
80005324:	ca b1       	brne	8000527a <__call_exitprocs+0x1a>
80005326:	2f dd       	sub	sp,-12
80005328:	d8 32       	popm	r0-r7,pc
8000532a:	d7 03       	nop
8000532c:	80 00       	ld.sh	r0,r0[0x0]
8000532e:	5d 18       	icall	r8

80005330 <__errno>:
80005330:	48 28       	lddpc	r8,80005338 <__errno+0x8>
80005332:	70 0c       	ld.w	r12,r8[0x0]
80005334:	2f 4c       	sub	r12,-12
80005336:	5e fc       	retal	r12
80005338:	00 00       	add	r0,r0
8000533a:	01 e0       	ld.ub	r0,r0[0x6]

8000533c <_fflush_r>:
8000533c:	d4 21       	pushm	r4-r7,lr
8000533e:	16 97       	mov	r7,r11
80005340:	18 96       	mov	r6,r12
80005342:	76 48       	ld.w	r8,r11[0x10]
80005344:	58 08       	cp.w	r8,0
80005346:	c7 c0       	breq	8000543e <_fflush_r+0x102>
80005348:	58 0c       	cp.w	r12,0
8000534a:	c0 50       	breq	80005354 <_fflush_r+0x18>
8000534c:	78 68       	ld.w	r8,r12[0x18]
8000534e:	58 08       	cp.w	r8,0
80005350:	c0 21       	brne	80005354 <_fflush_r+0x18>
80005352:	cd 1c       	rcall	800054f4 <__sinit>
80005354:	4b b8       	lddpc	r8,80005440 <_fflush_r+0x104>
80005356:	10 37       	cp.w	r7,r8
80005358:	c0 31       	brne	8000535e <_fflush_r+0x22>
8000535a:	6c 07       	ld.w	r7,r6[0x0]
8000535c:	c0 a8       	rjmp	80005370 <_fflush_r+0x34>
8000535e:	4b a8       	lddpc	r8,80005444 <_fflush_r+0x108>
80005360:	10 37       	cp.w	r7,r8
80005362:	c0 31       	brne	80005368 <_fflush_r+0x2c>
80005364:	6c 17       	ld.w	r7,r6[0x4]
80005366:	c0 58       	rjmp	80005370 <_fflush_r+0x34>
80005368:	4b 88       	lddpc	r8,80005448 <_fflush_r+0x10c>
8000536a:	10 37       	cp.w	r7,r8
8000536c:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80005370:	8e 6a       	ld.sh	r10,r7[0xc]
80005372:	14 98       	mov	r8,r10
80005374:	ed ba 00 03 	bld	r10,0x3
80005378:	c4 20       	breq	800053fc <_fflush_r+0xc0>
8000537a:	ab ba       	sbr	r10,0xb
8000537c:	ae 6a       	st.h	r7[0xc],r10
8000537e:	6e 18       	ld.w	r8,r7[0x4]
80005380:	58 08       	cp.w	r8,0
80005382:	e0 89 00 06 	brgt	8000538e <_fflush_r+0x52>
80005386:	6f 08       	ld.w	r8,r7[0x40]
80005388:	58 08       	cp.w	r8,0
8000538a:	e0 8a 00 5a 	brle	8000543e <_fflush_r+0x102>
8000538e:	6e b8       	ld.w	r8,r7[0x2c]
80005390:	58 08       	cp.w	r8,0
80005392:	c5 60       	breq	8000543e <_fflush_r+0x102>
80005394:	e2 1a 10 00 	andl	r10,0x1000,COH
80005398:	c0 30       	breq	8000539e <_fflush_r+0x62>
8000539a:	6f 55       	ld.w	r5,r7[0x54]
8000539c:	c0 f8       	rjmp	800053ba <_fflush_r+0x7e>
8000539e:	30 19       	mov	r9,1
800053a0:	6e 8b       	ld.w	r11,r7[0x20]
800053a2:	0c 9c       	mov	r12,r6
800053a4:	5d 18       	icall	r8
800053a6:	18 95       	mov	r5,r12
800053a8:	5b fc       	cp.w	r12,-1
800053aa:	c0 81       	brne	800053ba <_fflush_r+0x7e>
800053ac:	6c 38       	ld.w	r8,r6[0xc]
800053ae:	59 d8       	cp.w	r8,29
800053b0:	c4 70       	breq	8000543e <_fflush_r+0x102>
800053b2:	8e 68       	ld.sh	r8,r7[0xc]
800053b4:	a7 a8       	sbr	r8,0x6
800053b6:	ae 68       	st.h	r7[0xc],r8
800053b8:	d8 22       	popm	r4-r7,pc
800053ba:	8e 68       	ld.sh	r8,r7[0xc]
800053bc:	ed b8 00 02 	bld	r8,0x2
800053c0:	c0 91       	brne	800053d2 <_fflush_r+0x96>
800053c2:	6e 18       	ld.w	r8,r7[0x4]
800053c4:	10 15       	sub	r5,r8
800053c6:	6e d8       	ld.w	r8,r7[0x34]
800053c8:	58 08       	cp.w	r8,0
800053ca:	ef f8 10 10 	ld.wne	r8,r7[0x40]
800053ce:	eb d8 e1 15 	subne	r5,r5,r8
800053d2:	6e b8       	ld.w	r8,r7[0x2c]
800053d4:	0c 9c       	mov	r12,r6
800053d6:	30 09       	mov	r9,0
800053d8:	0a 9a       	mov	r10,r5
800053da:	6e 8b       	ld.w	r11,r7[0x20]
800053dc:	5d 18       	icall	r8
800053de:	8e 68       	ld.sh	r8,r7[0xc]
800053e0:	0a 3c       	cp.w	r12,r5
800053e2:	c2 61       	brne	8000542e <_fflush_r+0xf2>
800053e4:	ab d8       	cbr	r8,0xb
800053e6:	30 0c       	mov	r12,0
800053e8:	6e 49       	ld.w	r9,r7[0x10]
800053ea:	ae 68       	st.h	r7[0xc],r8
800053ec:	8f 1c       	st.w	r7[0x4],r12
800053ee:	8f 09       	st.w	r7[0x0],r9
800053f0:	ed b8 00 0c 	bld	r8,0xc
800053f4:	c2 51       	brne	8000543e <_fflush_r+0x102>
800053f6:	ef 45 00 54 	st.w	r7[84],r5
800053fa:	d8 22       	popm	r4-r7,pc
800053fc:	6e 45       	ld.w	r5,r7[0x10]
800053fe:	58 05       	cp.w	r5,0
80005400:	c1 f0       	breq	8000543e <_fflush_r+0x102>
80005402:	6e 04       	ld.w	r4,r7[0x0]
80005404:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80005408:	8f 05       	st.w	r7[0x0],r5
8000540a:	f9 b8 01 00 	movne	r8,0
8000540e:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80005412:	0a 14       	sub	r4,r5
80005414:	8f 28       	st.w	r7[0x8],r8
80005416:	c1 18       	rjmp	80005438 <_fflush_r+0xfc>
80005418:	08 99       	mov	r9,r4
8000541a:	0a 9a       	mov	r10,r5
8000541c:	6e a8       	ld.w	r8,r7[0x28]
8000541e:	6e 8b       	ld.w	r11,r7[0x20]
80005420:	0c 9c       	mov	r12,r6
80005422:	5d 18       	icall	r8
80005424:	18 14       	sub	r4,r12
80005426:	58 0c       	cp.w	r12,0
80005428:	e0 89 00 07 	brgt	80005436 <_fflush_r+0xfa>
8000542c:	8e 68       	ld.sh	r8,r7[0xc]
8000542e:	a7 a8       	sbr	r8,0x6
80005430:	3f fc       	mov	r12,-1
80005432:	ae 68       	st.h	r7[0xc],r8
80005434:	d8 22       	popm	r4-r7,pc
80005436:	18 05       	add	r5,r12
80005438:	58 04       	cp.w	r4,0
8000543a:	fe 99 ff ef 	brgt	80005418 <_fflush_r+0xdc>
8000543e:	d8 2a       	popm	r4-r7,pc,r12=0
80005440:	80 00       	ld.sh	r0,r0[0x0]
80005442:	5d 1c       	icall	r12
80005444:	80 00       	ld.sh	r0,r0[0x0]
80005446:	5d 3c       	musfr	r12
80005448:	80 00       	ld.sh	r0,r0[0x0]
8000544a:	5d 5c       	*unknown*

8000544c <__sfp_lock_acquire>:
8000544c:	5e fc       	retal	r12

8000544e <__sfp_lock_release>:
8000544e:	5e fc       	retal	r12

80005450 <_cleanup_r>:
80005450:	d4 01       	pushm	lr
80005452:	fe cb fa de 	sub	r11,pc,-1314
80005456:	cb 3d       	rcall	800057bc <_fwalk>
80005458:	d8 02       	popm	pc
8000545a:	d7 03       	nop

8000545c <__sfmoreglue>:
8000545c:	d4 21       	pushm	r4-r7,lr
8000545e:	16 95       	mov	r5,r11
80005460:	f6 06 10 5c 	mul	r6,r11,92
80005464:	ec cb ff f4 	sub	r11,r6,-12
80005468:	fe b0 fb 96 	rcall	80004b94 <_malloc_r>
8000546c:	18 97       	mov	r7,r12
8000546e:	c0 90       	breq	80005480 <__sfmoreglue+0x24>
80005470:	99 15       	st.w	r12[0x4],r5
80005472:	30 0b       	mov	r11,0
80005474:	2f 4c       	sub	r12,-12
80005476:	0c 9a       	mov	r10,r6
80005478:	8f 2c       	st.w	r7[0x8],r12
8000547a:	8f 0b       	st.w	r7[0x0],r11
8000547c:	fe b0 fd a6 	rcall	80004fc8 <memset>
80005480:	0e 9c       	mov	r12,r7
80005482:	d8 22       	popm	r4-r7,pc

80005484 <__sfp>:
80005484:	d4 21       	pushm	r4-r7,lr
80005486:	49 b8       	lddpc	r8,800054f0 <__sfp+0x6c>
80005488:	18 96       	mov	r6,r12
8000548a:	70 07       	ld.w	r7,r8[0x0]
8000548c:	6e 68       	ld.w	r8,r7[0x18]
8000548e:	58 08       	cp.w	r8,0
80005490:	c0 31       	brne	80005496 <__sfp+0x12>
80005492:	0e 9c       	mov	r12,r7
80005494:	c3 0c       	rcall	800054f4 <__sinit>
80005496:	ee c7 ff 28 	sub	r7,r7,-216
8000549a:	30 05       	mov	r5,0
8000549c:	6e 2c       	ld.w	r12,r7[0x8]
8000549e:	6e 18       	ld.w	r8,r7[0x4]
800054a0:	c0 68       	rjmp	800054ac <__sfp+0x28>
800054a2:	98 69       	ld.sh	r9,r12[0xc]
800054a4:	ea 09 19 00 	cp.h	r9,r5
800054a8:	c1 10       	breq	800054ca <__sfp+0x46>
800054aa:	2a 4c       	sub	r12,-92
800054ac:	20 18       	sub	r8,1
800054ae:	cf a7       	brpl	800054a2 <__sfp+0x1e>
800054b0:	6e 08       	ld.w	r8,r7[0x0]
800054b2:	58 08       	cp.w	r8,0
800054b4:	c0 61       	brne	800054c0 <__sfp+0x3c>
800054b6:	30 4b       	mov	r11,4
800054b8:	0c 9c       	mov	r12,r6
800054ba:	cd 1f       	rcall	8000545c <__sfmoreglue>
800054bc:	8f 0c       	st.w	r7[0x0],r12
800054be:	c0 30       	breq	800054c4 <__sfp+0x40>
800054c0:	6e 07       	ld.w	r7,r7[0x0]
800054c2:	ce db       	rjmp	8000549c <__sfp+0x18>
800054c4:	30 c8       	mov	r8,12
800054c6:	8d 38       	st.w	r6[0xc],r8
800054c8:	d8 22       	popm	r4-r7,pc
800054ca:	30 08       	mov	r8,0
800054cc:	f9 48 00 4c 	st.w	r12[76],r8
800054d0:	99 08       	st.w	r12[0x0],r8
800054d2:	99 28       	st.w	r12[0x8],r8
800054d4:	99 18       	st.w	r12[0x4],r8
800054d6:	99 48       	st.w	r12[0x10],r8
800054d8:	99 58       	st.w	r12[0x14],r8
800054da:	99 68       	st.w	r12[0x18],r8
800054dc:	99 d8       	st.w	r12[0x34],r8
800054de:	99 e8       	st.w	r12[0x38],r8
800054e0:	f9 48 00 48 	st.w	r12[72],r8
800054e4:	3f f8       	mov	r8,-1
800054e6:	b8 78       	st.h	r12[0xe],r8
800054e8:	30 18       	mov	r8,1
800054ea:	b8 68       	st.h	r12[0xc],r8
800054ec:	d8 22       	popm	r4-r7,pc
800054ee:	d7 03       	nop
800054f0:	80 00       	ld.sh	r0,r0[0x0]
800054f2:	5d 18       	icall	r8

800054f4 <__sinit>:
800054f4:	d4 21       	pushm	r4-r7,lr
800054f6:	18 96       	mov	r6,r12
800054f8:	78 67       	ld.w	r7,r12[0x18]
800054fa:	58 07       	cp.w	r7,0
800054fc:	c4 91       	brne	8000558e <__sinit+0x9a>
800054fe:	fe c8 00 ae 	sub	r8,pc,174
80005502:	30 15       	mov	r5,1
80005504:	99 a8       	st.w	r12[0x28],r8
80005506:	f9 47 00 d8 	st.w	r12[216],r7
8000550a:	f9 47 00 dc 	st.w	r12[220],r7
8000550e:	f9 47 00 e0 	st.w	r12[224],r7
80005512:	99 65       	st.w	r12[0x18],r5
80005514:	cb 8f       	rcall	80005484 <__sfp>
80005516:	8d 0c       	st.w	r6[0x0],r12
80005518:	0c 9c       	mov	r12,r6
8000551a:	cb 5f       	rcall	80005484 <__sfp>
8000551c:	8d 1c       	st.w	r6[0x4],r12
8000551e:	0c 9c       	mov	r12,r6
80005520:	cb 2f       	rcall	80005484 <__sfp>
80005522:	6c 09       	ld.w	r9,r6[0x0]
80005524:	30 48       	mov	r8,4
80005526:	93 07       	st.w	r9[0x0],r7
80005528:	b2 68       	st.h	r9[0xc],r8
8000552a:	93 17       	st.w	r9[0x4],r7
8000552c:	93 27       	st.w	r9[0x8],r7
8000552e:	6c 18       	ld.w	r8,r6[0x4]
80005530:	b2 77       	st.h	r9[0xe],r7
80005532:	93 47       	st.w	r9[0x10],r7
80005534:	93 57       	st.w	r9[0x14],r7
80005536:	93 67       	st.w	r9[0x18],r7
80005538:	93 89       	st.w	r9[0x20],r9
8000553a:	91 07       	st.w	r8[0x0],r7
8000553c:	91 17       	st.w	r8[0x4],r7
8000553e:	91 27       	st.w	r8[0x8],r7
80005540:	fe ce fc e8 	sub	lr,pc,-792
80005544:	fe cb fd 18 	sub	r11,pc,-744
80005548:	93 9e       	st.w	r9[0x24],lr
8000554a:	93 ab       	st.w	r9[0x28],r11
8000554c:	fe ca fd 40 	sub	r10,pc,-704
80005550:	fe c4 fd 4c 	sub	r4,pc,-692
80005554:	93 ba       	st.w	r9[0x2c],r10
80005556:	93 c4       	st.w	r9[0x30],r4
80005558:	30 99       	mov	r9,9
8000555a:	b0 69       	st.h	r8[0xc],r9
8000555c:	b0 75       	st.h	r8[0xe],r5
8000555e:	91 c4       	st.w	r8[0x30],r4
80005560:	91 47       	st.w	r8[0x10],r7
80005562:	91 57       	st.w	r8[0x14],r7
80005564:	91 67       	st.w	r8[0x18],r7
80005566:	91 88       	st.w	r8[0x20],r8
80005568:	91 9e       	st.w	r8[0x24],lr
8000556a:	91 ab       	st.w	r8[0x28],r11
8000556c:	91 ba       	st.w	r8[0x2c],r10
8000556e:	8d 2c       	st.w	r6[0x8],r12
80005570:	31 28       	mov	r8,18
80005572:	99 07       	st.w	r12[0x0],r7
80005574:	b8 68       	st.h	r12[0xc],r8
80005576:	99 17       	st.w	r12[0x4],r7
80005578:	99 27       	st.w	r12[0x8],r7
8000557a:	30 28       	mov	r8,2
8000557c:	b8 78       	st.h	r12[0xe],r8
8000557e:	99 c4       	st.w	r12[0x30],r4
80005580:	99 67       	st.w	r12[0x18],r7
80005582:	99 9e       	st.w	r12[0x24],lr
80005584:	99 ab       	st.w	r12[0x28],r11
80005586:	99 ba       	st.w	r12[0x2c],r10
80005588:	99 47       	st.w	r12[0x10],r7
8000558a:	99 57       	st.w	r12[0x14],r7
8000558c:	99 8c       	st.w	r12[0x20],r12
8000558e:	d8 22       	popm	r4-r7,pc

80005590 <_malloc_trim_r>:
80005590:	d4 21       	pushm	r4-r7,lr
80005592:	16 95       	mov	r5,r11
80005594:	18 97       	mov	r7,r12
80005596:	fe b0 f6 b9 	rcall	80004308 <__malloc_lock>
8000559a:	4a 24       	lddpc	r4,80005620 <_malloc_trim_r+0x90>
8000559c:	68 28       	ld.w	r8,r4[0x8]
8000559e:	70 16       	ld.w	r6,r8[0x4]
800055a0:	e0 16 ff fc 	andl	r6,0xfffc
800055a4:	ec c8 ff 91 	sub	r8,r6,-111
800055a8:	f0 05 01 05 	sub	r5,r8,r5
800055ac:	e0 15 ff 80 	andl	r5,0xff80
800055b0:	ea c5 00 80 	sub	r5,r5,128
800055b4:	e0 45 00 7f 	cp.w	r5,127
800055b8:	e0 8a 00 23 	brle	800055fe <_malloc_trim_r+0x6e>
800055bc:	30 0b       	mov	r11,0
800055be:	0e 9c       	mov	r12,r7
800055c0:	fe b0 fd 0c 	rcall	80004fd8 <_sbrk_r>
800055c4:	68 28       	ld.w	r8,r4[0x8]
800055c6:	0c 08       	add	r8,r6
800055c8:	10 3c       	cp.w	r12,r8
800055ca:	c1 a1       	brne	800055fe <_malloc_trim_r+0x6e>
800055cc:	ea 0b 11 00 	rsub	r11,r5,0
800055d0:	0e 9c       	mov	r12,r7
800055d2:	fe b0 fd 03 	rcall	80004fd8 <_sbrk_r>
800055d6:	5b fc       	cp.w	r12,-1
800055d8:	c1 71       	brne	80005606 <_malloc_trim_r+0x76>
800055da:	30 0b       	mov	r11,0
800055dc:	0e 9c       	mov	r12,r7
800055de:	fe b0 fc fd 	rcall	80004fd8 <_sbrk_r>
800055e2:	68 28       	ld.w	r8,r4[0x8]
800055e4:	f8 08 01 09 	sub	r9,r12,r8
800055e8:	58 f9       	cp.w	r9,15
800055ea:	e0 8a 00 0a 	brle	800055fe <_malloc_trim_r+0x6e>
800055ee:	a1 a9       	sbr	r9,0x0
800055f0:	91 19       	st.w	r8[0x4],r9
800055f2:	48 d8       	lddpc	r8,80005624 <_malloc_trim_r+0x94>
800055f4:	70 09       	ld.w	r9,r8[0x0]
800055f6:	48 d8       	lddpc	r8,80005628 <_malloc_trim_r+0x98>
800055f8:	f8 09 01 09 	sub	r9,r12,r9
800055fc:	91 09       	st.w	r8[0x0],r9
800055fe:	0e 9c       	mov	r12,r7
80005600:	fe b0 f6 8a 	rcall	80004314 <__malloc_unlock>
80005604:	d8 2a       	popm	r4-r7,pc,r12=0
80005606:	68 28       	ld.w	r8,r4[0x8]
80005608:	0a 16       	sub	r6,r5
8000560a:	a1 a6       	sbr	r6,0x0
8000560c:	91 16       	st.w	r8[0x4],r6
8000560e:	48 78       	lddpc	r8,80005628 <_malloc_trim_r+0x98>
80005610:	70 09       	ld.w	r9,r8[0x0]
80005612:	0a 19       	sub	r9,r5
80005614:	0e 9c       	mov	r12,r7
80005616:	91 09       	st.w	r8[0x0],r9
80005618:	fe b0 f6 7e 	rcall	80004314 <__malloc_unlock>
8000561c:	da 2a       	popm	r4-r7,pc,r12=1
8000561e:	d7 03       	nop
80005620:	00 00       	add	r0,r0
80005622:	01 e4       	ld.ub	r4,r0[0x6]
80005624:	00 00       	add	r0,r0
80005626:	05 f0       	ld.ub	r0,r2[0x7]
80005628:	00 00       	add	r0,r0
8000562a:	09 e4       	ld.ub	r4,r4[0x6]

8000562c <_free_r>:
8000562c:	d4 21       	pushm	r4-r7,lr
8000562e:	16 96       	mov	r6,r11
80005630:	18 97       	mov	r7,r12
80005632:	58 0b       	cp.w	r11,0
80005634:	e0 80 00 c2 	breq	800057b8 <_free_r+0x18c>
80005638:	fe b0 f6 68 	rcall	80004308 <__malloc_lock>
8000563c:	20 86       	sub	r6,8
8000563e:	4c ba       	lddpc	r10,80005768 <_free_r+0x13c>
80005640:	6c 18       	ld.w	r8,r6[0x4]
80005642:	74 2e       	ld.w	lr,r10[0x8]
80005644:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80005648:	a1 c8       	cbr	r8,0x0
8000564a:	ec 08 00 09 	add	r9,r6,r8
8000564e:	72 1b       	ld.w	r11,r9[0x4]
80005650:	e0 1b ff fc 	andl	r11,0xfffc
80005654:	1c 39       	cp.w	r9,lr
80005656:	c1 c1       	brne	8000568e <_free_r+0x62>
80005658:	f6 08 00 08 	add	r8,r11,r8
8000565c:	58 0c       	cp.w	r12,0
8000565e:	c0 81       	brne	8000566e <_free_r+0x42>
80005660:	6c 09       	ld.w	r9,r6[0x0]
80005662:	12 16       	sub	r6,r9
80005664:	12 08       	add	r8,r9
80005666:	6c 3b       	ld.w	r11,r6[0xc]
80005668:	6c 29       	ld.w	r9,r6[0x8]
8000566a:	97 29       	st.w	r11[0x8],r9
8000566c:	93 3b       	st.w	r9[0xc],r11
8000566e:	10 99       	mov	r9,r8
80005670:	95 26       	st.w	r10[0x8],r6
80005672:	a1 a9       	sbr	r9,0x0
80005674:	8d 19       	st.w	r6[0x4],r9
80005676:	4b e9       	lddpc	r9,8000576c <_free_r+0x140>
80005678:	72 09       	ld.w	r9,r9[0x0]
8000567a:	12 38       	cp.w	r8,r9
8000567c:	c0 53       	brcs	80005686 <_free_r+0x5a>
8000567e:	4b d8       	lddpc	r8,80005770 <_free_r+0x144>
80005680:	0e 9c       	mov	r12,r7
80005682:	70 0b       	ld.w	r11,r8[0x0]
80005684:	c8 6f       	rcall	80005590 <_malloc_trim_r>
80005686:	0e 9c       	mov	r12,r7
80005688:	fe b0 f6 46 	rcall	80004314 <__malloc_unlock>
8000568c:	d8 22       	popm	r4-r7,pc
8000568e:	93 1b       	st.w	r9[0x4],r11
80005690:	58 0c       	cp.w	r12,0
80005692:	c0 30       	breq	80005698 <_free_r+0x6c>
80005694:	30 0c       	mov	r12,0
80005696:	c1 08       	rjmp	800056b6 <_free_r+0x8a>
80005698:	6c 0e       	ld.w	lr,r6[0x0]
8000569a:	f4 c5 ff f8 	sub	r5,r10,-8
8000569e:	1c 16       	sub	r6,lr
800056a0:	1c 08       	add	r8,lr
800056a2:	6c 2e       	ld.w	lr,r6[0x8]
800056a4:	0a 3e       	cp.w	lr,r5
800056a6:	f9 bc 00 01 	moveq	r12,1
800056aa:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800056ae:	eb fe 1a 02 	st.wne	r5[0x8],lr
800056b2:	fd f5 1a 03 	st.wne	lr[0xc],r5
800056b6:	f2 0b 00 0e 	add	lr,r9,r11
800056ba:	7c 1e       	ld.w	lr,lr[0x4]
800056bc:	ed be 00 00 	bld	lr,0x0
800056c0:	c1 30       	breq	800056e6 <_free_r+0xba>
800056c2:	16 08       	add	r8,r11
800056c4:	58 0c       	cp.w	r12,0
800056c6:	c0 c1       	brne	800056de <_free_r+0xb2>
800056c8:	4a 8e       	lddpc	lr,80005768 <_free_r+0x13c>
800056ca:	72 2b       	ld.w	r11,r9[0x8]
800056cc:	2f 8e       	sub	lr,-8
800056ce:	1c 3b       	cp.w	r11,lr
800056d0:	c0 71       	brne	800056de <_free_r+0xb2>
800056d2:	97 36       	st.w	r11[0xc],r6
800056d4:	97 26       	st.w	r11[0x8],r6
800056d6:	8d 2b       	st.w	r6[0x8],r11
800056d8:	8d 3b       	st.w	r6[0xc],r11
800056da:	30 1c       	mov	r12,1
800056dc:	c0 58       	rjmp	800056e6 <_free_r+0xba>
800056de:	72 2b       	ld.w	r11,r9[0x8]
800056e0:	72 39       	ld.w	r9,r9[0xc]
800056e2:	93 2b       	st.w	r9[0x8],r11
800056e4:	97 39       	st.w	r11[0xc],r9
800056e6:	10 99       	mov	r9,r8
800056e8:	ec 08 09 08 	st.w	r6[r8],r8
800056ec:	a1 a9       	sbr	r9,0x0
800056ee:	8d 19       	st.w	r6[0x4],r9
800056f0:	58 0c       	cp.w	r12,0
800056f2:	c6 01       	brne	800057b2 <_free_r+0x186>
800056f4:	e0 48 01 ff 	cp.w	r8,511
800056f8:	e0 8b 00 13 	brhi	8000571e <_free_r+0xf2>
800056fc:	a3 98       	lsr	r8,0x3
800056fe:	f4 08 00 39 	add	r9,r10,r8<<0x3
80005702:	72 2b       	ld.w	r11,r9[0x8]
80005704:	8d 39       	st.w	r6[0xc],r9
80005706:	8d 2b       	st.w	r6[0x8],r11
80005708:	97 36       	st.w	r11[0xc],r6
8000570a:	93 26       	st.w	r9[0x8],r6
8000570c:	a3 48       	asr	r8,0x2
8000570e:	74 19       	ld.w	r9,r10[0x4]
80005710:	30 1b       	mov	r11,1
80005712:	f6 08 09 48 	lsl	r8,r11,r8
80005716:	f3 e8 10 08 	or	r8,r9,r8
8000571a:	95 18       	st.w	r10[0x4],r8
8000571c:	c4 b8       	rjmp	800057b2 <_free_r+0x186>
8000571e:	f0 0b 16 09 	lsr	r11,r8,0x9
80005722:	58 4b       	cp.w	r11,4
80005724:	e0 8b 00 06 	brhi	80005730 <_free_r+0x104>
80005728:	f0 0b 16 06 	lsr	r11,r8,0x6
8000572c:	2c 8b       	sub	r11,-56
8000572e:	c2 68       	rjmp	8000577a <_free_r+0x14e>
80005730:	59 4b       	cp.w	r11,20
80005732:	e0 8b 00 04 	brhi	8000573a <_free_r+0x10e>
80005736:	2a 5b       	sub	r11,-91
80005738:	c2 18       	rjmp	8000577a <_free_r+0x14e>
8000573a:	e0 4b 00 54 	cp.w	r11,84
8000573e:	e0 8b 00 06 	brhi	8000574a <_free_r+0x11e>
80005742:	f0 0b 16 0c 	lsr	r11,r8,0xc
80005746:	29 2b       	sub	r11,-110
80005748:	c1 98       	rjmp	8000577a <_free_r+0x14e>
8000574a:	e0 4b 01 54 	cp.w	r11,340
8000574e:	e0 8b 00 06 	brhi	8000575a <_free_r+0x12e>
80005752:	f0 0b 16 0f 	lsr	r11,r8,0xf
80005756:	28 9b       	sub	r11,-119
80005758:	c1 18       	rjmp	8000577a <_free_r+0x14e>
8000575a:	e0 4b 05 54 	cp.w	r11,1364
8000575e:	e0 88 00 0b 	brls	80005774 <_free_r+0x148>
80005762:	37 eb       	mov	r11,126
80005764:	c0 b8       	rjmp	8000577a <_free_r+0x14e>
80005766:	d7 03       	nop
80005768:	00 00       	add	r0,r0
8000576a:	01 e4       	ld.ub	r4,r0[0x6]
8000576c:	00 00       	add	r0,r0
8000576e:	05 ec       	ld.ub	r12,r2[0x6]
80005770:	00 00       	add	r0,r0
80005772:	09 e0       	ld.ub	r0,r4[0x6]
80005774:	f0 0b 16 12 	lsr	r11,r8,0x12
80005778:	28 4b       	sub	r11,-124
8000577a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000577e:	78 29       	ld.w	r9,r12[0x8]
80005780:	18 39       	cp.w	r9,r12
80005782:	c0 e1       	brne	8000579e <_free_r+0x172>
80005784:	74 18       	ld.w	r8,r10[0x4]
80005786:	a3 4b       	asr	r11,0x2
80005788:	30 1c       	mov	r12,1
8000578a:	f8 0b 09 4b 	lsl	r11,r12,r11
8000578e:	f1 eb 10 0b 	or	r11,r8,r11
80005792:	12 98       	mov	r8,r9
80005794:	95 1b       	st.w	r10[0x4],r11
80005796:	c0 a8       	rjmp	800057aa <_free_r+0x17e>
80005798:	72 29       	ld.w	r9,r9[0x8]
8000579a:	18 39       	cp.w	r9,r12
8000579c:	c0 60       	breq	800057a8 <_free_r+0x17c>
8000579e:	72 1a       	ld.w	r10,r9[0x4]
800057a0:	e0 1a ff fc 	andl	r10,0xfffc
800057a4:	14 38       	cp.w	r8,r10
800057a6:	cf 93       	brcs	80005798 <_free_r+0x16c>
800057a8:	72 38       	ld.w	r8,r9[0xc]
800057aa:	8d 38       	st.w	r6[0xc],r8
800057ac:	8d 29       	st.w	r6[0x8],r9
800057ae:	93 36       	st.w	r9[0xc],r6
800057b0:	91 26       	st.w	r8[0x8],r6
800057b2:	0e 9c       	mov	r12,r7
800057b4:	fe b0 f5 b0 	rcall	80004314 <__malloc_unlock>
800057b8:	d8 22       	popm	r4-r7,pc
800057ba:	d7 03       	nop

800057bc <_fwalk>:
800057bc:	d4 31       	pushm	r0-r7,lr
800057be:	30 05       	mov	r5,0
800057c0:	16 91       	mov	r1,r11
800057c2:	f8 c7 ff 28 	sub	r7,r12,-216
800057c6:	0a 92       	mov	r2,r5
800057c8:	c4 2e       	rcall	8000544c <__sfp_lock_acquire>
800057ca:	3f f3       	mov	r3,-1
800057cc:	c1 68       	rjmp	800057f8 <_fwalk+0x3c>
800057ce:	6e 26       	ld.w	r6,r7[0x8]
800057d0:	6e 14       	ld.w	r4,r7[0x4]
800057d2:	2f 46       	sub	r6,-12
800057d4:	c0 c8       	rjmp	800057ec <_fwalk+0x30>
800057d6:	8c 08       	ld.sh	r8,r6[0x0]
800057d8:	e4 08 19 00 	cp.h	r8,r2
800057dc:	c0 70       	breq	800057ea <_fwalk+0x2e>
800057de:	8c 18       	ld.sh	r8,r6[0x2]
800057e0:	e6 08 19 00 	cp.h	r8,r3
800057e4:	c0 30       	breq	800057ea <_fwalk+0x2e>
800057e6:	5d 11       	icall	r1
800057e8:	18 45       	or	r5,r12
800057ea:	2a 46       	sub	r6,-92
800057ec:	20 14       	sub	r4,1
800057ee:	ec cc 00 0c 	sub	r12,r6,12
800057f2:	58 04       	cp.w	r4,0
800057f4:	cf 14       	brge	800057d6 <_fwalk+0x1a>
800057f6:	6e 07       	ld.w	r7,r7[0x0]
800057f8:	58 07       	cp.w	r7,0
800057fa:	ce a1       	brne	800057ce <_fwalk+0x12>
800057fc:	c2 9e       	rcall	8000544e <__sfp_lock_release>
800057fe:	0a 9c       	mov	r12,r5
80005800:	d8 32       	popm	r0-r7,pc
80005802:	d7 03       	nop

80005804 <__sclose>:
80005804:	d4 01       	pushm	lr
80005806:	96 7b       	ld.sh	r11,r11[0xe]
80005808:	c4 ac       	rcall	8000589c <_close_r>
8000580a:	d8 02       	popm	pc

8000580c <__sseek>:
8000580c:	d4 21       	pushm	r4-r7,lr
8000580e:	16 97       	mov	r7,r11
80005810:	96 7b       	ld.sh	r11,r11[0xe]
80005812:	cb 9c       	rcall	80005984 <_lseek_r>
80005814:	8e 68       	ld.sh	r8,r7[0xc]
80005816:	10 99       	mov	r9,r8
80005818:	ad c8       	cbr	r8,0xc
8000581a:	ad a9       	sbr	r9,0xc
8000581c:	5b fc       	cp.w	r12,-1
8000581e:	ef f8 0c 06 	st.heq	r7[0xc],r8
80005822:	ef f9 1c 06 	st.hne	r7[0xc],r9
80005826:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000582a:	d8 22       	popm	r4-r7,pc

8000582c <__swrite>:
8000582c:	d4 21       	pushm	r4-r7,lr
8000582e:	96 68       	ld.sh	r8,r11[0xc]
80005830:	16 97       	mov	r7,r11
80005832:	14 95       	mov	r5,r10
80005834:	12 94       	mov	r4,r9
80005836:	e2 18 01 00 	andl	r8,0x100,COH
8000583a:	18 96       	mov	r6,r12
8000583c:	c0 50       	breq	80005846 <__swrite+0x1a>
8000583e:	30 29       	mov	r9,2
80005840:	30 0a       	mov	r10,0
80005842:	96 7b       	ld.sh	r11,r11[0xe]
80005844:	ca 0c       	rcall	80005984 <_lseek_r>
80005846:	8e 68       	ld.sh	r8,r7[0xc]
80005848:	ad c8       	cbr	r8,0xc
8000584a:	08 99       	mov	r9,r4
8000584c:	0a 9a       	mov	r10,r5
8000584e:	8e 7b       	ld.sh	r11,r7[0xe]
80005850:	0c 9c       	mov	r12,r6
80005852:	ae 68       	st.h	r7[0xc],r8
80005854:	c1 0c       	rcall	80005874 <_write_r>
80005856:	d8 22       	popm	r4-r7,pc

80005858 <__sread>:
80005858:	d4 21       	pushm	r4-r7,lr
8000585a:	16 97       	mov	r7,r11
8000585c:	96 7b       	ld.sh	r11,r11[0xe]
8000585e:	ca 7c       	rcall	800059ac <_read_r>
80005860:	c0 65       	brlt	8000586c <__sread+0x14>
80005862:	6f 58       	ld.w	r8,r7[0x54]
80005864:	18 08       	add	r8,r12
80005866:	ef 48 00 54 	st.w	r7[84],r8
8000586a:	d8 22       	popm	r4-r7,pc
8000586c:	8e 68       	ld.sh	r8,r7[0xc]
8000586e:	ad c8       	cbr	r8,0xc
80005870:	ae 68       	st.h	r7[0xc],r8
80005872:	d8 22       	popm	r4-r7,pc

80005874 <_write_r>:
80005874:	d4 21       	pushm	r4-r7,lr
80005876:	16 98       	mov	r8,r11
80005878:	18 97       	mov	r7,r12
8000587a:	10 9c       	mov	r12,r8
8000587c:	30 08       	mov	r8,0
8000587e:	14 9b       	mov	r11,r10
80005880:	48 66       	lddpc	r6,80005898 <_write_r+0x24>
80005882:	12 9a       	mov	r10,r9
80005884:	8d 08       	st.w	r6[0x0],r8
80005886:	fe b0 f3 b5 	rcall	80003ff0 <_write>
8000588a:	5b fc       	cp.w	r12,-1
8000588c:	c0 51       	brne	80005896 <_write_r+0x22>
8000588e:	6c 08       	ld.w	r8,r6[0x0]
80005890:	58 08       	cp.w	r8,0
80005892:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005896:	d8 22       	popm	r4-r7,pc
80005898:	00 00       	add	r0,r0
8000589a:	0a 3c       	cp.w	r12,r5

8000589c <_close_r>:
8000589c:	d4 21       	pushm	r4-r7,lr
8000589e:	30 08       	mov	r8,0
800058a0:	18 97       	mov	r7,r12
800058a2:	48 76       	lddpc	r6,800058bc <_close_r+0x20>
800058a4:	16 9c       	mov	r12,r11
800058a6:	8d 08       	st.w	r6[0x0],r8
800058a8:	fe b0 fc 52 	rcall	8000514c <_close>
800058ac:	5b fc       	cp.w	r12,-1
800058ae:	c0 51       	brne	800058b8 <_close_r+0x1c>
800058b0:	6c 08       	ld.w	r8,r6[0x0]
800058b2:	58 08       	cp.w	r8,0
800058b4:	ef f8 1a 03 	st.wne	r7[0xc],r8
800058b8:	d8 22       	popm	r4-r7,pc
800058ba:	d7 03       	nop
800058bc:	00 00       	add	r0,r0
800058be:	0a 3c       	cp.w	r12,r5

800058c0 <_fclose_r>:
800058c0:	d4 21       	pushm	r4-r7,lr
800058c2:	18 96       	mov	r6,r12
800058c4:	16 97       	mov	r7,r11
800058c6:	58 0b       	cp.w	r11,0
800058c8:	c0 31       	brne	800058ce <_fclose_r+0xe>
800058ca:	16 95       	mov	r5,r11
800058cc:	c4 c8       	rjmp	80005964 <_fclose_r+0xa4>
800058ce:	fe b0 fd bf 	rcall	8000544c <__sfp_lock_acquire>
800058d2:	58 06       	cp.w	r6,0
800058d4:	c0 60       	breq	800058e0 <_fclose_r+0x20>
800058d6:	6c 68       	ld.w	r8,r6[0x18]
800058d8:	58 08       	cp.w	r8,0
800058da:	c0 31       	brne	800058e0 <_fclose_r+0x20>
800058dc:	0c 9c       	mov	r12,r6
800058de:	c0 be       	rcall	800054f4 <__sinit>
800058e0:	4a 28       	lddpc	r8,80005968 <_fclose_r+0xa8>
800058e2:	10 37       	cp.w	r7,r8
800058e4:	c0 31       	brne	800058ea <_fclose_r+0x2a>
800058e6:	6c 07       	ld.w	r7,r6[0x0]
800058e8:	c0 a8       	rjmp	800058fc <_fclose_r+0x3c>
800058ea:	4a 18       	lddpc	r8,8000596c <_fclose_r+0xac>
800058ec:	10 37       	cp.w	r7,r8
800058ee:	c0 31       	brne	800058f4 <_fclose_r+0x34>
800058f0:	6c 17       	ld.w	r7,r6[0x4]
800058f2:	c0 58       	rjmp	800058fc <_fclose_r+0x3c>
800058f4:	49 f8       	lddpc	r8,80005970 <_fclose_r+0xb0>
800058f6:	10 37       	cp.w	r7,r8
800058f8:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800058fc:	8e 69       	ld.sh	r9,r7[0xc]
800058fe:	30 08       	mov	r8,0
80005900:	f0 09 19 00 	cp.h	r9,r8
80005904:	c0 51       	brne	8000590e <_fclose_r+0x4e>
80005906:	fe b0 fd a4 	rcall	8000544e <__sfp_lock_release>
8000590a:	30 05       	mov	r5,0
8000590c:	c2 c8       	rjmp	80005964 <_fclose_r+0xa4>
8000590e:	0e 9b       	mov	r11,r7
80005910:	0c 9c       	mov	r12,r6
80005912:	fe b0 fd 15 	rcall	8000533c <_fflush_r>
80005916:	6e c8       	ld.w	r8,r7[0x30]
80005918:	18 95       	mov	r5,r12
8000591a:	58 08       	cp.w	r8,0
8000591c:	c0 60       	breq	80005928 <_fclose_r+0x68>
8000591e:	6e 8b       	ld.w	r11,r7[0x20]
80005920:	0c 9c       	mov	r12,r6
80005922:	5d 18       	icall	r8
80005924:	f9 b5 05 ff 	movlt	r5,-1
80005928:	8e 68       	ld.sh	r8,r7[0xc]
8000592a:	ed b8 00 07 	bld	r8,0x7
8000592e:	c0 41       	brne	80005936 <_fclose_r+0x76>
80005930:	6e 4b       	ld.w	r11,r7[0x10]
80005932:	0c 9c       	mov	r12,r6
80005934:	c7 ce       	rcall	8000562c <_free_r>
80005936:	6e db       	ld.w	r11,r7[0x34]
80005938:	58 0b       	cp.w	r11,0
8000593a:	c0 90       	breq	8000594c <_fclose_r+0x8c>
8000593c:	ee c8 ff bc 	sub	r8,r7,-68
80005940:	10 3b       	cp.w	r11,r8
80005942:	c0 30       	breq	80005948 <_fclose_r+0x88>
80005944:	0c 9c       	mov	r12,r6
80005946:	c7 3e       	rcall	8000562c <_free_r>
80005948:	30 08       	mov	r8,0
8000594a:	8f d8       	st.w	r7[0x34],r8
8000594c:	6f 2b       	ld.w	r11,r7[0x48]
8000594e:	58 0b       	cp.w	r11,0
80005950:	c0 60       	breq	8000595c <_fclose_r+0x9c>
80005952:	0c 9c       	mov	r12,r6
80005954:	c6 ce       	rcall	8000562c <_free_r>
80005956:	30 08       	mov	r8,0
80005958:	ef 48 00 48 	st.w	r7[72],r8
8000595c:	30 08       	mov	r8,0
8000595e:	ae 68       	st.h	r7[0xc],r8
80005960:	fe b0 fd 77 	rcall	8000544e <__sfp_lock_release>
80005964:	0a 9c       	mov	r12,r5
80005966:	d8 22       	popm	r4-r7,pc
80005968:	80 00       	ld.sh	r0,r0[0x0]
8000596a:	5d 1c       	icall	r12
8000596c:	80 00       	ld.sh	r0,r0[0x0]
8000596e:	5d 3c       	musfr	r12
80005970:	80 00       	ld.sh	r0,r0[0x0]
80005972:	5d 5c       	*unknown*

80005974 <fclose>:
80005974:	d4 01       	pushm	lr
80005976:	48 38       	lddpc	r8,80005980 <fclose+0xc>
80005978:	18 9b       	mov	r11,r12
8000597a:	70 0c       	ld.w	r12,r8[0x0]
8000597c:	ca 2f       	rcall	800058c0 <_fclose_r>
8000597e:	d8 02       	popm	pc
80005980:	00 00       	add	r0,r0
80005982:	01 e0       	ld.ub	r0,r0[0x6]

80005984 <_lseek_r>:
80005984:	d4 21       	pushm	r4-r7,lr
80005986:	16 98       	mov	r8,r11
80005988:	18 97       	mov	r7,r12
8000598a:	10 9c       	mov	r12,r8
8000598c:	30 08       	mov	r8,0
8000598e:	14 9b       	mov	r11,r10
80005990:	48 66       	lddpc	r6,800059a8 <_lseek_r+0x24>
80005992:	12 9a       	mov	r10,r9
80005994:	8d 08       	st.w	r6[0x0],r8
80005996:	fe b0 fb e7 	rcall	80005164 <_lseek>
8000599a:	5b fc       	cp.w	r12,-1
8000599c:	c0 51       	brne	800059a6 <_lseek_r+0x22>
8000599e:	6c 08       	ld.w	r8,r6[0x0]
800059a0:	58 08       	cp.w	r8,0
800059a2:	ef f8 1a 03 	st.wne	r7[0xc],r8
800059a6:	d8 22       	popm	r4-r7,pc
800059a8:	00 00       	add	r0,r0
800059aa:	0a 3c       	cp.w	r12,r5

800059ac <_read_r>:
800059ac:	d4 21       	pushm	r4-r7,lr
800059ae:	16 98       	mov	r8,r11
800059b0:	18 97       	mov	r7,r12
800059b2:	10 9c       	mov	r12,r8
800059b4:	30 08       	mov	r8,0
800059b6:	14 9b       	mov	r11,r10
800059b8:	48 66       	lddpc	r6,800059d0 <_read_r+0x24>
800059ba:	12 9a       	mov	r10,r9
800059bc:	8d 08       	st.w	r6[0x0],r8
800059be:	fe b0 f2 8b 	rcall	80003ed4 <_read>
800059c2:	5b fc       	cp.w	r12,-1
800059c4:	c0 51       	brne	800059ce <_read_r+0x22>
800059c6:	6c 08       	ld.w	r8,r6[0x0]
800059c8:	58 08       	cp.w	r8,0
800059ca:	ef f8 1a 03 	st.wne	r7[0xc],r8
800059ce:	d8 22       	popm	r4-r7,pc
800059d0:	00 00       	add	r0,r0
800059d2:	0a 3c       	cp.w	r12,r5

800059d4 <__do_global_ctors_aux>:
800059d4:	d4 21       	pushm	r4-r7,lr
800059d6:	48 57       	lddpc	r7,800059e8 <__do_global_ctors_aux+0x14>
800059d8:	c0 28       	rjmp	800059dc <__do_global_ctors_aux+0x8>
800059da:	5d 18       	icall	r8
800059dc:	20 47       	sub	r7,4
800059de:	6e 08       	ld.w	r8,r7[0x0]
800059e0:	5b f8       	cp.w	r8,-1
800059e2:	cf c1       	brne	800059da <__do_global_ctors_aux+0x6>
800059e4:	d8 22       	popm	r4-r7,pc
800059e6:	d7 03       	nop
800059e8:	00 00       	add	r0,r0
800059ea:	00 0c       	add	r12,r0

Disassembly of section .exception:

80005a00 <_evba>:
80005a00:	c0 08       	rjmp	80005a00 <_evba>
	...

80005a04 <_handle_TLB_Multiple_Hit>:
80005a04:	c0 08       	rjmp	80005a04 <_handle_TLB_Multiple_Hit>
	...

80005a08 <_handle_Bus_Error_Data_Fetch>:
80005a08:	c0 08       	rjmp	80005a08 <_handle_Bus_Error_Data_Fetch>
	...

80005a0c <_handle_Bus_Error_Instruction_Fetch>:
80005a0c:	c0 08       	rjmp	80005a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80005a10 <_handle_NMI>:
80005a10:	c0 08       	rjmp	80005a10 <_handle_NMI>
	...

80005a14 <_handle_Instruction_Address>:
80005a14:	c0 08       	rjmp	80005a14 <_handle_Instruction_Address>
	...

80005a18 <_handle_ITLB_Protection>:
80005a18:	c0 08       	rjmp	80005a18 <_handle_ITLB_Protection>
	...

80005a1c <_handle_Breakpoint>:
80005a1c:	c0 08       	rjmp	80005a1c <_handle_Breakpoint>
	...

80005a20 <_handle_Illegal_Opcode>:
80005a20:	c0 08       	rjmp	80005a20 <_handle_Illegal_Opcode>
	...

80005a24 <_handle_Unimplemented_Instruction>:
80005a24:	c0 08       	rjmp	80005a24 <_handle_Unimplemented_Instruction>
	...

80005a28 <_handle_Privilege_Violation>:
80005a28:	c0 08       	rjmp	80005a28 <_handle_Privilege_Violation>
	...

80005a2c <_handle_Floating_Point>:
80005a2c:	c0 08       	rjmp	80005a2c <_handle_Floating_Point>
	...

80005a30 <_handle_Coprocessor_Absent>:
80005a30:	c0 08       	rjmp	80005a30 <_handle_Coprocessor_Absent>
	...

80005a34 <_handle_Data_Address_Read>:
80005a34:	c0 08       	rjmp	80005a34 <_handle_Data_Address_Read>
	...

80005a38 <_handle_Data_Address_Write>:
80005a38:	c0 08       	rjmp	80005a38 <_handle_Data_Address_Write>
	...

80005a3c <_handle_DTLB_Protection_Read>:
80005a3c:	c0 08       	rjmp	80005a3c <_handle_DTLB_Protection_Read>
	...

80005a40 <_handle_DTLB_Protection_Write>:
80005a40:	c0 08       	rjmp	80005a40 <_handle_DTLB_Protection_Write>
	...

80005a44 <_handle_DTLB_Modified>:
80005a44:	c0 08       	rjmp	80005a44 <_handle_DTLB_Modified>
	...

80005a50 <_handle_ITLB_Miss>:
80005a50:	c0 08       	rjmp	80005a50 <_handle_ITLB_Miss>
	...

80005a60 <_handle_DTLB_Miss_Read>:
80005a60:	c0 08       	rjmp	80005a60 <_handle_DTLB_Miss_Read>
	...

80005a70 <_handle_DTLB_Miss_Write>:
80005a70:	c0 08       	rjmp	80005a70 <_handle_DTLB_Miss_Write>
	...

80005b00 <_handle_Supervisor_Call>:
80005b00:	fe cf 19 40 	sub	pc,pc,6464

80005b04 <_int0>:
80005b04:	30 0c       	mov	r12,0
80005b06:	fe b0 e3 dd 	rcall	800022c0 <_get_interrupt_handler>
80005b0a:	58 0c       	cp.w	r12,0
80005b0c:	f8 0f 17 10 	movne	pc,r12
80005b10:	d6 03       	rete

80005b12 <_int1>:
80005b12:	30 1c       	mov	r12,1
80005b14:	fe b0 e3 d6 	rcall	800022c0 <_get_interrupt_handler>
80005b18:	58 0c       	cp.w	r12,0
80005b1a:	f8 0f 17 10 	movne	pc,r12
80005b1e:	d6 03       	rete

80005b20 <_int2>:
80005b20:	30 2c       	mov	r12,2
80005b22:	fe b0 e3 cf 	rcall	800022c0 <_get_interrupt_handler>
80005b26:	58 0c       	cp.w	r12,0
80005b28:	f8 0f 17 10 	movne	pc,r12
80005b2c:	d6 03       	rete

80005b2e <_int3>:
80005b2e:	30 3c       	mov	r12,3
80005b30:	fe b0 e3 c8 	rcall	800022c0 <_get_interrupt_handler>
80005b34:	58 0c       	cp.w	r12,0
80005b36:	f8 0f 17 10 	movne	pc,r12
80005b3a:	d6 03       	rete

80005b3c <ipr_val>:
80005b3c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
80005b4c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005b5c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005b6c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005b7c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005b8c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005b9c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bbc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bcc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bdc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bfc:	d7 03 d7 03                                         ....

Disassembly of section .fini:

80005c00 <_fini>:
80005c00:	eb cd 40 40 	pushm	r6,lr
80005c04:	48 26       	lddpc	r6,80005c0c <_fini+0xc>
80005c06:	1e 26       	rsub	r6,pc
80005c08:	c0 48       	rjmp	80005c10 <_fini+0x10>
80005c0a:	d7 03       	nop
80005c0c:	80 00       	ld.sh	r0,r0[0x0]
80005c0e:	5b ea       	cp.w	r10,-2
80005c10:	fe b0 e2 3c 	rcall	80002088 <__do_global_dtors_aux>
80005c14:	e3 cd 80 40 	ldm	sp++,r6,pc
