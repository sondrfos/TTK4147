
AVR32 FreeRTOS Template.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001a  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00003974  80002020  80002020  00002420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  80005a00  80005a00  00005e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  80005c00  80005c00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000164  80005c18  80005c18  00006018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000004  80005d7c  80005d7c  0000617c  2**0
                  ALLOC
  8 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  9 .ctors        00000008  00000008  80005d80  00006408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .dtors        00000008  00000010  80005d88  00006410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .jcr          00000004  00000018  80005d90  00006418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .got          00000000  0000001c  80005d94  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         000005d8  0000001c  80005d94  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00000430  00000610  00000610  00000000  2**2
                  ALLOC
 15 .heap         0000e5c0  00000a40  00000a40  00000000  2**0
                  ALLOC
 16 .comment      00000030  00000000  00000000  000069f4  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 00000cd8  00000000  00000000  00006a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_pubnames 000019b8  00000000  00000000  000076fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_info   00025b3d  00000000  00000000  000090b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004784  00000000  00000000  0002ebf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0000f03a  00000000  00000000  00033375  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_frame  00001dd4  00000000  00000000  000423b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00007de3  00000000  00000000  00044184  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_loc    00004442  00000000  00000000  0004bf67  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_macinfo 014adad4  00000000  00000000  000503a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 27 .debug_ranges 00000d60  00000000  00000000  014fde7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf ff e0 	sub	pc,pc,-32

Disassembly of section .init:

80002004 <_init>:
80002004:	eb cd 40 40 	pushm	r6,lr
80002008:	48 26       	lddpc	r6,80002010 <_init+0xc>
8000200a:	1e 26       	rsub	r6,pc
8000200c:	c0 48       	rjmp	80002014 <_init+0x10>
8000200e:	d7 03       	nop
80002010:	80 00       	ld.sh	r0,r0[0x0]
80002012:	1f ee       	ld.ub	lr,pc[0x6]
80002014:	c5 ec       	rcall	800020d0 <frame_dummy>
80002016:	e0 a0 1c b3 	rcall	8000597c <__do_global_ctors_aux>
8000201a:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002020 <_stext>:
80002020:	30 07       	mov	r7,0
80002022:	49 5a       	lddpc	r10,80002074 <_stext+0x54>
80002024:	5b fa       	cp.w	r10,-1
80002026:	f4 0d 17 10 	movne	sp,r10
8000202a:	49 4b       	lddpc	r11,80002078 <_stext+0x58>
8000202c:	49 4c       	lddpc	r12,8000207c <_stext+0x5c>
8000202e:	18 3b       	cp.w	r11,r12
80002030:	c0 60       	breq	8000203c <_stext+0x1c>
80002032:	49 4a       	lddpc	r10,80002080 <_stext+0x60>
80002034:	b7 09       	ld.d	r8,r11++
80002036:	b9 28       	st.d	r12++,r8
80002038:	14 3c       	cp.w	r12,r10
8000203a:	cf d5       	brlt	80002034 <_stext+0x14>
8000203c:	49 2a       	lddpc	r10,80002084 <_stext+0x64>
8000203e:	49 1c       	lddpc	r12,80002080 <_stext+0x60>
80002040:	30 08       	mov	r8,0
80002042:	30 09       	mov	r9,0
80002044:	b9 28       	st.d	r12++,r8
80002046:	14 3c       	cp.w	r12,r10
80002048:	cf e5       	brlt	80002044 <_stext+0x24>
8000204a:	e0 a0 11 5f 	rcall	80004308 <_init_startup>
8000204e:	fe cc c4 4e 	sub	r12,pc,-15282
80002052:	e0 a0 15 4b 	rcall	80004ae8 <atexit>
80002056:	cd 7f       	rcall	80002004 <_init>
80002058:	1a 9c       	mov	r12,sp
8000205a:	30 0b       	mov	r11,0
8000205c:	e0 a0 18 42 	rcall	800050e0 <_init_argv>
80002060:	5b fc       	cp.w	r12,-1
80002062:	f9 bc 00 00 	moveq	r12,0
80002066:	f9 ba 00 00 	moveq	r10,0
8000206a:	14 1d       	sub	sp,r10
8000206c:	e0 a0 14 f8 	rcall	80004a5c <main>
80002070:	e0 a0 15 44 	rcall	80004af8 <exit>
80002074:	00 01       	add	r1,r0
80002076:	00 00       	add	r0,r0
80002078:	80 00       	ld.sh	r0,r0[0x0]
8000207a:	5d 80       	*unknown*
8000207c:	00 00       	add	r0,r0
8000207e:	00 08       	add	r8,r0
80002080:	00 00       	add	r0,r0
80002082:	05 f8       	ld.ub	r8,r2[0x7]
80002084:	00 00       	add	r0,r0
80002086:	0a 40       	or	r0,r5

80002088 <__do_global_dtors_aux>:
80002088:	d4 21       	pushm	r4-r7,lr
8000208a:	48 e8       	lddpc	r8,800020c0 <__do_global_dtors_aux+0x38>
8000208c:	11 89       	ld.ub	r9,r8[0x0]
8000208e:	30 08       	mov	r8,0
80002090:	f0 09 18 00 	cp.b	r9,r8
80002094:	c1 41       	brne	800020bc <__do_global_dtors_aux+0x34>
80002096:	48 c8       	lddpc	r8,800020c4 <__do_global_dtors_aux+0x3c>
80002098:	48 c6       	lddpc	r6,800020c8 <__do_global_dtors_aux+0x40>
8000209a:	10 95       	mov	r5,r8
8000209c:	10 16       	sub	r6,r8
8000209e:	48 c7       	lddpc	r7,800020cc <__do_global_dtors_aux+0x44>
800020a0:	a3 46       	asr	r6,0x2
800020a2:	20 16       	sub	r6,1
800020a4:	c0 68       	rjmp	800020b0 <__do_global_dtors_aux+0x28>
800020a6:	2f f8       	sub	r8,-1
800020a8:	8f 08       	st.w	r7[0x0],r8
800020aa:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020ae:	5d 18       	icall	r8
800020b0:	6e 08       	ld.w	r8,r7[0x0]
800020b2:	0c 38       	cp.w	r8,r6
800020b4:	cf 93       	brcs	800020a6 <__do_global_dtors_aux+0x1e>
800020b6:	30 19       	mov	r9,1
800020b8:	48 28       	lddpc	r8,800020c0 <__do_global_dtors_aux+0x38>
800020ba:	b0 89       	st.b	r8[0x0],r9
800020bc:	d8 22       	popm	r4-r7,pc
800020be:	d7 03       	nop
800020c0:	00 00       	add	r0,r0
800020c2:	06 10       	sub	r0,r3
800020c4:	00 00       	add	r0,r0
800020c6:	00 10       	sub	r0,r0
800020c8:	00 00       	add	r0,r0
800020ca:	00 14       	sub	r4,r0
800020cc:	00 00       	add	r0,r0
800020ce:	06 14       	sub	r4,r3

800020d0 <frame_dummy>:
800020d0:	d4 01       	pushm	lr
800020d2:	48 5c       	lddpc	r12,800020e4 <frame_dummy+0x14>
800020d4:	78 08       	ld.w	r8,r12[0x0]
800020d6:	58 08       	cp.w	r8,0
800020d8:	c0 50       	breq	800020e2 <frame_dummy+0x12>
800020da:	48 48       	lddpc	r8,800020e8 <frame_dummy+0x18>
800020dc:	58 08       	cp.w	r8,0
800020de:	c0 20       	breq	800020e2 <frame_dummy+0x12>
800020e0:	5d 18       	icall	r8
800020e2:	d8 02       	popm	pc
800020e4:	00 00       	add	r0,r0
800020e6:	00 18       	sub	r8,r0
800020e8:	00 00       	add	r0,r0
	...

800020ec <board_init>:
#endif



void board_init (void)
{
800020ec:	d4 01       	pushm	lr
    gpio_configure_pin (LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800020ee:	30 3b       	mov	r11,3
800020f0:	32 3c       	mov	r12,35
800020f2:	f0 1f 00 0a 	mcall	80002118 <board_init+0x2c>
    gpio_configure_pin (LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800020f6:	30 3b       	mov	r11,3
800020f8:	34 9c       	mov	r12,73
800020fa:	f0 1f 00 08 	mcall	80002118 <board_init+0x2c>
    gpio_configure_pin (LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800020fe:	30 3b       	mov	r11,3
80002100:	32 2c       	mov	r12,34
80002102:	f0 1f 00 06 	mcall	80002118 <board_init+0x2c>
    gpio_configure_pin (LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002106:	30 3b       	mov	r11,3
80002108:	32 6c       	mov	r12,38
8000210a:	f0 1f 00 04 	mcall	80002118 <board_init+0x2c>

    gpio_configure_pin (GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
8000210e:	30 4b       	mov	r11,4
80002110:	32 1c       	mov	r12,33
80002112:	f0 1f 00 02 	mcall	80002118 <board_init+0x2c>
     * the platform Xplained board has configured basic clock settings,
     * GPIO pin mapping, interrupt controller options, etc.
     */
    sensor_board_init ();
#endif
}
80002116:	d8 02       	popm	pc
80002118:	80 00       	ld.sh	r0,r0[0x0]
8000211a:	21 1c       	sub	r12,17

8000211c <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
8000211c:	f8 08 16 05 	lsr	r8,r12,0x5
80002120:	a9 68       	lsl	r8,0x8
80002122:	e0 28 f0 00 	sub	r8,61440
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002126:	16 99       	mov	r9,r11
80002128:	e2 19 00 04 	andl	r9,0x4,COH
8000212c:	c0 70       	breq	8000213a <gpio_configure_pin+0x1e>
            gpio_port->puers = 1 << (pin & 0x1F);
8000212e:	30 19       	mov	r9,1
80002130:	f2 0c 09 49 	lsl	r9,r9,r12
80002134:	f1 49 00 74 	st.w	r8[116],r9
80002138:	c0 68       	rjmp	80002144 <gpio_configure_pin+0x28>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
8000213a:	30 19       	mov	r9,1
8000213c:	f2 0c 09 49 	lsl	r9,r9,r12
80002140:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80002144:	16 99       	mov	r9,r11
80002146:	e2 19 00 80 	andl	r9,0x80,COH
8000214a:	c2 40       	breq	80002192 <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
8000214c:	16 99       	mov	r9,r11
8000214e:	e2 19 01 80 	andl	r9,0x180,COH
80002152:	c0 90       	breq	80002164 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002154:	30 19       	mov	r9,1
80002156:	f2 0c 09 49 	lsl	r9,r9,r12
8000215a:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
8000215e:	f1 49 00 b8 	st.w	r8[184],r9
80002162:	c1 88       	rjmp	80002192 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_RISING)
80002164:	16 99       	mov	r9,r11
80002166:	e2 19 02 80 	andl	r9,0x280,COH
8000216a:	c0 90       	breq	8000217c <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
8000216c:	30 19       	mov	r9,1
8000216e:	f2 0c 09 49 	lsl	r9,r9,r12
80002172:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80002176:	f1 49 00 b8 	st.w	r8[184],r9
8000217a:	c0 c8       	rjmp	80002192 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
8000217c:	16 99       	mov	r9,r11
8000217e:	e2 19 03 80 	andl	r9,0x380,COH
80002182:	c0 80       	breq	80002192 <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002184:	30 19       	mov	r9,1
80002186:	f2 0c 09 49 	lsl	r9,r9,r12
8000218a:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
8000218e:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80002192:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002196:	c1 50       	breq	800021c0 <gpio_configure_pin+0xa4>
            if (flags & GPIO_INIT_HIGH)
80002198:	e2 1b 00 02 	andl	r11,0x2,COH
8000219c:	c0 70       	breq	800021aa <gpio_configure_pin+0x8e>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
8000219e:	30 19       	mov	r9,1
800021a0:	f2 0c 09 49 	lsl	r9,r9,r12
800021a4:	f1 49 00 54 	st.w	r8[84],r9
800021a8:	c0 68       	rjmp	800021b4 <gpio_configure_pin+0x98>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
800021aa:	30 19       	mov	r9,1
800021ac:	f2 0c 09 49 	lsl	r9,r9,r12
800021b0:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
800021b4:	30 19       	mov	r9,1
800021b6:	f2 0c 09 49 	lsl	r9,r9,r12
800021ba:	f1 49 00 44 	st.w	r8[68],r9
800021be:	c0 68       	rjmp	800021ca <gpio_configure_pin+0xae>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800021c0:	30 19       	mov	r9,1
800021c2:	f2 0c 09 49 	lsl	r9,r9,r12
800021c6:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800021ca:	30 19       	mov	r9,1
800021cc:	f2 0c 09 4c 	lsl	r12,r9,r12
800021d0:	91 1c       	st.w	r8[0x4],r12
}
800021d2:	5e fc       	retal	r12

800021d4 <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800021d4:	f8 08 16 05 	lsr	r8,r12,0x5
800021d8:	a9 68       	lsl	r8,0x8
800021da:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
800021de:	71 88       	ld.w	r8,r8[0x60]
800021e0:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800021e4:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800021e8:	5e fc       	retal	r12

800021ea <gpio_set_gpio_pin>:
}


void gpio_set_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800021ea:	f8 08 16 05 	lsr	r8,r12,0x5
800021ee:	a9 68       	lsl	r8,0x8
800021f0:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
800021f4:	30 19       	mov	r9,1
800021f6:	f2 0c 09 4c 	lsl	r12,r9,r12
800021fa:	f1 4c 00 54 	st.w	r8[84],r12
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
800021fe:	f1 4c 00 44 	st.w	r8[68],r12
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80002202:	91 1c       	st.w	r8[0x4],r12
}
80002204:	5e fc       	retal	r12

80002206 <gpio_clr_gpio_pin>:
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
}

void gpio_clr_gpio_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002206:	f8 08 16 05 	lsr	r8,r12,0x5
8000220a:	a9 68       	lsl	r8,0x8
8000220c:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002210:	30 19       	mov	r9,1
80002212:	f2 0c 09 4c 	lsl	r12,r9,r12
80002216:	f1 4c 00 58 	st.w	r8[88],r12
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8000221a:	f1 4c 00 44 	st.w	r8[68],r12
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.  
8000221e:	91 1c       	st.w	r8[0x4],r12
}
80002220:	5e fc       	retal	r12

80002222 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002222:	c0 08       	rjmp	80002222 <_unhandled_interrupt>

80002224 <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002224:	f6 08 16 05 	lsr	r8,r11,0x5

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80002228:	48 99       	lddpc	r9,8000224c <INTC_register_interrupt+0x28>
8000222a:	f2 08 00 39 	add	r9,r9,r8<<0x3
8000222e:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002232:	72 19       	ld.w	r9,r9[0x4]
80002234:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
80002238:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000223c:	48 59       	lddpc	r9,80002250 <INTC_register_interrupt+0x2c>
8000223e:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002242:	fe 79 08 00 	mov	r9,-63488
80002246:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
8000224a:	5e fc       	retal	r12
8000224c:	80 00       	ld.sh	r0,r0[0x0]
8000224e:	5c 18       	scr	r8
80002250:	80 00       	ld.sh	r0,r0[0x0]
80002252:	5b 3c       	cp.w	r12,-13

80002254 <INTC_init_interrupts>:
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
}

void INTC_init_interrupts(void)
{
80002254:	d4 21       	pushm	r4-r7,lr
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
80002256:	49 18       	lddpc	r8,80002298 <INTC_init_interrupts+0x44>
80002258:	e3 b8 00 01 	mtsr	0x4,r8
8000225c:	49 0e       	lddpc	lr,8000229c <INTC_init_interrupts+0x48>
8000225e:	30 07       	mov	r7,0
80002260:	0e 94       	mov	r4,r7
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002262:	49 0c       	lddpc	r12,800022a0 <INTC_init_interrupts+0x4c>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002264:	49 08       	lddpc	r8,800022a4 <INTC_init_interrupts+0x50>
80002266:	70 05       	ld.w	r5,r8[0x0]
80002268:	fe 76 08 00 	mov	r6,-63488
8000226c:	c1 08       	rjmp	8000228c <INTC_init_interrupts+0x38>
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
8000226e:	08 98       	mov	r8,r4
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002270:	7c 1b       	ld.w	r11,lr[0x4]

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002272:	7c 0a       	ld.w	r10,lr[0x0]
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002274:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002278:	2f f8       	sub	r8,-1
8000227a:	10 3a       	cp.w	r10,r8
8000227c:	fe 9b ff fc 	brhi	80002274 <INTC_init_interrupts+0x20>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002280:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002284:	2f f7       	sub	r7,-1
80002286:	2f 8e       	sub	lr,-8
80002288:	59 e7       	cp.w	r7,30
8000228a:	c0 50       	breq	80002294 <INTC_init_interrupts+0x40>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
8000228c:	7c 08       	ld.w	r8,lr[0x0]
8000228e:	58 08       	cp.w	r8,0
80002290:	ce f1       	brne	8000226e <INTC_init_interrupts+0x1a>
80002292:	cf 7b       	rjmp	80002280 <INTC_init_interrupts+0x2c>
80002294:	d8 22       	popm	r4-r7,pc
80002296:	00 00       	add	r0,r0
80002298:	80 00       	ld.sh	r0,r0[0x0]
8000229a:	5a 00       	cp.w	r0,-32
8000229c:	80 00       	ld.sh	r0,r0[0x0]
8000229e:	5c 18       	scr	r8
800022a0:	80 00       	ld.sh	r0,r0[0x0]
800022a2:	22 22       	sub	r2,34
800022a4:	80 00       	ld.sh	r0,r0[0x0]
800022a6:	5b 3c       	cp.w	r12,-13

800022a8 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(unsigned int int_level)
{
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800022a8:	fe 78 08 00 	mov	r8,-63488
800022ac:	e0 69 00 83 	mov	r9,131
800022b0:	f2 0c 01 0c 	sub	r12,r9,r12
800022b4:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
  unsigned int int_req = AVR32_INTC.irr[int_grp];
800022b8:	f2 ca ff c0 	sub	r10,r9,-64
800022bc:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
800022c0:	58 08       	cp.w	r8,0
800022c2:	c0 21       	brne	800022c6 <_get_interrupt_handler+0x1e>
800022c4:	5e fd       	retal	0
800022c6:	f0 08 12 00 	clz	r8,r8
800022ca:	48 5a       	lddpc	r10,800022dc <_get_interrupt_handler+0x34>
800022cc:	f4 09 00 39 	add	r9,r10,r9<<0x3
800022d0:	f0 08 11 1f 	rsub	r8,r8,31
800022d4:	72 19       	ld.w	r9,r9[0x4]
800022d6:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
}
800022da:	5e fc       	retal	r12
800022dc:	80 00       	ld.sh	r0,r0[0x0]
800022de:	5c 18       	scr	r8

800022e0 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800022e0:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
800022e2:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800022e6:	99 a8       	st.w	r12[0x28],r8
}
800022e8:	5e fc       	retal	r12
800022ea:	d7 03       	nop

800022ec <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
800022ec:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
800022ee:	ec 5b bb 9f 	cp.w	r11,899999
800022f2:	e0 8b 00 04 	brhi	800022fa <pm_enable_osc0_crystal+0xe>
800022f6:	30 4b       	mov	r11,4
800022f8:	c1 38       	rjmp	8000231e <pm_enable_osc0_crystal+0x32>
800022fa:	e0 68 c6 bf 	mov	r8,50879
800022fe:	ea 18 00 2d 	orh	r8,0x2d
80002302:	10 3b       	cp.w	r11,r8
80002304:	e0 8b 00 04 	brhi	8000230c <pm_enable_osc0_crystal+0x20>
80002308:	30 5b       	mov	r11,5
8000230a:	c0 a8       	rjmp	8000231e <pm_enable_osc0_crystal+0x32>
8000230c:	e0 68 12 00 	mov	r8,4608
80002310:	ea 18 00 7a 	orh	r8,0x7a
80002314:	10 3b       	cp.w	r11,r8
80002316:	f9 bb 03 06 	movlo	r11,6
8000231a:	f9 bb 02 07 	movhs	r11,7
8000231e:	f0 1f 00 02 	mcall	80002324 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002322:	d8 02       	popm	pc
80002324:	80 00       	ld.sh	r0,r0[0x0]
80002326:	22 e0       	sub	r0,46

80002328 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002328:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
8000232a:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000232e:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002330:	78 08       	ld.w	r8,r12[0x0]
80002332:	a3 a8       	sbr	r8,0x2
80002334:	99 08       	st.w	r12[0x0],r8
}
80002336:	5e fc       	retal	r12

80002338 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002338:	79 58       	ld.w	r8,r12[0x54]
8000233a:	e2 18 00 80 	andl	r8,0x80,COH
8000233e:	cf d0       	breq	80002338 <pm_wait_for_clk0_ready>
}
80002340:	5e fc       	retal	r12
80002342:	d7 03       	nop

80002344 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80002344:	eb cd 40 80 	pushm	r7,lr
80002348:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
8000234a:	f0 1f 00 04 	mcall	80002358 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
8000234e:	0e 9c       	mov	r12,r7
80002350:	f0 1f 00 03 	mcall	8000235c <pm_enable_clk0+0x18>
}
80002354:	e3 cd 80 80 	ldm	sp++,r7,pc
80002358:	80 00       	ld.sh	r0,r0[0x0]
8000235a:	23 28       	sub	r8,50
8000235c:	80 00       	ld.sh	r0,r0[0x0]
8000235e:	23 38       	sub	r8,51

80002360 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002360:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002362:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002366:	99 08       	st.w	r12[0x0],r8
}
80002368:	5e fc       	retal	r12
8000236a:	d7 03       	nop

8000236c <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
8000236c:	eb cd 40 c0 	pushm	r6-r7,lr
80002370:	18 97       	mov	r7,r12
80002372:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80002374:	f0 1f 00 06 	mcall	8000238c <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002378:	0c 9b       	mov	r11,r6
8000237a:	0e 9c       	mov	r12,r7
8000237c:	f0 1f 00 05 	mcall	80002390 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002380:	30 1b       	mov	r11,1
80002382:	0e 9c       	mov	r12,r7
80002384:	f0 1f 00 04 	mcall	80002394 <pm_switch_to_osc0+0x28>
}
80002388:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000238c:	80 00       	ld.sh	r0,r0[0x0]
8000238e:	22 ec       	sub	r12,46
80002390:	80 00       	ld.sh	r0,r0[0x0]
80002392:	23 44       	sub	r4,52
80002394:	80 00       	ld.sh	r0,r0[0x0]
80002396:	23 60       	sub	r0,54

80002398 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3C device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80002398:	d4 01       	pushm	lr
#ifndef AVR32_PM_VERSION_RESETVALUE
// Implementation for UC3A, UC3A3, UC3B parts.
  if(PCL_OSC0 == osc)
8000239a:	58 0c       	cp.w	r12,0
8000239c:	c0 40       	breq	800023a4 <pcl_switch_to_osc+0xc>
8000239e:	fe 7c d8 f0 	mov	r12,-10000
800023a2:	d8 02       	popm	pc
  {
    // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency,
    // enable the OSC0, set the main clock source as being OSC0.
    pm_switch_to_osc0(&AVR32_PM, fcrystal, startup);
800023a4:	fe 7c 0c 00 	mov	r12,-62464
800023a8:	f0 1f 00 02 	mcall	800023b0 <pcl_switch_to_osc+0x18>
800023ac:	d8 0a       	popm	pc,r12=0
800023ae:	00 00       	add	r0,r0
800023b0:	80 00       	ld.sh	r0,r0[0x0]
800023b2:	23 6c       	sub	r12,54

800023b4 <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
	return true;
}
800023b4:	5e ff       	retal	1

800023b6 <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
800023b6:	5e fd       	retal	0

800023b8 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
800023b8:	fe 68 00 00 	mov	r8,-131072
800023bc:	70 09       	ld.w	r9,r8[0x0]
800023be:	a7 d9       	cbr	r9,0x7
800023c0:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
800023c2:	70 09       	ld.w	r9,r8[0x0]
800023c4:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023c8:	e0 19 ff 80 	andl	r9,0xff80
800023cc:	f9 e9 10 09 	or	r9,r12,r9
800023d0:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800023d2:	70 09       	ld.w	r9,r8[0x0]
800023d4:	a7 b9       	sbr	r9,0x7
800023d6:	91 09       	st.w	r8[0x0],r9
}
800023d8:	5e fc       	retal	r12

800023da <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
800023da:	fe 68 00 00 	mov	r8,-131072
800023de:	70 0c       	ld.w	r12,r8[0x0]
}
800023e0:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023e4:	5e fc       	retal	r12

800023e6 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
800023e6:	fe 68 00 00 	mov	r8,-131072
800023ea:	70 8c       	ld.w	r12,r8[0x20]
}
800023ec:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
800023f0:	5e fc       	retal	r12

800023f2 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
800023f2:	fe 68 00 00 	mov	r8,-131072
800023f6:	70 8c       	ld.w	r12,r8[0x20]
}
800023f8:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
800023fc:	5e fc       	retal	r12
800023fe:	d7 03       	nop

80002400 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
80002400:	48 28       	lddpc	r8,80002408 <udd_set_setup_payload+0x8>
80002402:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
80002404:	b0 6b       	st.h	r8[0xc],r11
}
80002406:	5e fc       	retal	r12
80002408:	00 00       	add	r0,r0
8000240a:	0a 10       	sub	r0,r5

8000240c <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
8000240c:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002410:	a3 68       	lsl	r8,0x2
80002412:	e0 38 fe 40 	sub	r8,130624
80002416:	70 0c       	ld.w	r12,r8[0x0]
}
80002418:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
8000241c:	5e fc       	retal	r12
8000241e:	d7 03       	nop

80002420 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80002420:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index)
80002424:	30 38       	mov	r8,3
80002426:	f0 0c 18 00 	cp.b	r12,r8
8000242a:	e0 8b 00 35 	brhi	80002494 <udd_ep_set_halt+0x74>
		return false;

	ptr_job = &udd_ep_job[index - 1];
8000242e:	18 99       	mov	r9,r12
80002430:	f8 c8 00 01 	sub	r8,r12,1
80002434:	a5 68       	lsl	r8,0x4
80002436:	49 9a       	lddpc	r10,80002498 <udd_ep_set_halt+0x78>
80002438:	f4 08 00 08 	add	r8,r10,r8
	if (ptr_job->busy == true) {
8000243c:	70 0a       	ld.w	r10,r8[0x0]
8000243e:	58 0a       	cp.w	r10,0
80002440:	c2 a5       	brlt	80002494 <udd_ep_set_halt+0x74>
		return false;	// Job on going, stall impossible
	}
	
	if (0 != udd_nb_busy_bank(index)) {
80002442:	a3 69       	lsl	r9,0x2
80002444:	fe 6b 01 30 	mov	r11,-130768
80002448:	f2 0b 00 0a 	add	r10,r9,r11
8000244c:	74 0a       	ld.w	r10,r10[0x0]
8000244e:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
80002452:	c1 10       	breq	80002474 <udd_ep_set_halt+0x54>
		// Wait end of transfer on USB line before stall endpoint
		// Flag a stall requested
		ptr_job->stall_requested = true;
80002454:	70 0b       	ld.w	r11,r8[0x0]
80002456:	30 1a       	mov	r10,1
80002458:	f7 da d3 81 	bfins	r11,r10,0x1c,0x1
8000245c:	91 0b       	st.w	r8[0x0],r11
		udd_enable_bank_interrupt(index);
8000245e:	e0 39 fe 10 	sub	r9,130576
80002462:	e0 68 10 00 	mov	r8,4096
80002466:	93 08       	st.w	r9[0x0],r8
		udd_enable_endpoint_interrupt(index);
80002468:	f0 0c 09 4c 	lsl	r12,r8,r12
8000246c:	fe 69 00 00 	mov	r9,-131072
80002470:	93 6c       	st.w	r9[0x18],r12
80002472:	5e fa       	retal	r10
	} else {
		// Stall endpoint
		udd_disable_endpoint_bank_autoswitch(index);
80002474:	fe 6a 01 00 	mov	r10,-130816
80002478:	f2 0a 00 08 	add	r8,r9,r10
8000247c:	70 0a       	ld.w	r10,r8[0x0]
8000247e:	a9 da       	cbr	r10,0x9
80002480:	91 0a       	st.w	r8[0x0],r10
		udd_enable_stall_handshake(index);
80002482:	e0 39 fe 10 	sub	r9,130576
80002486:	e8 68 00 00 	mov	r8,524288
8000248a:	93 08       	st.w	r9[0x0],r8
		udd_reset_data_toggle(index);
8000248c:	e4 68 00 00 	mov	r8,262144
80002490:	93 08       	st.w	r9[0x0],r8
80002492:	5e ff       	retal	1
80002494:	5e fd       	retal	0
80002496:	00 00       	add	r0,r0
80002498:	00 00       	add	r0,r0
8000249a:	07 28       	ld.uh	r8,r3++

8000249c <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
8000249c:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000249e:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
800024a2:	30 38       	mov	r8,3
800024a4:	f0 0c 18 00 	cp.b	r12,r8
800024a8:	e0 88 00 03 	brls	800024ae <udd_ep_clear_halt+0x12>
800024ac:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
800024ae:	f8 c8 00 01 	sub	r8,r12,1
800024b2:	a5 68       	lsl	r8,0x4
800024b4:	49 69       	lddpc	r9,8000250c <udd_ep_clear_halt+0x70>
800024b6:	f2 08 00 08 	add	r8,r9,r8

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
800024ba:	a3 6c       	lsl	r12,0x2
800024bc:	fe 6a 01 c0 	mov	r10,-130624
800024c0:	f8 0a 00 09 	add	r9,r12,r10
800024c4:	72 09       	ld.w	r9,r9[0x0]
800024c6:	e6 19 00 08 	andh	r9,0x8,COH
800024ca:	c0 51       	brne	800024d4 <udd_ep_clear_halt+0x38>
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
800024cc:	70 09       	ld.w	r9,r8[0x0]
800024ce:	e6 19 10 00 	andh	r9,0x1000,COH
800024d2:	c1 c0       	breq	8000250a <udd_ep_clear_halt+0x6e>
		// Remove request to stall
		ptr_job->stall_requested = false;
800024d4:	70 09       	ld.w	r9,r8[0x0]
800024d6:	30 0a       	mov	r10,0
800024d8:	f3 da d3 81 	bfins	r9,r10,0x1c,0x1
800024dc:	91 09       	st.w	r8[0x0],r9
		// Remove stall
		udd_disable_stall_handshake(ep);
800024de:	fe 6a 02 20 	mov	r10,-130528
800024e2:	f8 0a 00 09 	add	r9,r12,r10
800024e6:	e8 6a 00 00 	mov	r10,524288
800024ea:	93 0a       	st.w	r9[0x0],r10
		udd_enable_endpoint_bank_autoswitch(ep);	
800024ec:	e0 3c ff 00 	sub	r12,130816
800024f0:	78 09       	ld.w	r9,r12[0x0]
800024f2:	a9 b9       	sbr	r9,0x9
800024f4:	99 09       	st.w	r12[0x0],r9
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
800024f6:	70 09       	ld.w	r9,r8[0x0]
800024f8:	58 09       	cp.w	r9,0
800024fa:	c0 84       	brge	8000250a <udd_ep_clear_halt+0x6e>
			ptr_job->busy = false;
800024fc:	30 0a       	mov	r10,0
800024fe:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
80002502:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
80002504:	70 38       	ld.w	r8,r8[0xc]
80002506:	5d 18       	icall	r8
80002508:	da 0a       	popm	pc,r12=1
8000250a:	da 0a       	popm	pc,r12=1
8000250c:	00 00       	add	r0,r0
8000250e:	07 28       	ld.uh	r8,r3++

80002510 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002510:	30 59       	mov	r9,5
80002512:	48 58       	lddpc	r8,80002524 <udd_ctrl_stall_data+0x14>
80002514:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80002516:	e8 69 00 00 	mov	r9,524288
8000251a:	fe 68 01 f0 	mov	r8,-130576
8000251e:	91 09       	st.w	r8[0x0],r9
}
80002520:	5e fc       	retal	r12
80002522:	00 00       	add	r0,r0
80002524:	00 00       	add	r0,r0
80002526:	07 5c       	ld.sh	r12,--r3

80002528 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
80002528:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
8000252a:	48 48       	lddpc	r8,80002538 <udd_ctrl_endofrequest+0x10>
8000252c:	70 48       	ld.w	r8,r8[0x10]
8000252e:	58 08       	cp.w	r8,0
80002530:	c0 20       	breq	80002534 <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
80002532:	5d 18       	icall	r8
80002534:	d8 02       	popm	pc
80002536:	00 00       	add	r0,r0
80002538:	00 00       	add	r0,r0
8000253a:	0a 10       	sub	r0,r5

8000253c <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort)
{
8000253c:	d4 01       	pushm	lr
8000253e:	16 99       	mov	r9,r11
	if (ptr_job->busy == false)
80002540:	78 08       	ld.w	r8,r12[0x0]
80002542:	58 08       	cp.w	r8,0
80002544:	c0 b4       	brge	8000255a <udd_ep_finish_job+0x1e>
		return;	// No on-going job
	ptr_job->busy = false;
80002546:	30 0a       	mov	r10,0
80002548:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000254c:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans)
8000254e:	78 38       	ld.w	r8,r12[0xc]
80002550:	58 08       	cp.w	r8,0
80002552:	c0 40       	breq	8000255a <udd_ep_finish_job+0x1e>
		return;	// No callback linked to job
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80002554:	78 2b       	ld.w	r11,r12[0x8]
80002556:	12 9c       	mov	r12,r9
80002558:	5d 18       	icall	r8
8000255a:	d8 02       	popm	pc

8000255c <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
8000255c:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
8000255e:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002562:	20 18       	sub	r8,1
80002564:	a5 68       	lsl	r8,0x4
80002566:	30 1b       	mov	r11,1
80002568:	48 3c       	lddpc	r12,80002574 <udd_ep_abort_job+0x18>
8000256a:	10 0c       	add	r12,r8
8000256c:	f0 1f 00 03 	mcall	80002578 <udd_ep_abort_job+0x1c>
}
80002570:	d8 02       	popm	pc
80002572:	00 00       	add	r0,r0
80002574:	00 00       	add	r0,r0
80002576:	07 28       	ld.uh	r8,r3++
80002578:	80 00       	ld.sh	r0,r0[0x0]
8000257a:	25 3c       	sub	r12,83

8000257c <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
8000257c:	d4 01       	pushm	lr
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
8000257e:	fe 69 00 00 	mov	r9,-131072
80002582:	72 7b       	ld.w	r11,r9[0x1c]
80002584:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002588:	30 1a       	mov	r10,1
8000258a:	f4 08 09 4a 	lsl	r10,r10,r8
8000258e:	5c da       	com	r10
80002590:	16 6a       	and	r10,r11
80002592:	93 7a       	st.w	r9[0x1c],r10
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
80002594:	a3 68       	lsl	r8,0x2
80002596:	e0 38 ff 00 	sub	r8,130816
8000259a:	70 09       	ld.w	r9,r8[0x0]
8000259c:	a1 d9       	cbr	r9,0x1
8000259e:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
800025a0:	f0 1f 00 02 	mcall	800025a8 <udd_ep_free+0x2c>
}
800025a4:	d8 02       	popm	pc
800025a6:	00 00       	add	r0,r0
800025a8:	80 00       	ld.sh	r0,r0[0x0]
800025aa:	25 5c       	sub	r12,85

800025ac <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
800025ac:	eb cd 40 fc 	pushm	r2-r7,lr
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
800025b0:	fd dc c0 04 	bfextu	lr,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
800025b4:	30 37       	mov	r7,3
800025b6:	ee 0e 18 00 	cp.b	lr,r7
800025ba:	e0 8b 00 99 	brhi	800026ec <udd_ep_run+0x140>
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800025be:	fe 67 00 00 	mov	r7,-131072
800025c2:	6e 76       	ld.w	r6,r7[0x1c]
800025c4:	1c 95       	mov	r5,lr
800025c6:	30 17       	mov	r7,1
800025c8:	ee 0e 09 47 	lsl	r7,r7,lr
800025cc:	0c 67       	and	r7,r6
800025ce:	e0 80 00 8f 	breq	800026ec <udd_ep_run+0x140>
			|| Is_udd_endpoint_stall_requested(ep)
800025d2:	fc 06 15 02 	lsl	r6,lr,0x2
800025d6:	fe 64 01 c0 	mov	r4,-130624
800025da:	ec 04 00 07 	add	r7,r6,r4
800025de:	6e 07       	ld.w	r7,r7[0x0]
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800025e0:	e6 17 00 08 	andh	r7,0x8,COH
800025e4:	e0 81 00 84 	brne	800026ec <udd_ep_run+0x140>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
800025e8:	fc c7 00 01 	sub	r7,lr,1
800025ec:	a5 67       	lsl	r7,0x4
800025ee:	4c 14       	lddpc	r4,800026f0 <udd_ep_run+0x144>
800025f0:	e8 07 00 07 	add	r7,r4,r7

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested)
800025f4:	6e 04       	ld.w	r4,r7[0x0]
800025f6:	e6 14 10 00 	andh	r4,0x1000,COH
800025fa:	c7 91       	brne	800026ec <udd_ep_run+0x140>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800025fc:	e1 b4 00 00 	mfsr	r4,0x0
	cpu_irq_disable();
80002600:	d3 03       	ssrf	0x10
		return false;	// Endpoint is halted

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80002602:	6e 03       	ld.w	r3,r7[0x0]
80002604:	58 03       	cp.w	r3,0
80002606:	c0 54       	brge	80002610 <udd_ep_run+0x64>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002608:	e3 b4 00 00 	mtsr	0x0,r4
#endif
	barrier();
8000260c:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
	bool b_dir_in;
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
80002610:	f9 dc c0 e8 	bfextu	r12,r12,0x7,0x8
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
80002614:	6e 03       	ld.w	r3,r7[0x0]
80002616:	30 12       	mov	r2,1
80002618:	e7 d2 d3 e1 	bfins	r3,r2,0x1f,0x1
8000261c:	8f 03       	st.w	r7[0x0],r3
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000261e:	e3 b4 00 00 	mtsr	0x0,r4
	cpu_irq_restore(flags);
	ptr_job->buf = buf;
80002622:	8f 1a       	st.w	r7[0x4],r10
	ptr_job->call_trans = callback;
80002624:	8f 38       	st.w	r7[0xc],r8
	ptr_job->b_raise_dma = false;
80002626:	6e 08       	ld.w	r8,r7[0x0]
80002628:	30 04       	mov	r4,0
8000262a:	f1 d4 d3 a1 	bfins	r8,r4,0x1d,0x1
8000262e:	8f 08       	st.w	r7[0x0],r8

	// The USBB supports a maximum transfer size of 64KB
	if (0x10000 <= buf_size) {
80002630:	e0 49 ff ff 	cp.w	r9,65535
80002634:	e0 88 00 07 	brls	80002642 <udd_ep_run+0x96>
		// Transfer size = 64KB
		ptr_job->buf_size = 0x10000;
80002638:	e0 78 00 00 	mov	r8,65536
8000263c:	8f 28       	st.w	r7[0x8],r8
8000263e:	08 99       	mov	r9,r4
80002640:	c3 58       	rjmp	800026aa <udd_ep_run+0xfe>
		buf_size = 0;
	} else {
		ptr_job->buf_size = buf_size;
80002642:	8f 29       	st.w	r7[0x8],r9
		if (b_dir_in) {
80002644:	58 0c       	cp.w	r12,0
80002646:	c3 20       	breq	800026aa <udd_ep_run+0xfe>
			if (buf_size==0) {
80002648:	58 09       	cp.w	r9,0
8000264a:	c1 71       	brne	80002678 <udd_ep_run+0xcc>
				// The USB DMA can't send a empty buffer
				// thus we raise the DMA interrupt end of transfert 
				// to execute ZLP process
				ptr_job->b_raise_dma = true;
8000264c:	6e 08       	ld.w	r8,r7[0x0]
8000264e:	30 1c       	mov	r12,1
				ptr_job->b_send_zlp = true;
80002650:	bd b8       	sbr	r8,0x1d
80002652:	f1 dc d3 c1 	bfins	r8,r12,0x1e,0x1
80002656:	8f 08       	st.w	r7[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002658:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
8000265c:	d3 03       	ssrf	0x10
				flags = cpu_irq_save();
				udd_enable_endpoint_dma_interrupt(ep);
8000265e:	20 15       	sub	r5,1
80002660:	fc 19 02 00 	movh	r9,0x200
80002664:	f2 05 09 49 	lsl	r9,r9,r5
80002668:	fe 68 00 00 	mov	r8,-131072
8000266c:	91 69       	st.w	r8[0x18],r9
				udd_raise_endpoint_dma_interrupt(ep);
8000266e:	91 39       	st.w	r8[0xc],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002670:	e3 ba 00 00 	mtsr	0x0,r10
				cpu_irq_restore(flags);
				return true;
80002674:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
			}
			if (0 != buf_size % udd_get_endpoint_size(ep)) {
80002678:	e0 36 ff 00 	sub	r6,130816
8000267c:	6c 08       	ld.w	r8,r6[0x0]
8000267e:	f1 d8 c0 83 	bfextu	r8,r8,0x4,0x3
80002682:	30 86       	mov	r6,8
80002684:	ec 08 09 48 	lsl	r8,r6,r8
80002688:	20 18       	sub	r8,1
8000268a:	12 68       	and	r8,r9
8000268c:	c0 b0       	breq	800026a2 <udd_ep_run+0xf6>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
8000268e:	6e 08       	ld.w	r8,r7[0x0]
80002690:	30 0b       	mov	r11,0
80002692:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
80002696:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
80002698:	a5 6e       	lsl	lr,0x4
8000269a:	e0 3e fd 00 	sub	lr,130304
8000269e:	9d 1a       	st.w	lr[0x4],r10
800026a0:	c1 18       	rjmp	800026c2 <udd_ep_run+0x116>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
			}else{
				ptr_job->b_send_zlp = b_shortpacket;
800026a2:	6e 08       	ld.w	r8,r7[0x0]
800026a4:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
800026a8:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
800026aa:	a5 6e       	lsl	lr,0x4
800026ac:	e0 3e fd 00 	sub	lr,130304
800026b0:	9d 1a       	st.w	lr[0x4],r10
	if (b_shortpacket) {
800026b2:	58 0b       	cp.w	r11,0
800026b4:	c0 31       	brne	800026ba <udd_ep_run+0x10e>
800026b6:	30 08       	mov	r8,0
800026b8:	c0 68       	rjmp	800026c4 <udd_ep_run+0x118>
		if (b_dir_in) {
800026ba:	58 0c       	cp.w	r12,0
800026bc:	c0 31       	brne	800026c2 <udd_ep_run+0x116>
800026be:	31 48       	mov	r8,20
800026c0:	c0 28       	rjmp	800026c4 <udd_ep_run+0x118>
800026c2:	30 88       	mov	r8,8
		} else {
			udd_dma_ctrl = AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
					| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
		}
	}
	udd_dma_ctrl |= (buf_size <<
800026c4:	e8 18 00 21 	orl	r8,0x21
			AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
			& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
	udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800026c8:	f1 e9 11 09 	or	r9,r8,r9<<0x10
			AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;
	udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
800026cc:	9d 29       	st.w	lr[0x8],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026ce:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800026d2:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_endpoint_dma_interrupt(ep);
800026d4:	20 15       	sub	r5,1
800026d6:	fc 19 02 00 	movh	r9,0x200
800026da:	f2 05 09 45 	lsl	r5,r9,r5
800026de:	fe 69 00 00 	mov	r9,-131072
800026e2:	93 65       	st.w	r9[0x18],r5
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800026e4:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
800026e8:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
	cpu_irq_restore(flags);

	return true;
800026ec:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800026f0:	00 00       	add	r0,r0
800026f2:	07 28       	ld.uh	r8,r3++

800026f4 <udd_sleep_mode>:
 * 
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
800026f4:	58 0c       	cp.w	r12,0
800026f6:	c1 11       	brne	80002718 <udd_sleep_mode+0x24>
800026f8:	49 18       	lddpc	r8,8000273c <udd_sleep_mode+0x48>
800026fa:	11 89       	ld.ub	r9,r8[0x0]
800026fc:	30 08       	mov	r8,0
800026fe:	f0 09 18 00 	cp.b	r9,r8
80002702:	c1 a0       	breq	80002736 <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002704:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002708:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
8000270a:	48 e8       	lddpc	r8,80002740 <udd_sleep_mode+0x4c>
8000270c:	11 9a       	ld.ub	r10,r8[0x1]
8000270e:	2f fa       	sub	r10,-1
80002710:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002712:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002716:	c1 08       	rjmp	80002736 <udd_sleep_mode+0x42>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
80002718:	48 98       	lddpc	r8,8000273c <udd_sleep_mode+0x48>
8000271a:	11 89       	ld.ub	r9,r8[0x0]
8000271c:	30 08       	mov	r8,0
8000271e:	f0 09 18 00 	cp.b	r9,r8
80002722:	c0 a1       	brne	80002736 <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002724:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002728:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
8000272a:	48 68       	lddpc	r8,80002740 <udd_sleep_mode+0x4c>
8000272c:	11 9a       	ld.ub	r10,r8[0x1]
8000272e:	20 1a       	sub	r10,1
80002730:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002732:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
80002736:	48 28       	lddpc	r8,8000273c <udd_sleep_mode+0x48>
80002738:	b0 8c       	st.b	r8[0x0],r12
}
8000273a:	5e fc       	retal	r12
8000273c:	00 00       	add	r0,r0
8000273e:	07 58       	ld.sh	r8,--r3
80002740:	00 00       	add	r0,r0
80002742:	0a 28       	rsub	r8,r5

80002744 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
80002744:	d4 01       	pushm	lr
	otg_unfreeze_clock();
80002746:	fe 68 00 00 	mov	r8,-131072
8000274a:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000274e:	af c9       	cbr	r9,0xe
80002750:	f1 49 08 00 	st.w	r8[2048],r9
	// Detach device from the bus
	udd_detach_device();
80002754:	70 09       	ld.w	r9,r8[0x0]
80002756:	a9 a9       	sbr	r9,0x8
80002758:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
8000275a:	30 0c       	mov	r12,0
8000275c:	f0 1f 00 02 	mcall	80002764 <udd_detach+0x20>
}
80002760:	d8 02       	popm	pc
80002762:	00 00       	add	r0,r0
80002764:	80 00       	ld.sh	r0,r0[0x0]
80002766:	26 f4       	sub	r4,111

80002768 <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002768:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000276c:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI), 
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
8000276e:	30 1a       	mov	r10,1
80002770:	fe 69 02 20 	mov	r9,-130528
80002774:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002776:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
8000277a:	30 29       	mov	r9,2
8000277c:	fe 68 01 60 	mov	r8,-130720
80002780:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
80002782:	48 59       	lddpc	r9,80002794 <udd_ctrl_init+0x2c>
80002784:	30 08       	mov	r8,0
80002786:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80002788:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
8000278a:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
8000278c:	48 39       	lddpc	r9,80002798 <udd_ctrl_init+0x30>
8000278e:	93 08       	st.w	r9[0x0],r8
}
80002790:	5e fc       	retal	r12
80002792:	00 00       	add	r0,r0
80002794:	00 00       	add	r0,r0
80002796:	0a 10       	sub	r0,r5
80002798:	00 00       	add	r0,r0
8000279a:	07 5c       	ld.sh	r12,--r3

8000279c <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
8000279c:	30 39       	mov	r9,3
8000279e:	48 a8       	lddpc	r8,800027c4 <udd_ctrl_send_zlp_in+0x28>
800027a0:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027a2:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
800027a6:	d3 03       	ssrf	0x10
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
800027a8:	fe 6a 01 60 	mov	r10,-130720
800027ac:	30 19       	mov	r9,1
800027ae:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
800027b0:	fe 68 01 f0 	mov	r8,-130576
800027b4:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
800027b6:	30 89       	mov	r9,8
800027b8:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
800027ba:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800027bc:	e3 bb 00 00 	mtsr	0x0,r11
	cpu_irq_restore(flags);
}
800027c0:	5e fc       	retal	r12
800027c2:	00 00       	add	r0,r0
800027c4:	00 00       	add	r0,r0
800027c6:	07 5c       	ld.sh	r12,--r3

800027c8 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
800027c8:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027cc:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800027d0:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
800027d2:	30 1a       	mov	r10,1
800027d4:	fe 69 02 20 	mov	r9,-130528
800027d8:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800027da:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800027de:	4c 38       	lddpc	r8,800028e8 <udd_ctrl_in_sent+0x120>
800027e0:	70 08       	ld.w	r8,r8[0x0]
800027e2:	58 38       	cp.w	r8,3
800027e4:	c0 71       	brne	800027f2 <udd_ctrl_in_sent+0x2a>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
800027e6:	f0 1f 00 42 	mcall	800028ec <udd_ctrl_in_sent+0x124>
		// Reinitializes control endpoint management
		udd_ctrl_init();
800027ea:	f0 1f 00 42 	mcall	800028f0 <udd_ctrl_in_sent+0x128>
		return;
800027ee:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
800027f2:	4c 18       	lddpc	r8,800028f4 <udd_ctrl_in_sent+0x12c>
800027f4:	90 68       	ld.sh	r8,r8[0xc]
800027f6:	4c 19       	lddpc	r9,800028f8 <udd_ctrl_in_sent+0x130>
800027f8:	92 07       	ld.sh	r7,r9[0x0]
800027fa:	f0 07 01 07 	sub	r7,r8,r7
800027fe:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
80002800:	c3 b1       	brne	80002876 <udd_ctrl_in_sent+0xae>
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
80002802:	4b f9       	lddpc	r9,800028fc <udd_ctrl_in_sent+0x134>
80002804:	13 8a       	ld.ub	r10,r9[0x0]
80002806:	30 09       	mov	r9,0
80002808:	f2 0a 18 00 	cp.b	r10,r9
8000280c:	c1 21       	brne	80002830 <udd_ctrl_in_sent+0x68>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000280e:	30 49       	mov	r9,4
80002810:	4b 68       	lddpc	r8,800028e8 <udd_ctrl_in_sent+0x120>
80002812:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002814:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002818:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
8000281a:	31 08       	mov	r8,16
8000281c:	fe 6a 01 60 	mov	r10,-130720
80002820:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
80002822:	fe 6a 01 f0 	mov	r10,-130576
80002826:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002828:	e3 b9 00 00 	mtsr	0x0,r9
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
8000282c:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002830:	4b 19       	lddpc	r9,800028f4 <udd_ctrl_in_sent+0x12c>
80002832:	92 b9       	ld.uh	r9,r9[0x6]
80002834:	5c 78       	castu.h	r8
80002836:	4b 3a       	lddpc	r10,80002900 <udd_ctrl_in_sent+0x138>
80002838:	94 8a       	ld.uh	r10,r10[0x0]
8000283a:	14 08       	add	r8,r10
8000283c:	10 39       	cp.w	r9,r8
8000283e:	e0 89 00 08 	brgt	8000284e <udd_ctrl_in_sent+0x86>
								+
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
80002842:	4a d8       	lddpc	r8,800028f4 <udd_ctrl_in_sent+0x12c>
80002844:	70 5c       	ld.w	r12,r8[0x14]
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002846:	58 0c       	cp.w	r12,0
80002848:	c0 30       	breq	8000284e <udd_ctrl_in_sent+0x86>
8000284a:	5d 1c       	icall	r12
8000284c:	c0 51       	brne	80002856 <udd_ctrl_in_sent+0x8e>
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun or data packet complette than send zlp on IN (note don't change DataToggle)
			udd_ctrl_payload_need_in_zlp = false;
8000284e:	30 09       	mov	r9,0
80002850:	4a b8       	lddpc	r8,800028fc <udd_ctrl_in_sent+0x134>
80002852:	b0 89       	st.b	r8[0x0],r9
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002854:	c1 18       	rjmp	80002876 <udd_ctrl_in_sent+0xae>
			udd_ctrl_payload_need_in_zlp = false;
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
80002856:	4a b9       	lddpc	r9,80002900 <udd_ctrl_in_sent+0x138>
80002858:	4a 88       	lddpc	r8,800028f8 <udd_ctrl_in_sent+0x130>
8000285a:	90 0b       	ld.sh	r11,r8[0x0]
8000285c:	92 0a       	ld.sh	r10,r9[0x0]
8000285e:	f6 0a 00 0a 	add	r10,r11,r10
80002862:	b2 0a       	st.h	r9[0x0],r10
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
80002864:	30 09       	mov	r9,0
80002866:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
80002868:	4a 38       	lddpc	r8,800028f4 <udd_ctrl_in_sent+0x12c>
8000286a:	90 67       	ld.sh	r7,r8[0xc]
			// Compute if an IN ZLP must be send after IN data
			udd_ctrl_payload_need_in_zlp =
8000286c:	f1 d7 c0 06 	bfextu	r8,r7,0x0,0x6
80002870:	5f 09       	sreq	r9
80002872:	4a 38       	lddpc	r8,800028fc <udd_ctrl_in_sent+0x134>
80002874:	b0 89       	st.b	r8[0x0],r9
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002876:	4a 08       	lddpc	r8,800028f4 <udd_ctrl_in_sent+0x12c>
80002878:	70 2a       	ld.w	r10,r8[0x8]
8000287a:	4a 08       	lddpc	r8,800028f8 <udd_ctrl_in_sent+0x130>
8000287c:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000287e:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80002882:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write 
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
80002884:	fe 68 01 30 	mov	r8,-130768
80002888:	70 08       	ld.w	r8,r8[0x0]
8000288a:	e2 18 00 02 	andl	r8,0x2,COH
8000288e:	c0 91       	brne	800028a0 <udd_ctrl_in_sent+0xd8>
80002890:	34 08       	mov	r8,64
80002892:	f0 07 19 00 	cp.h	r7,r8
80002896:	f9 b7 0b 40 	movhi	r7,64
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
8000289a:	58 07       	cp.w	r7,0
8000289c:	c0 91       	brne	800028ae <udd_ctrl_in_sent+0xe6>
8000289e:	c1 48       	rjmp	800028c6 <udd_ctrl_in_sent+0xfe>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800028a0:	e3 bb 00 00 	mtsr	0x0,r11
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800028a4:	30 49       	mov	r9,4
800028a6:	49 18       	lddpc	r8,800028e8 <udd_ctrl_in_sent+0x120>
800028a8:	91 09       	st.w	r8[0x0],r9
		return;	// Exit of IN DATA phase
800028aa:	e3 cd 80 80 	ldm	sp++,r7,pc
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800028ae:	5c 79       	castu.h	r9
800028b0:	f4 09 00 09 	add	r9,r10,r9
800028b4:	fc 18 e0 00 	movh	r8,0xe000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
800028b8:	13 3a       	ld.ub	r10,r9++
800028ba:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800028bc:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800028c0:	ee 0a 19 00 	cp.h	r10,r7
800028c4:	cf a3       	brcs	800028b8 <udd_ctrl_in_sent+0xf0>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800028c6:	48 d8       	lddpc	r8,800028f8 <udd_ctrl_in_sent+0x130>
800028c8:	90 09       	ld.sh	r9,r8[0x0]
800028ca:	f2 07 00 07 	add	r7,r9,r7
800028ce:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800028d0:	30 18       	mov	r8,1
800028d2:	fe 69 01 60 	mov	r9,-130720
800028d6:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
800028d8:	fe 69 01 f0 	mov	r9,-130576
800028dc:	93 08       	st.w	r9[0x0],r8
800028de:	e3 bb 00 00 	mtsr	0x0,r11
#endif
	barrier();
800028e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800028e6:	00 00       	add	r0,r0
800028e8:	00 00       	add	r0,r0
800028ea:	07 5c       	ld.sh	r12,--r3
800028ec:	80 00       	ld.sh	r0,r0[0x0]
800028ee:	25 28       	sub	r8,82
800028f0:	80 00       	ld.sh	r0,r0[0x0]
800028f2:	27 68       	sub	r8,118
800028f4:	00 00       	add	r0,r0
800028f6:	0a 10       	sub	r0,r5
800028f8:	00 00       	add	r0,r0
800028fa:	07 5a       	ld.sh	r10,--r3
800028fc:	00 00       	add	r0,r0
800028fe:	07 60       	ld.uh	r0,--r3
80002900:	00 00       	add	r0,r0
80002902:	07 24       	ld.uh	r4,r3++

80002904 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80002904:	eb cd 40 e0 	pushm	r5-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
80002908:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP)
8000290c:	30 39       	mov	r9,3
8000290e:	f2 08 18 00 	cp.b	r8,r9
80002912:	e0 8b 00 88 	brhi	80002a22 <udd_ep_alloc+0x11e>
		return false;
	if (Is_udd_endpoint_enabled(ep))
80002916:	fe 69 00 00 	mov	r9,-131072
8000291a:	72 79       	ld.w	r9,r9[0x1c]
8000291c:	30 17       	mov	r7,1
8000291e:	ee 08 09 47 	lsl	r7,r7,r8
80002922:	ef e9 00 09 	and	r9,r7,r9
80002926:	c7 e1       	brne	80002a22 <udd_ep_alloc+0x11e>
		return false;

	// Bank choise
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80002928:	f3 db c0 02 	bfextu	r9,r11,0x0,0x2
8000292c:	58 19       	cp.w	r9,1
8000292e:	c7 a5       	brlt	80002a22 <udd_ep_alloc+0x11e>
80002930:	58 29       	cp.w	r9,2
80002932:	e0 8a 00 06 	brle	8000293e <udd_ep_alloc+0x3a>
80002936:	58 39       	cp.w	r9,3
80002938:	c7 51       	brne	80002a22 <udd_ep_alloc+0x11e>
8000293a:	30 06       	mov	r6,0
8000293c:	c0 28       	rjmp	80002940 <udd_ep_alloc+0x3c>
8000293e:	30 16       	mov	r6,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80002940:	f0 09 15 02 	lsl	r9,r8,0x2
80002944:	e0 39 ff 00 	sub	r9,130816
80002948:	72 0e       	ld.w	lr,r9[0x0]
8000294a:	5c 7a       	castu.h	r10
8000294c:	30 85       	mov	r5,8
8000294e:	f4 05 0c 4a 	max	r10,r10,r5
80002952:	e0 65 04 00 	mov	r5,1024
80002956:	f4 05 0d 4a 	min	r10,r10,r5
8000295a:	a1 7a       	lsl	r10,0x1
8000295c:	20 1a       	sub	r10,1
8000295e:	f4 0a 12 00 	clz	r10,r10
80002962:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
80002966:	ab 7b       	lsl	r11,0xb
80002968:	e2 1b 18 00 	andl	r11,0x1800,COH
8000296c:	f7 ec 10 8c 	or	r12,r11,r12<<0x8
80002970:	f4 0b 11 1c 	rsub	r11,r10,28
80002974:	f9 eb 10 4b 	or	r11,r12,r11<<0x4
80002978:	f7 e6 10 2b 	or	r11,r11,r6<<0x2
8000297c:	e2 1b 19 7c 	andl	r11,0x197c,COH
80002980:	1c 9a       	mov	r10,lr
80002982:	e0 1a e6 83 	andl	r10,0xe683
80002986:	f7 ea 10 0a 	or	r10,r11,r10
8000298a:	93 0a       	st.w	r9[0x0],r10
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
8000298c:	5c 87       	casts.h	r7

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
8000298e:	30 29       	mov	r9,2
80002990:	f2 08 18 00 	cp.b	r8,r9
80002994:	e0 8b 00 1d 	brhi	800029ce <udd_ep_alloc+0xca>
80002998:	fe 6a 01 0c 	mov	r10,-130804
8000299c:	30 39       	mov	r9,3
		if (Is_udd_endpoint_enabled(i)) {
8000299e:	fe 6c 00 00 	mov	r12,-131072
800029a2:	30 16       	mov	r6,1
800029a4:	78 7e       	ld.w	lr,r12[0x1c]
800029a6:	ec 09 09 4b 	lsl	r11,r6,r9
800029aa:	f7 ee 00 0e 	and	lr,r11,lr
800029ae:	c0 b0       	breq	800029c4 <udd_ep_alloc+0xc0>
			ep_allocated |= 1 << i;
800029b0:	f7 e7 10 07 	or	r7,r11,r7
800029b4:	5c 87       	casts.h	r7
			udd_disable_endpoint(i);
800029b6:	78 7e       	ld.w	lr,r12[0x1c]
800029b8:	5c db       	com	r11
800029ba:	1c 6b       	and	r11,lr
800029bc:	99 7b       	st.w	r12[0x1c],r11
			udd_unallocate_memory(i);
800029be:	74 0b       	ld.w	r11,r10[0x0]
800029c0:	a1 db       	cbr	r11,0x1
800029c2:	95 0b       	st.w	r10[0x0],r11
800029c4:	20 19       	sub	r9,1
800029c6:	20 4a       	sub	r10,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800029c8:	f2 08 18 00 	cp.b	r8,r9
800029cc:	ce c3       	brcs	800029a4 <udd_ep_alloc+0xa0>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
800029ce:	0e 9c       	mov	r12,r7
800029d0:	5c 7c       	castu.h	r12
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
800029d2:	fe 6e 00 00 	mov	lr,-131072
800029d6:	30 16       	mov	r6,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800029d8:	30 37       	mov	r7,3
		if (ep_allocated & (1 << i)) {
800029da:	f8 08 08 49 	asr	r9,r12,r8
800029de:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800029e2:	c1 80       	breq	80002a12 <udd_ep_alloc+0x10e>
			udd_allocate_memory(i);
800029e4:	f0 0b 15 02 	lsl	r11,r8,0x2
800029e8:	fe 65 01 00 	mov	r5,-130816
800029ec:	f6 05 00 09 	add	r9,r11,r5
800029f0:	72 05       	ld.w	r5,r9[0x0]
800029f2:	a1 b5       	sbr	r5,0x1
800029f4:	93 05       	st.w	r9[0x0],r5
			udd_enable_endpoint(i);
800029f6:	7c 75       	ld.w	r5,lr[0x1c]
800029f8:	ec 08 09 4a 	lsl	r10,r6,r8
800029fc:	0a 4a       	or	r10,r5
800029fe:	9d 7a       	st.w	lr[0x1c],r10
			if (!Is_udd_endpoint_configured(i))
80002a00:	e0 3b fe d0 	sub	r11,130768
80002a04:	76 0a       	ld.w	r10,r11[0x0]
80002a06:	e6 1a 00 04 	andh	r10,0x4,COH
80002a0a:	c0 c0       	breq	80002a22 <udd_ep_alloc+0x11e>
				return false;
			udd_enable_endpoint_bank_autoswitch(i);	
80002a0c:	72 0a       	ld.w	r10,r9[0x0]
80002a0e:	a9 ba       	sbr	r10,0x9
80002a10:	93 0a       	st.w	r9[0x0],r10
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80002a12:	2f f8       	sub	r8,-1
80002a14:	5c 58       	castu.b	r8
80002a16:	ee 08 18 00 	cp.b	r8,r7
80002a1a:	fe 98 ff e0 	brls	800029da <udd_ep_alloc+0xd6>
80002a1e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002a22:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0

80002a26 <udd_reset_ep_ctrl>:

static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
80002a26:	fe 68 00 00 	mov	r8,-131072
80002a2a:	70 09       	ld.w	r9,r8[0x0]
80002a2c:	e0 19 ff 80 	andl	r9,0xff80
80002a30:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80002a32:	70 09       	ld.w	r9,r8[0x0]
80002a34:	a7 b9       	sbr	r9,0x7
80002a36:	91 09       	st.w	r8[0x0],r9
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80002a38:	fe 69 01 00 	mov	r9,-130816
80002a3c:	72 0b       	ld.w	r11,r9[0x0]
80002a3e:	30 8c       	mov	r12,8
80002a40:	34 0a       	mov	r10,64
80002a42:	f4 0c 0c 4a 	max	r10,r10,r12
80002a46:	e0 6c 04 00 	mov	r12,1024
80002a4a:	f4 0c 0d 4a 	min	r10,r10,r12
80002a4e:	a1 7a       	lsl	r10,0x1
80002a50:	20 1a       	sub	r10,1
80002a52:	f4 0a 12 00 	clz	r10,r10
80002a56:	f4 0a 11 1c 	rsub	r10,r10,28
80002a5a:	a5 6a       	lsl	r10,0x4
80002a5c:	e2 1a 19 7c 	andl	r10,0x197c,COH
80002a60:	e0 1b e6 83 	andl	r11,0xe683
80002a64:	16 4a       	or	r10,r11
80002a66:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80002a68:	72 0a       	ld.w	r10,r9[0x0]
80002a6a:	a1 ba       	sbr	r10,0x1
80002a6c:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
80002a6e:	70 79       	ld.w	r9,r8[0x1c]
80002a70:	a1 a9       	sbr	r9,0x0
80002a72:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a74:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002a78:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
80002a7a:	fe 69 01 f0 	mov	r9,-130576
80002a7e:	30 4b       	mov	r11,4
80002a80:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80002a82:	30 2b       	mov	r11,2
80002a84:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
80002a86:	e0 69 10 00 	mov	r9,4096
80002a8a:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002a8c:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}
80002a90:	5e fc       	retal	r12
80002a92:	d7 03       	nop

80002a94 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80002a94:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a98:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002a9c:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80002a9e:	30 1c       	mov	r12,1
80002aa0:	f0 1f 00 15 	mcall	80002af4 <udd_attach+0x60>
	otg_unfreeze_clock();
80002aa4:	fe 67 00 00 	mov	r7,-131072
80002aa8:	ee f8 08 00 	ld.w	r8,r7[2048]
80002aac:	af c8       	cbr	r8,0xe
80002aae:	ef 48 08 00 	st.w	r7[2048],r8
#else
	// Check USB clock because the source can be a PLL
	while( !Is_clock_usable() );
#endif
	// Authorize attach if VBus is present
	udd_attach_device();
80002ab2:	6e 08       	ld.w	r8,r7[0x0]
80002ab4:	a9 c8       	cbr	r8,0x8
80002ab6:	8f 08       	st.w	r7[0x0],r8

	// (RESET_AND_WAKEUP)
	// After the attach and the first USB suspend, the following USB Reset time can be inferior to CPU restart clock time.
	// Thus, the USB Reset state is not detected and endpoint control is not allocated
	// In this case, a Reset is do automatically after attach.
	udc_reset();	// Reset USB Device Stack Core
80002ab8:	f0 1f 00 10 	mcall	80002af8 <udd_attach+0x64>
	udd_reset_ep_ctrl();	// Reset endpoint control
80002abc:	f0 1f 00 10 	mcall	80002afc <udd_attach+0x68>
	udd_ctrl_init();	// Reset endpoint control management
80002ac0:	f0 1f 00 10 	mcall	80002b00 <udd_attach+0x6c>

	// Enable USB line events
	udd_enable_reset_interrupt();
80002ac4:	30 8b       	mov	r11,8
80002ac6:	8f 6b       	st.w	r7[0x18],r11
	udd_enable_suspend_interrupt();
80002ac8:	30 19       	mov	r9,1
80002aca:	8f 69       	st.w	r7[0x18],r9
	udd_enable_wake_up_interrupt();
80002acc:	31 08       	mov	r8,16
80002ace:	8f 68       	st.w	r7[0x18],r8
	udd_enable_sof_interrupt();
80002ad0:	30 4a       	mov	r10,4
80002ad2:	8f 6a       	st.w	r7[0x18],r10
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
80002ad4:	8f 2b       	st.w	r7[0x8],r11
	udd_ack_sof();
80002ad6:	8f 2a       	st.w	r7[0x8],r10
	udd_ack_msof();
80002ad8:	30 2a       	mov	r10,2
80002ada:	8f 2a       	st.w	r7[0x8],r10

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
80002adc:	8f 29       	st.w	r7[0x8],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80002ade:	8f 28       	st.w	r7[0x8],r8
	otg_freeze_clock();
80002ae0:	ee f8 08 00 	ld.w	r8,r7[2048]
80002ae4:	af a8       	sbr	r8,0xe
80002ae6:	ef 48 08 00 	st.w	r7[2048],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002aea:	e3 b6 00 00 	mtsr	0x0,r6
	cpu_irq_restore(flags);
}
80002aee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002af2:	00 00       	add	r0,r0
80002af4:	80 00       	ld.sh	r0,r0[0x0]
80002af6:	26 f4       	sub	r4,111
80002af8:	80 00       	ld.sh	r0,r0[0x0]
80002afa:	39 c8       	mov	r8,-100
80002afc:	80 00       	ld.sh	r0,r0[0x0]
80002afe:	2a 26       	sub	r6,-94
80002b00:	80 00       	ld.sh	r0,r0[0x0]
80002b02:	27 68       	sub	r8,118

80002b04 <udd_enable>:
	return true;
}


void udd_enable(void)
{
80002b04:	eb cd 40 c0 	pushm	r6-r7,lr
	irqflags_t flags;
	sysclk_enable_usb();
80002b08:	f0 1f 00 39 	mcall	80002bec <udd_enable+0xe8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002b0c:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002b10:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

	//** Enable USB hardware
	otg_disable();
80002b12:	fe 67 00 00 	mov	r7,-131072
80002b16:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b1a:	af d8       	cbr	r8,0xf
80002b1c:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_enabled();
80002b20:	ee f8 08 00 	ld.w	r8,r7[2048]
	// Check UID pin state before enter in USB device mode
	if (!Is_otg_id_device())
		return false;
#else
	// Here, only the Device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(udd_interrupt, AVR32_USBB_IRQ, UDD_USB_INT_LEVEL);
80002b24:	30 0a       	mov	r10,0
80002b26:	e0 6b 02 20 	mov	r11,544
80002b2a:	4b 2c       	lddpc	r12,80002bf0 <udd_enable+0xec>
80002b2c:	f0 1f 00 32 	mcall	80002bf4 <udd_enable+0xf0>
	otg_force_device_mode();
80002b30:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b34:	b9 b8       	sbr	r8,0x19
80002b36:	ef 48 08 00 	st.w	r7[2048],r8
80002b3a:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b3e:	b9 c8       	cbr	r8,0x18
80002b40:	ef 48 08 00 	st.w	r7[2048],r8
#endif
	otg_disable_pad();
80002b44:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b48:	ad c8       	cbr	r8,0xc
80002b4a:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable_pad();
80002b4e:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b52:	ad a8       	sbr	r8,0xc
80002b54:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable();
80002b58:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b5c:	af b8       	sbr	r8,0xf
80002b5e:	ef 48 08 00 	st.w	r7[2048],r8
	otg_unfreeze_clock();
80002b62:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b66:	af c8       	cbr	r8,0xe
80002b68:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_clock_frozen();
80002b6c:	ee f8 08 00 	ld.w	r8,r7[2048]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b70:	4a 28       	lddpc	r8,80002bf8 <udd_enable+0xf4>
80002b72:	70 0a       	ld.w	r10,r8[0x0]
80002b74:	30 09       	mov	r9,0
		udd_ep_job[i].stall_requested = false;
80002b76:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b7a:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b7e:	91 0a       	st.w	r8[0x0],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b80:	70 4a       	ld.w	r10,r8[0x10]
		udd_ep_job[i].stall_requested = false;
80002b82:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b86:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b8a:	91 4a       	st.w	r8[0x10],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b8c:	70 8a       	ld.w	r10,r8[0x20]
		udd_ep_job[i].stall_requested = false;
80002b8e:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b92:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b96:	91 8a       	st.w	r8[0x20],r10

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80002b98:	6e 08       	ld.w	r8,r7[0x0]
80002b9a:	ad c8       	cbr	r8,0xc
80002b9c:	8f 08       	st.w	r7[0x0],r8
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80002b9e:	6e 08       	ld.w	r8,r7[0x0]
80002ba0:	e8 18 0c 00 	orl	r8,0xc00
80002ba4:	8f 08       	st.w	r7[0x0],r8
#  endif
#endif
	udd_enable_vbus_interrupt();
80002ba6:	ee f8 08 00 	ld.w	r8,r7[2048]
80002baa:	a1 b8       	sbr	r8,0x1
80002bac:	ef 48 08 00 	st.w	r7[2048],r8
	otg_freeze_clock();
80002bb0:	ee f8 08 00 	ld.w	r8,r7[2048]
80002bb4:	af a8       	sbr	r8,0xe
80002bb6:	ef 48 08 00 	st.w	r7[2048],r8
	// Always authorize asynchrone USB interrupts to exit of sleep mode
	AVR32_PM.AWEN.usb_waken = 1;
80002bba:	fe 78 0c 00 	mov	r8,-62464
80002bbe:	f0 fa 01 44 	ld.w	r10,r8[324]
80002bc2:	30 1b       	mov	r11,1
80002bc4:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
80002bc8:	f1 4a 01 44 	st.w	r8[324],r10

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80002bcc:	48 c8       	lddpc	r8,80002bfc <udd_enable+0xf8>
80002bce:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002bd0:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002bd4:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002bd6:	48 b8       	lddpc	r8,80002c00 <udd_enable+0xfc>
80002bd8:	11 ba       	ld.ub	r10,r8[0x3]
80002bda:	2f fa       	sub	r10,-1
80002bdc:	b0 ba       	st.b	r8[0x3],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002bde:	e3 b9 00 00 	mtsr	0x0,r9
80002be2:	e3 b6 00 00 	mtsr	0x0,r6
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
80002be6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002bea:	00 00       	add	r0,r0
80002bec:	80 00       	ld.sh	r0,r0[0x0]
80002bee:	32 ac       	mov	r12,42
80002bf0:	80 00       	ld.sh	r0,r0[0x0]
80002bf2:	2c 04       	sub	r4,-64
80002bf4:	80 00       	ld.sh	r0,r0[0x0]
80002bf6:	22 24       	sub	r4,34
80002bf8:	00 00       	add	r0,r0
80002bfa:	07 28       	ld.uh	r8,r3++
80002bfc:	00 00       	add	r0,r0
80002bfe:	07 58       	ld.sh	r8,--r3
80002c00:	00 00       	add	r0,r0
80002c02:	0a 28       	rsub	r8,r5

80002c04 <udd_interrupt>:
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#endif
{
80002c04:	eb cd 40 fc 	pushm	r2-r7,lr
	if (Is_udd_sof()) {
80002c08:	fe 68 00 00 	mov	r8,-131072
80002c0c:	70 18       	ld.w	r8,r8[0x4]
80002c0e:	e2 18 00 04 	andl	r8,0x4,COH
80002c12:	c0 f0       	breq	80002c30 <udd_interrupt+0x2c>
		udd_ack_sof();
80002c14:	fe 68 00 00 	mov	r8,-131072
80002c18:	30 49       	mov	r9,4
80002c1a:	91 29       	st.w	r8[0x8],r9
		if (Is_udd_full_speed_mode()) {
80002c1c:	f0 f8 08 04 	ld.w	r8,r8[2052]
80002c20:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80002c24:	e0 81 02 ce 	brne	800031c0 <udd_interrupt+0x5bc>
		udc_sof_notify();
80002c28:	f0 1f 01 6f 	mcall	800031e4 <udd_interrupt+0x5e0>
80002c2c:	e0 8f 02 ca 	bral	800031c0 <udd_interrupt+0x5bc>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_msof()) {
80002c30:	fe 68 00 00 	mov	r8,-131072
80002c34:	70 18       	ld.w	r8,r8[0x4]
80002c36:	e2 18 00 02 	andl	r8,0x2,COH
80002c3a:	c0 90       	breq	80002c4c <udd_interrupt+0x48>
		udd_ack_msof();
80002c3c:	30 29       	mov	r9,2
80002c3e:	fe 68 00 00 	mov	r8,-131072
80002c42:	91 29       	st.w	r8[0x8],r9
		udc_sof_notify();
80002c44:	f0 1f 01 68 	mcall	800031e4 <udd_interrupt+0x5e0>
		goto udd_interrupt_end;
80002c48:	e0 8f 02 bc 	bral	800031c0 <udd_interrupt+0x5bc>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80002c4c:	fe 68 00 00 	mov	r8,-131072
80002c50:	70 18       	ld.w	r8,r8[0x4]
80002c52:	e2 18 10 00 	andl	r8,0x1000,COH
80002c56:	e0 80 01 6f 	breq	80002f34 <udd_interrupt+0x330>
		return false;	// No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80002c5a:	fe 68 02 20 	mov	r8,-130528
80002c5e:	31 09       	mov	r9,16
80002c60:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80002c62:	30 89       	mov	r9,8
80002c64:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80002c66:	fe 68 01 30 	mov	r8,-130768
80002c6a:	70 08       	ld.w	r8,r8[0x0]
80002c6c:	e2 18 00 04 	andl	r8,0x4,COH
80002c70:	e0 80 00 87 	breq	80002d7e <udd_interrupt+0x17a>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80002c74:	fe f8 05 74 	ld.w	r8,pc[1396]
80002c78:	70 08       	ld.w	r8,r8[0x0]
80002c7a:	58 08       	cp.w	r8,0
80002c7c:	c0 50       	breq	80002c86 <udd_interrupt+0x82>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80002c7e:	f0 1f 01 5c 	mcall	800031ec <udd_interrupt+0x5e8>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002c82:	f0 1f 01 5c 	mcall	800031f0 <udd_interrupt+0x5ec>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80002c86:	fe 68 01 30 	mov	r8,-130768
80002c8a:	70 08       	ld.w	r8,r8[0x0]
80002c8c:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80002c90:	58 88       	cp.w	r8,8
80002c92:	c0 90       	breq	80002ca4 <udd_interrupt+0xa0>
		udd_ctrl_stall_data();
80002c94:	f0 1f 01 58 	mcall	800031f4 <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002c98:	30 49       	mov	r9,4
80002c9a:	fe 68 01 60 	mov	r8,-130720
80002c9e:	91 09       	st.w	r8[0x0],r9
80002ca0:	e0 8f 02 90 	bral	800031c0 <udd_interrupt+0x5bc>
80002ca4:	fc 18 e0 00 	movh	r8,0xe000
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80002ca8:	fe fc 05 50 	ld.w	r12,pc[1360]
80002cac:	fc 1b 20 00 	movh	r11,0x2000
80002cb0:	f0 0c 00 09 	add	r9,r8,r12
80002cb4:	11 3a       	ld.ub	r10,r8++
80002cb6:	f2 0b 0b 0a 	st.b	r9[r11],r10
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80002cba:	30 8a       	mov	r10,8
80002cbc:	ea 1a e0 00 	orh	r10,0xe000
80002cc0:	14 38       	cp.w	r8,r10
80002cc2:	cf 71       	brne	80002cb0 <udd_interrupt+0xac>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002cc4:	fe f8 05 34 	ld.w	r8,pc[1332]
80002cc8:	90 19       	ld.sh	r9,r8[0x2]
80002cca:	5c c9       	swap.bh	r9
80002ccc:	b0 19       	st.h	r8[0x2],r9
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002cce:	90 29       	ld.sh	r9,r8[0x4]
80002cd0:	5c c9       	swap.bh	r9
80002cd2:	b0 29       	st.h	r8[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002cd4:	90 39       	ld.sh	r9,r8[0x6]
80002cd6:	5c c9       	swap.bh	r9
80002cd8:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
80002cda:	f0 1f 01 49 	mcall	800031fc <udd_interrupt+0x5f8>
80002cde:	c0 91       	brne	80002cf0 <udd_interrupt+0xec>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
80002ce0:	f0 1f 01 45 	mcall	800031f4 <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002ce4:	30 49       	mov	r9,4
80002ce6:	fe 68 01 60 	mov	r8,-130720
80002cea:	91 09       	st.w	r8[0x0],r9
80002cec:	e0 8f 02 6a 	bral	800031c0 <udd_interrupt+0x5bc>
		return;
	}
	udd_ack_setup_received(0);
80002cf0:	30 49       	mov	r9,4
80002cf2:	fe 68 01 60 	mov	r8,-130720
80002cf6:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80002cf8:	fe f8 05 00 	ld.w	r8,pc[1280]
80002cfc:	11 89       	ld.ub	r9,r8[0x0]
80002cfe:	30 08       	mov	r8,0
80002d00:	f0 09 18 00 	cp.b	r9,r8
80002d04:	c1 94       	brge	80002d36 <udd_interrupt+0x132>
		// Compute if an IN ZLP must be send after IN data
		udd_ctrl_payload_need_in_zlp =
80002d06:	fe f8 04 f2 	ld.w	r8,pc[1266]
80002d0a:	90 e8       	ld.uh	r8,r8[0xc]
80002d0c:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002d10:	5f 09       	sreq	r9
80002d12:	fe f8 04 ee 	ld.w	r8,pc[1262]
80002d16:	b0 89       	st.b	r8[0x0],r9
				((udd_g_ctrlreq.payload_size %
						USB_DEVICE_EP_CTRL_SIZE) == 0);
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d18:	30 08       	mov	r8,0
80002d1a:	fe f9 04 ea 	ld.w	r9,pc[1258]
80002d1e:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d20:	fe f9 04 e8 	ld.w	r9,pc[1256]
80002d24:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80002d26:	30 29       	mov	r9,2
80002d28:	fe f8 04 c0 	ld.w	r8,pc[1216]
80002d2c:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent();	// Send first data transfer
80002d2e:	f0 1f 01 38 	mcall	8000320c <udd_interrupt+0x608>
80002d32:	e0 8f 02 47 	bral	800031c0 <udd_interrupt+0x5bc>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80002d36:	fe f8 04 c2 	ld.w	r8,pc[1218]
80002d3a:	90 39       	ld.sh	r9,r8[0x6]
80002d3c:	30 08       	mov	r8,0
80002d3e:	f0 09 19 00 	cp.h	r9,r8
80002d42:	c0 51       	brne	80002d4c <udd_interrupt+0x148>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80002d44:	f0 1f 01 33 	mcall	80003210 <udd_interrupt+0x60c>
80002d48:	e0 8f 02 3c 	bral	800031c0 <udd_interrupt+0x5bc>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d4c:	30 08       	mov	r8,0
80002d4e:	fe f9 04 b6 	ld.w	r9,pc[1206]
80002d52:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d54:	fe f9 04 b4 	ld.w	r9,pc[1204]
80002d58:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80002d5a:	30 19       	mov	r9,1
80002d5c:	fe f8 04 8c 	ld.w	r8,pc[1164]
80002d60:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80002d62:	31 08       	mov	r8,16
80002d64:	fe 69 01 60 	mov	r9,-130720
80002d68:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d6a:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002d6e:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80002d70:	fe 6a 01 f0 	mov	r10,-130576
80002d74:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002d76:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002d7a:	e0 8f 02 23 	bral	800031c0 <udd_interrupt+0x5bc>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80002d7e:	fe 68 01 30 	mov	r8,-130768
80002d82:	70 08       	ld.w	r8,r8[0x0]
80002d84:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002d88:	c0 b0       	breq	80002d9e <udd_interrupt+0x19a>
80002d8a:	fe 68 01 c0 	mov	r8,-130624
80002d8e:	70 08       	ld.w	r8,r8[0x0]
80002d90:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002d94:	c0 50       	breq	80002d9e <udd_interrupt+0x19a>
		// IN packet sent
		udd_ctrl_in_sent();
80002d96:	f0 1f 01 1e 	mcall	8000320c <udd_interrupt+0x608>
80002d9a:	e0 8f 02 13 	bral	800031c0 <udd_interrupt+0x5bc>
		return true;
	}
	if (Is_udd_out_received(0)) {
80002d9e:	fe 68 01 30 	mov	r8,-130768
80002da2:	70 08       	ld.w	r8,r8[0x0]
80002da4:	e2 18 00 02 	andl	r8,0x2,COH
80002da8:	e0 80 00 a3 	breq	80002eee <udd_interrupt+0x2ea>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80002dac:	fe f8 04 3c 	ld.w	r8,pc[1084]
80002db0:	70 08       	ld.w	r8,r8[0x0]
80002db2:	58 18       	cp.w	r8,1
80002db4:	c1 10       	breq	80002dd6 <udd_interrupt+0x1d2>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80002db6:	58 28       	cp.w	r8,2
80002db8:	5f 09       	sreq	r9
80002dba:	58 48       	cp.w	r8,4
80002dbc:	5f 08       	sreq	r8
80002dbe:	f3 e8 10 08 	or	r8,r9,r8
80002dc2:	c0 40       	breq	80002dca <udd_interrupt+0x1c6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
80002dc4:	f0 1f 01 0a 	mcall	800031ec <udd_interrupt+0x5e8>
80002dc8:	c0 38       	rjmp	80002dce <udd_interrupt+0x1ca>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80002dca:	f0 1f 01 0b 	mcall	800031f4 <udd_interrupt+0x5f0>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002dce:	f0 1f 01 09 	mcall	800031f0 <udd_interrupt+0x5ec>
80002dd2:	e0 8f 01 f7 	bral	800031c0 <udd_interrupt+0x5bc>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80002dd6:	fe 68 01 30 	mov	r8,-130768
80002dda:	70 0b       	ld.w	r11,r8[0x0]
80002ddc:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002de0:	fe f8 04 18 	ld.w	r8,pc[1048]
80002de4:	90 69       	ld.sh	r9,r8[0xc]
80002de6:	fe f8 04 22 	ld.w	r8,pc[1058]
80002dea:	90 08       	ld.sh	r8,r8[0x0]
80002dec:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80002df0:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80002df4:	f6 0a 00 0a 	add	r10,r11,r10
80002df8:	14 3c       	cp.w	r12,r10
80002dfa:	c0 44       	brge	80002e02 <udd_interrupt+0x1fe>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80002dfc:	10 19       	sub	r9,r8
80002dfe:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002e02:	fe f9 03 f6 	ld.w	r9,pc[1014]
80002e06:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
80002e08:	58 0b       	cp.w	r11,0
80002e0a:	e0 80 01 e2 	breq	800031ce <udd_interrupt+0x5ca>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002e0e:	5c 78       	castu.h	r8
80002e10:	10 09       	add	r9,r8
80002e12:	fc 18 e0 00 	movh	r8,0xe000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80002e16:	11 3a       	ld.ub	r10,r8++
80002e18:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80002e1a:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80002e1e:	f6 0a 19 00 	cp.h	r10,r11
80002e22:	cf a3       	brcs	80002e16 <udd_interrupt+0x212>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80002e24:	fe f9 03 e4 	ld.w	r9,pc[996]
80002e28:	92 08       	ld.sh	r8,r9[0x0]
80002e2a:	16 08       	add	r8,r11
80002e2c:	5c 88       	casts.h	r8
80002e2e:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80002e30:	34 09       	mov	r9,64
80002e32:	f2 0b 19 00 	cp.h	r11,r9
80002e36:	c0 e1       	brne	80002e52 <udd_interrupt+0x24e>
80002e38:	fe f9 03 c0 	ld.w	r9,pc[960]
80002e3c:	92 ba       	ld.uh	r10,r9[0x6]
80002e3e:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80002e42:	fe f9 03 c2 	ld.w	r9,pc[962]
80002e46:	92 89       	ld.uh	r9,r9[0x0]
80002e48:	f6 09 00 09 	add	r9,r11,r9
80002e4c:	12 3a       	cp.w	r10,r9
80002e4e:	e0 89 00 1a 	brgt	80002e82 <udd_interrupt+0x27e>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback 
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80002e52:	fe f9 03 a6 	ld.w	r9,pc[934]
80002e56:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80002e58:	72 5c       	ld.w	r12,r9[0x14]
80002e5a:	58 0c       	cp.w	r12,0
80002e5c:	c0 b0       	breq	80002e72 <udd_interrupt+0x26e>
			if (!udd_g_ctrlreq.over_under_run()) {
80002e5e:	5d 1c       	icall	r12
80002e60:	c0 91       	brne	80002e72 <udd_interrupt+0x26e>
				// Stall ZLP
				udd_ctrl_stall_data();
80002e62:	f0 1f 00 e5 	mcall	800031f4 <udd_interrupt+0x5f0>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80002e66:	30 29       	mov	r9,2
80002e68:	fe 68 01 60 	mov	r8,-130720
80002e6c:	91 09       	st.w	r8[0x0],r9
80002e6e:	e0 8f 01 a9 	bral	800031c0 <udd_interrupt+0x5bc>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002e72:	30 29       	mov	r9,2
80002e74:	fe 68 01 60 	mov	r8,-130720
80002e78:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80002e7a:	f0 1f 00 e6 	mcall	80003210 <udd_interrupt+0x60c>
80002e7e:	e0 8f 01 a1 	bral	800031c0 <udd_interrupt+0x5bc>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80002e82:	fe f9 03 76 	ld.w	r9,pc[886]
80002e86:	92 69       	ld.sh	r9,r9[0xc]
80002e88:	f0 09 19 00 	cp.h	r9,r8
80002e8c:	c2 21       	brne	80002ed0 <udd_interrupt+0x2cc>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80002e8e:	fe f8 03 6a 	ld.w	r8,pc[874]
80002e92:	70 5c       	ld.w	r12,r8[0x14]
80002e94:	58 0c       	cp.w	r12,0
80002e96:	c0 91       	brne	80002ea8 <udd_interrupt+0x2a4>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
80002e98:	f0 1f 00 d7 	mcall	800031f4 <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002e9c:	30 29       	mov	r9,2
80002e9e:	fe 68 01 60 	mov	r8,-130720
80002ea2:	91 09       	st.w	r8[0x0],r9
80002ea4:	e0 8f 01 8e 	bral	800031c0 <udd_interrupt+0x5bc>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80002ea8:	5d 1c       	icall	r12
80002eaa:	c0 81       	brne	80002eba <udd_interrupt+0x2b6>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80002eac:	f0 1f 00 d2 	mcall	800031f4 <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002eb0:	30 29       	mov	r9,2
80002eb2:	fe 68 01 60 	mov	r8,-130720
80002eb6:	91 09       	st.w	r8[0x0],r9
80002eb8:	c8 49       	rjmp	800031c0 <udd_interrupt+0x5bc>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002eba:	fe f9 03 4a 	ld.w	r9,pc[842]
80002ebe:	fe f8 03 4a 	ld.w	r8,pc[842]
80002ec2:	90 0b       	ld.sh	r11,r8[0x0]
80002ec4:	92 0a       	ld.sh	r10,r9[0x0]
80002ec6:	f6 0a 00 0a 	add	r10,r11,r10
80002eca:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80002ecc:	30 09       	mov	r9,0
80002ece:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80002ed0:	fe 69 01 60 	mov	r9,-130720
80002ed4:	30 28       	mov	r8,2
80002ed6:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80002ed8:	31 08       	mov	r8,16
80002eda:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002edc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002ee0:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80002ee2:	fe 6a 01 f0 	mov	r10,-130576
80002ee6:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002ee8:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002eec:	c6 a9       	rjmp	800031c0 <udd_interrupt+0x5bc>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80002eee:	fe 68 01 30 	mov	r8,-130768
80002ef2:	70 08       	ld.w	r8,r8[0x0]
80002ef4:	e2 18 00 08 	andl	r8,0x8,COH
80002ef8:	c1 80       	breq	80002f28 <udd_interrupt+0x324>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80002efa:	30 89       	mov	r9,8
80002efc:	fe 68 01 60 	mov	r8,-130720
80002f00:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80002f02:	fe 68 01 30 	mov	r8,-130768
80002f06:	70 08       	ld.w	r8,r8[0x0]
80002f08:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002f0c:	e0 81 01 5a 	brne	800031c0 <udd_interrupt+0x5bc>
		return;	// overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002f10:	fe f8 02 d8 	ld.w	r8,pc[728]
80002f14:	70 08       	ld.w	r8,r8[0x0]
80002f16:	58 38       	cp.w	r8,3
80002f18:	e0 81 01 54 	brne	800031c0 <udd_interrupt+0x5bc>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80002f1c:	e8 69 00 00 	mov	r9,524288
80002f20:	fe 68 01 f0 	mov	r8,-130576
80002f24:	91 09       	st.w	r8[0x0],r9
80002f26:	c4 d9       	rjmp	800031c0 <udd_interrupt+0x5bc>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80002f28:	fe 68 01 30 	mov	r8,-130768
80002f2c:	70 08       	ld.w	r8,r8[0x0]
80002f2e:	e2 18 00 10 	andl	r8,0x10,COH
80002f32:	c0 e1       	brne	80002f4e <udd_interrupt+0x34a>
80002f34:	fe f7 02 e0 	ld.w	r7,pc[736]
80002f38:	0e 9a       	mov	r10,r7
80002f3a:	fe 69 01 34 	mov	r9,-130764
80002f3e:	30 0b       	mov	r11,0
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f40:	fe 66 00 00 	mov	r6,-131072
80002f44:	fc 14 02 00 	movh	r4,0x200
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002f48:	e0 63 10 00 	mov	r3,4096
80002f4c:	c1 e8       	rjmp	80002f88 <udd_interrupt+0x384>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
80002f4e:	31 09       	mov	r9,16
80002f50:	fe 68 01 60 	mov	r8,-130720
80002f54:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80002f56:	fe 68 01 30 	mov	r8,-130768
80002f5a:	70 08       	ld.w	r8,r8[0x0]
80002f5c:	e2 18 00 02 	andl	r8,0x2,COH
80002f60:	e0 81 01 30 	brne	800031c0 <udd_interrupt+0x5bc>
		return;	// underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80002f64:	fe f8 02 84 	ld.w	r8,pc[644]
80002f68:	70 08       	ld.w	r8,r8[0x0]
80002f6a:	58 18       	cp.w	r8,1
80002f6c:	c0 41       	brne	80002f74 <udd_interrupt+0x370>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80002f6e:	f0 1f 00 a9 	mcall	80003210 <udd_interrupt+0x60c>
80002f72:	c2 79       	rjmp	800031c0 <udd_interrupt+0x5bc>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80002f74:	58 48       	cp.w	r8,4
80002f76:	e0 81 01 25 	brne	800031c0 <udd_interrupt+0x5bc>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80002f7a:	e8 69 00 00 	mov	r9,524288
80002f7e:	fe 68 01 f0 	mov	r8,-130576
80002f82:	91 09       	st.w	r8[0x0],r9
80002f84:	c1 e9       	rjmp	800031c0 <udd_interrupt+0x5bc>
80002f86:	10 9b       	mov	r11,r8
80002f88:	f6 c8 ff ff 	sub	r8,r11,-1
80002f8c:	14 9c       	mov	r12,r10
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f8e:	6c 45       	ld.w	r5,r6[0x10]
80002f90:	10 9e       	mov	lr,r8
80002f92:	e8 0b 09 4b 	lsl	r11,r4,r11
80002f96:	f7 e5 00 05 	and	r5,r11,r5
80002f9a:	c4 b0       	breq	80003030 <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80002f9c:	6c 15       	ld.w	r5,r6[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f9e:	f7 e5 00 05 	and	r5,r11,r5
80002fa2:	c4 70       	breq	80003030 <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			udd_disable_endpoint_dma_interrupt(ep);
80002fa4:	fe 69 00 00 	mov	r9,-131072
80002fa8:	93 5b       	st.w	r9[0x14],r11
			if (ptr_job->b_raise_dma) {
80002faa:	74 09       	ld.w	r9,r10[0x0]
80002fac:	e6 19 20 00 	andh	r9,0x2000,COH
80002fb0:	c0 50       	breq	80002fba <udd_interrupt+0x3b6>
				// In case of manual raise DMA interrupt
				// to process a ZLP packet
				udd_raise_endpoint_dma_interrupt(ep);
80002fb2:	fe 69 00 00 	mov	r9,-131072
80002fb6:	93 3b       	st.w	r9[0xc],r11
80002fb8:	c0 a8       	rjmp	80002fcc <udd_interrupt+0x3c8>
			}else{
				// Save number of data no transfered
				nb_remaining = (udd_endpoint_dma_get_status(ep) &
80002fba:	f0 09 15 04 	lsl	r9,r8,0x4
80002fbe:	e0 39 fd 00 	sub	r9,130304
80002fc2:	72 39       	ld.w	r9,r9[0xc]
						AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
						>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
				// Update number of data transfered
				ptr_job->buf_size -= nb_remaining;
80002fc4:	b1 89       	lsr	r9,0x10
80002fc6:	74 2a       	ld.w	r10,r10[0x8]
80002fc8:	12 1a       	sub	r10,r9
80002fca:	99 2a       	st.w	r12[0x8],r10
			}

			if (Is_udd_endpoint_in(ep)) {
80002fcc:	a3 68       	lsl	r8,0x2
80002fce:	fe 6b 01 00 	mov	r11,-130816
80002fd2:	f0 0b 00 09 	add	r9,r8,r11
80002fd6:	72 09       	ld.w	r9,r9[0x0]
80002fd8:	e2 19 01 00 	andl	r9,0x100,COH
80002fdc:	c2 60       	breq	80003028 <udd_interrupt+0x424>
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
80002fde:	78 09       	ld.w	r9,r12[0x0]
80002fe0:	e6 19 40 00 	andh	r9,0x4000,COH
80002fe4:	c2 20       	breq	80003028 <udd_interrupt+0x424>
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
80002fe6:	fe 6a 01 60 	mov	r10,-130720
80002fea:	f0 0a 00 09 	add	r9,r8,r10
80002fee:	30 1a       	mov	r10,1
80002ff0:	93 0a       	st.w	r9[0x0],r10
					if (Is_udd_write_enabled(ep)) {
80002ff2:	fe 6b 01 30 	mov	r11,-130768
80002ff6:	f0 0b 00 09 	add	r9,r8,r11
80002ffa:	72 0a       	ld.w	r10,r9[0x0]
						udd_raise_in_send(ep);
80002ffc:	fe 6b 01 90 	mov	r11,-130672
80003000:	f0 0b 00 09 	add	r9,r8,r11
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80003004:	e6 1a 00 01 	andh	r10,0x1,COH
						udd_raise_in_send(ep);
80003008:	f9 ba 01 01 	movne	r10,1
8000300c:	f3 fa 1a 00 	st.wne	r9[0x0],r10
					}
					udd_enable_in_send_interrupt(ep);
80003010:	e0 38 fe 10 	sub	r8,130576
80003014:	30 19       	mov	r9,1
80003016:	91 09       	st.w	r8[0x0],r9
					udd_enable_endpoint_interrupt(ep);
80003018:	e0 68 10 00 	mov	r8,4096
8000301c:	f0 0e 09 4e 	lsl	lr,r8,lr
80003020:	fe 68 00 00 	mov	r8,-131072
80003024:	91 6e       	st.w	r8[0x18],lr
80003026:	cc d8       	rjmp	800031c0 <udd_interrupt+0x5bc>
					return true;
				}
			}
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
80003028:	30 0b       	mov	r11,0
8000302a:	f0 1f 00 7c 	mcall	80003218 <udd_interrupt+0x614>
8000302e:	cc 98       	rjmp	800031c0 <udd_interrupt+0x5bc>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80003030:	6c 4b       	ld.w	r11,r6[0x10]
80003032:	e6 0e 09 4e 	lsl	lr,r3,lr
80003036:	fd eb 00 0b 	and	r11,lr,r11
8000303a:	c4 60       	breq	800030c6 <udd_interrupt+0x4c2>
8000303c:	e0 7b fe d0 	mov	r11,130768
80003040:	f2 0b 00 02 	add	r2,r9,r11
80003044:	f2 cb ff 70 	sub	r11,r9,-144
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80003048:	76 05       	ld.w	r5,r11[0x0]
8000304a:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8000304e:	c1 50       	breq	80003078 <udd_interrupt+0x474>
80003050:	72 05       	ld.w	r5,r9[0x0]
80003052:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
80003056:	c1 10       	breq	80003078 <udd_interrupt+0x474>
				udd_disable_in_send_interrupt(ep);
80003058:	fe 6a 02 20 	mov	r10,-130528
8000305c:	e4 0a 00 08 	add	r8,r2,r10
80003060:	30 19       	mov	r9,1
80003062:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
80003064:	e0 32 fe a0 	sub	r2,130720
80003068:	85 09       	st.w	r2[0x0],r9
				udd_ack_fifocon(ep);
8000306a:	e0 69 40 00 	mov	r9,16384
8000306e:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false);
80003070:	30 0b       	mov	r11,0
80003072:	f0 1f 00 6a 	mcall	80003218 <udd_interrupt+0x614>
80003076:	ca 58       	rjmp	800031c0 <udd_interrupt+0x5bc>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0==udd_nb_busy_bank(ep))) {
80003078:	76 0b       	ld.w	r11,r11[0x0]
8000307a:	e2 1b 10 00 	andl	r11,0x1000,COH
8000307e:	c2 40       	breq	800030c6 <udd_interrupt+0x4c2>
80003080:	72 0b       	ld.w	r11,r9[0x0]
80003082:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
80003086:	c2 01       	brne	800030c6 <udd_interrupt+0x4c2>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80003088:	fe 69 02 20 	mov	r9,-130528
8000308c:	e4 09 00 08 	add	r8,r2,r9
80003090:	e0 69 10 00 	mov	r9,4096
80003094:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
80003096:	fe 68 00 00 	mov	r8,-131072
8000309a:	91 5e       	st.w	r8[0x14],lr

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
8000309c:	78 08       	ld.w	r8,r12[0x0]
8000309e:	30 09       	mov	r9,0
800030a0:	f1 d9 d3 81 	bfins	r8,r9,0x1c,0x1
800030a4:	99 08       	st.w	r12[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
800030a6:	fe 6b 01 00 	mov	r11,-130816
800030aa:	e4 0b 00 08 	add	r8,r2,r11
800030ae:	70 09       	ld.w	r9,r8[0x0]
800030b0:	a9 d9       	cbr	r9,0x9
800030b2:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
800030b4:	e0 32 fe 10 	sub	r2,130576
800030b8:	e8 68 00 00 	mov	r8,524288
800030bc:	85 08       	st.w	r2[0x0],r8
				udd_reset_data_toggle(ep);
800030be:	e4 68 00 00 	mov	r8,262144
800030c2:	85 08       	st.w	r2[0x0],r8
800030c4:	c7 e8       	rjmp	800031c0 <udd_interrupt+0x5bc>
800030c6:	2f 0a       	sub	r10,-16
800030c8:	2f c9       	sub	r9,-4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
800030ca:	58 38       	cp.w	r8,3
800030cc:	fe 91 ff 5d 	brne	80002f86 <udd_interrupt+0x382>
800030d0:	c8 38       	rjmp	800031d6 <udd_interrupt+0x5d2>
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
800030d2:	30 89       	mov	r9,8
800030d4:	fe 68 00 00 	mov	r8,-131072
800030d8:	91 29       	st.w	r8[0x8],r9
#if __ICCAVR32__
#if !defined(AVR32_USBB_IRQ_GROUP)
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
800030da:	ee c6 ff d0 	sub	r6,r7,-48
static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true);
800030de:	30 15       	mov	r5,1
800030e0:	0a 9b       	mov	r11,r5
800030e2:	0e 9c       	mov	r12,r7
800030e4:	f0 1f 00 4d 	mcall	80003218 <udd_interrupt+0x614>
800030e8:	2f 07       	sub	r7,-16

static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
800030ea:	0c 37       	cp.w	r7,r6
800030ec:	cf a1       	brne	800030e0 <udd_interrupt+0x4dc>
		// Abort all jobs on-going
#if (0!=USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
800030ee:	f0 1f 00 4c 	mcall	8000321c <udd_interrupt+0x618>
		// Reset endpoint control
		udd_reset_ep_ctrl();
800030f2:	f0 1f 00 4c 	mcall	80003220 <udd_interrupt+0x61c>
		// Reset endpoint control management
		udd_ctrl_init();
800030f6:	f0 1f 00 3f 	mcall	800031f0 <udd_interrupt+0x5ec>
		goto udd_interrupt_end;
800030fa:	c6 38       	rjmp	800031c0 <udd_interrupt+0x5bc>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
800030fc:	fe 68 00 00 	mov	r8,-131072
80003100:	70 48       	ld.w	r8,r8[0x10]
80003102:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003106:	c1 b0       	breq	8000313c <udd_interrupt+0x538>
80003108:	fe 68 00 00 	mov	r8,-131072
8000310c:	70 18       	ld.w	r8,r8[0x4]
8000310e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003112:	c1 50       	breq	8000313c <udd_interrupt+0x538>
		otg_unfreeze_clock();
80003114:	fe 68 00 00 	mov	r8,-131072
80003118:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000311c:	af c9       	cbr	r9,0xe
8000311e:	f1 49 08 00 	st.w	r8[2048],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80003122:	30 19       	mov	r9,1
80003124:	91 59       	st.w	r8[0x14],r9
		udd_enable_wake_up_interrupt();
80003126:	31 09       	mov	r9,16
80003128:	91 69       	st.w	r8[0x18],r9
		otg_freeze_clock();	// Mandatory to exit of sleep mode after a wakeup event
8000312a:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000312e:	af a9       	sbr	r9,0xe
80003130:	f1 49 08 00 	st.w	r8[2048],r9
		udd_sleep_mode(false);	// Enter in SUSPEND mode
80003134:	30 0c       	mov	r12,0
80003136:	f0 1f 00 3c 	mcall	80003224 <udd_interrupt+0x620>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
8000313a:	c4 38       	rjmp	800031c0 <udd_interrupt+0x5bc>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
8000313c:	fe 68 00 00 	mov	r8,-131072
80003140:	70 48       	ld.w	r8,r8[0x10]
80003142:	e2 18 00 10 	andl	r8,0x10,COH
80003146:	c2 10       	breq	80003188 <udd_interrupt+0x584>
80003148:	fe 68 00 00 	mov	r8,-131072
8000314c:	70 18       	ld.w	r8,r8[0x4]
8000314e:	e2 18 00 10 	andl	r8,0x10,COH
80003152:	c1 b0       	breq	80003188 <udd_interrupt+0x584>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80003154:	fe 68 00 00 	mov	r8,-131072
80003158:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000315c:	af c9       	cbr	r9,0xe
8000315e:	f1 49 08 00 	st.w	r8[2048],r9
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80003162:	c0 58       	rjmp	8000316c <udd_interrupt+0x568>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
80003164:	70 19       	ld.w	r9,r8[0x4]
80003166:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
8000316a:	c0 61       	brne	80003176 <udd_interrupt+0x572>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
8000316c:	f0 f9 08 04 	ld.w	r9,r8[2052]
80003170:	e2 19 40 00 	andl	r9,0x4000,COH
80003174:	cf 80       	breq	80003164 <udd_interrupt+0x560>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80003176:	fe 68 00 00 	mov	r8,-131072
8000317a:	31 09       	mov	r9,16
8000317c:	91 59       	st.w	r8[0x14],r9
		udd_enable_suspend_interrupt();
8000317e:	30 1c       	mov	r12,1
80003180:	91 6c       	st.w	r8[0x18],r12
		udd_sleep_mode(true);	// Enter in IDLE mode
80003182:	f0 1f 00 29 	mcall	80003224 <udd_interrupt+0x620>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
80003186:	c1 d8       	rjmp	800031c0 <udd_interrupt+0x5bc>
	}

	if (Is_udd_vbus_transition()) {
80003188:	fe 68 00 00 	mov	r8,-131072
8000318c:	f0 f8 08 04 	ld.w	r8,r8[2052]
80003190:	e2 18 00 02 	andl	r8,0x2,COH
80003194:	c1 60       	breq	800031c0 <udd_interrupt+0x5bc>
		// Ack VBus transition and send status to high level
		otg_unfreeze_clock();
80003196:	fe 68 00 00 	mov	r8,-131072
8000319a:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000319e:	af c9       	cbr	r9,0xe
800031a0:	f1 49 08 00 	st.w	r8[2048],r9
		udd_ack_vbus_transition();
800031a4:	30 29       	mov	r9,2
800031a6:	f1 49 08 08 	st.w	r8[2056],r9
		otg_freeze_clock();
800031aa:	f0 f9 08 00 	ld.w	r9,r8[2048]
800031ae:	af a9       	sbr	r9,0xe
800031b0:	f1 49 08 00 	st.w	r8[2048],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_udd_vbus_high());
800031b4:	f0 fc 08 04 	ld.w	r12,r8[2052]
800031b8:	f9 dc c1 61 	bfextu	r12,r12,0xb,0x1
800031bc:	f0 1f 00 1b 	mcall	80003228 <udd_interrupt+0x624>
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
800031c0:	fe 68 00 00 	mov	r8,-131072
800031c4:	f0 f8 08 18 	ld.w	r8,r8[2072]
	return;
}
800031c8:	e3 cd 40 fc 	ldm	sp++,r2-r7,lr
800031cc:	d6 03       	rete
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
800031ce:	48 f9       	lddpc	r9,80003208 <udd_interrupt+0x604>
800031d0:	b2 08       	st.h	r9[0x0],r8
800031d2:	fe 9f fe 40 	bral	80002e52 <udd_interrupt+0x24e>
	if (udd_ep_interrupt())
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
800031d6:	fe 68 00 00 	mov	r8,-131072
800031da:	70 18       	ld.w	r8,r8[0x4]
800031dc:	e2 18 00 08 	andl	r8,0x8,COH
800031e0:	c8 e0       	breq	800030fc <udd_interrupt+0x4f8>
800031e2:	c7 8b       	rjmp	800030d2 <udd_interrupt+0x4ce>
800031e4:	80 00       	ld.sh	r0,r0[0x0]
800031e6:	37 a8       	mov	r8,122
800031e8:	00 00       	add	r0,r0
800031ea:	07 5c       	ld.sh	r12,--r3
800031ec:	80 00       	ld.sh	r0,r0[0x0]
800031ee:	25 28       	sub	r8,82
800031f0:	80 00       	ld.sh	r0,r0[0x0]
800031f2:	27 68       	sub	r8,118
800031f4:	80 00       	ld.sh	r0,r0[0x0]
800031f6:	25 10       	sub	r0,81
800031f8:	00 00       	add	r0,r0
800031fa:	0a 10       	sub	r0,r5
800031fc:	80 00       	ld.sh	r0,r0[0x0]
800031fe:	3a 28       	mov	r8,-94
80003200:	00 00       	add	r0,r0
80003202:	07 60       	ld.uh	r0,--r3
80003204:	00 00       	add	r0,r0
80003206:	07 24       	ld.uh	r4,r3++
80003208:	00 00       	add	r0,r0
8000320a:	07 5a       	ld.sh	r10,--r3
8000320c:	80 00       	ld.sh	r0,r0[0x0]
8000320e:	27 c8       	sub	r8,124
80003210:	80 00       	ld.sh	r0,r0[0x0]
80003212:	27 9c       	sub	r12,121
80003214:	00 00       	add	r0,r0
80003216:	07 28       	ld.uh	r8,r3++
80003218:	80 00       	ld.sh	r0,r0[0x0]
8000321a:	25 3c       	sub	r12,83
8000321c:	80 00       	ld.sh	r0,r0[0x0]
8000321e:	39 c8       	mov	r8,-100
80003220:	80 00       	ld.sh	r0,r0[0x0]
80003222:	2a 26       	sub	r6,-94
80003224:	80 00       	ld.sh	r0,r0[0x0]
80003226:	26 f4       	sub	r4,111
80003228:	80 00       	ld.sh	r0,r0[0x0]
8000322a:	3f 28       	mov	r8,-14

8000322c <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000322c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003230:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80003232:	fe 78 0c 00 	mov	r8,-62464
80003236:	71 59       	ld.w	r9,r8[0x54]
80003238:	e2 19 00 40 	andl	r9,0x40,COH
8000323c:	cf d0       	breq	80003236 <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000323e:	a3 6c       	lsl	r12,0x2
80003240:	e0 2c f3 f8 	sub	r12,62456
80003244:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80003246:	30 19       	mov	r9,1
80003248:	f2 0b 09 4b 	lsl	r11,r9,r11
8000324c:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000324e:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003250:	e3 ba 00 00 	mtsr	0x0,r10

	cpu_irq_restore(flags);
}
80003254:	5e fc       	retal	r12
80003256:	d7 03       	nop

80003258 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80003258:	eb cd 40 e0 	pushm	r5-r7,lr
8000325c:	18 96       	mov	r6,r12
8000325e:	58 9c       	cp.w	r12,9
80003260:	5f 07       	sreq	r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003262:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
80003266:	d3 03       	ssrf	0x10
		pbus_id = 1;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_bus_refcount[pbus_id])
80003268:	48 f8       	lddpc	r8,800032a4 <sysclk_enable_pbb_module+0x4c>
8000326a:	f0 07 07 09 	ld.ub	r9,r8[r7]
8000326e:	30 08       	mov	r8,0
80003270:	f0 09 18 00 	cp.b	r9,r8
80003274:	c0 a1       	brne	80003288 <sysclk_enable_pbb_module+0x30>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003276:	ee 0b 15 01 	lsl	r11,r7,0x1
8000327a:	f9 bb 01 06 	movne	r11,6
8000327e:	f9 bb 00 02 	moveq	r11,2
80003282:	30 1c       	mov	r12,1
80003284:	f0 1f 00 09 	mcall	800032a8 <sysclk_enable_pbb_module+0x50>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
	sysclk_bus_refcount[pbus_id]++;
80003288:	48 78       	lddpc	r8,800032a4 <sysclk_enable_pbb_module+0x4c>
8000328a:	f0 07 07 09 	ld.ub	r9,r8[r7]
8000328e:	2f f9       	sub	r9,-1
80003290:	f0 07 0b 09 	st.b	r8[r7],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003294:	e3 b5 00 00 	mtsr	0x0,r5

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
80003298:	0c 9b       	mov	r11,r6
8000329a:	30 3c       	mov	r12,3
8000329c:	f0 1f 00 03 	mcall	800032a8 <sysclk_enable_pbb_module+0x50>
}
800032a0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800032a4:	00 00       	add	r0,r0
800032a6:	07 64       	ld.uh	r4,--r3
800032a8:	80 00       	ld.sh	r0,r0[0x0]
800032aa:	32 2c       	mov	r12,34

800032ac <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
800032ac:	d4 01       	pushm	lr
	struct genclk_config gcfg;

	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
800032ae:	30 1c       	mov	r12,1
800032b0:	f0 1f 00 0f 	mcall	800032ec <sysclk_enable_usb+0x40>
800032b4:	30 3b       	mov	r11,3
800032b6:	30 1c       	mov	r12,1
800032b8:	f0 1f 00 0e 	mcall	800032f0 <sysclk_enable_usb+0x44>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032bc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032c0:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800032c2:	fe 78 0c 00 	mov	r8,-62464
800032c6:	e0 6a 03 07 	mov	r10,775
800032ca:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800032cc:	70 0a       	ld.w	r10,r8[0x0]
800032ce:	a3 aa       	sbr	r10,0x2
800032d0:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800032d2:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
800032d6:	71 59       	ld.w	r9,r8[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800032d8:	e2 19 00 80 	andl	r9,0x80,COH
800032dc:	cf d0       	breq	800032d6 <sysclk_enable_usb+0x2a>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
800032de:	30 49       	mov	r9,4
800032e0:	fe 78 0c 00 	mov	r8,-62464
800032e4:	f1 49 00 70 	st.w	r8[112],r9
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
	genclk_enable(&gcfg, AVR32_PM_GCLK_USBB);
}
800032e8:	d8 02       	popm	pc
800032ea:	00 00       	add	r0,r0
800032ec:	80 00       	ld.sh	r0,r0[0x0]
800032ee:	32 58       	mov	r8,37
800032f0:	80 00       	ld.sh	r0,r0[0x0]
800032f2:	32 2c       	mov	r12,34

800032f4 <udi_cdc_data_disable>:
	UDI_CDC_DISABLE_EXT();
}

void udi_cdc_data_disable(void)
{
}
800032f4:	5e fc       	retal	r12
800032f6:	d7 03       	nop

800032f8 <udi_cdc_comm_setup>:


bool udi_cdc_comm_setup(void)
{
	if (Udd_setup_is_in()) {
800032f8:	49 e8       	lddpc	r8,80003370 <udi_cdc_comm_setup+0x78>
800032fa:	11 88       	ld.ub	r8,r8[0x0]
800032fc:	30 09       	mov	r9,0
800032fe:	f2 08 18 00 	cp.b	r8,r9
80003302:	c1 84       	brge	80003332 <udi_cdc_comm_setup+0x3a>
		// GET Interface Requests 
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80003304:	e2 18 00 60 	andl	r8,0x60,COH
80003308:	e0 48 00 20 	cp.w	r8,32
8000330c:	c3 11       	brne	8000336e <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
8000330e:	49 98       	lddpc	r8,80003370 <udi_cdc_comm_setup+0x78>
80003310:	11 99       	ld.ub	r9,r8[0x1]
80003312:	32 18       	mov	r8,33
80003314:	f0 09 18 00 	cp.b	r9,r8
80003318:	c2 b1       	brne	8000336e <udi_cdc_comm_setup+0x76>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000331a:	49 68       	lddpc	r8,80003370 <udi_cdc_comm_setup+0x78>
8000331c:	90 39       	ld.sh	r9,r8[0x6]
8000331e:	30 78       	mov	r8,7
80003320:	f0 09 19 00 	cp.h	r9,r8
80003324:	c2 51       	brne	8000336e <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.payload =
80003326:	49 38       	lddpc	r8,80003370 <udi_cdc_comm_setup+0x78>
80003328:	49 39       	lddpc	r9,80003374 <udi_cdc_comm_setup+0x7c>
8000332a:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
8000332c:	30 79       	mov	r9,7
8000332e:	b0 69       	st.h	r8[0xc],r9
80003330:	5e ff       	retal	1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests  
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80003332:	e2 18 00 60 	andl	r8,0x60,COH
80003336:	e0 48 00 20 	cp.w	r8,32
8000333a:	c1 a1       	brne	8000336e <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
8000333c:	48 d8       	lddpc	r8,80003370 <udi_cdc_comm_setup+0x78>
8000333e:	11 98       	ld.ub	r8,r8[0x1]
80003340:	32 09       	mov	r9,32
80003342:	f2 08 18 00 	cp.b	r8,r9
80003346:	c0 60       	breq	80003352 <udi_cdc_comm_setup+0x5a>
80003348:	32 29       	mov	r9,34
8000334a:	f2 08 18 00 	cp.b	r8,r9
8000334e:	c1 01       	brne	8000336e <udi_cdc_comm_setup+0x76>
80003350:	5e ff       	retal	1
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80003352:	48 88       	lddpc	r8,80003370 <udi_cdc_comm_setup+0x78>
80003354:	90 39       	ld.sh	r9,r8[0x6]
80003356:	30 78       	mov	r8,7
80003358:	f0 09 19 00 	cp.h	r9,r8
8000335c:	c0 91       	brne	8000336e <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.callback =
8000335e:	48 58       	lddpc	r8,80003370 <udi_cdc_comm_setup+0x78>
80003360:	48 69       	lddpc	r9,80003378 <udi_cdc_comm_setup+0x80>
80003362:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
80003364:	48 49       	lddpc	r9,80003374 <udi_cdc_comm_setup+0x7c>
80003366:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003368:	30 79       	mov	r9,7
8000336a:	b0 69       	st.h	r8[0xc],r9
8000336c:	5e ff       	retal	1
						sizeof(udi_cdc_line_coding);
				return true;
8000336e:	5e fd       	retal	0
80003370:	00 00       	add	r0,r0
80003372:	0a 10       	sub	r0,r5
80003374:	00 00       	add	r0,r0
80003376:	07 68       	ld.uh	r8,--r3
80003378:	80 00       	ld.sh	r0,r0[0x0]
8000337a:	33 80       	mov	r0,56

8000337c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
8000337c:	5e fd       	retal	0

8000337e <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
8000337e:	5e fd       	retal	0

80003380 <udi_cdc_line_coding_received>:

void udi_cdc_line_coding_received(void)
{
	// Send line coding to component associated to CDC
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));
}
80003380:	5e fc       	retal	r12
80003382:	d7 03       	nop

80003384 <udi_cdc_is_rx_ready>:
}


bool udi_cdc_is_rx_ready(void)
{
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
80003384:	48 68       	lddpc	r8,8000339c <udi_cdc_is_rx_ready+0x18>
80003386:	11 8a       	ld.ub	r10,r8[0x0]
80003388:	48 68       	lddpc	r8,800033a0 <udi_cdc_is_rx_ready+0x1c>
8000338a:	90 08       	ld.sh	r8,r8[0x0]
8000338c:	48 69       	lddpc	r9,800033a4 <udi_cdc_is_rx_ready+0x20>
8000338e:	f2 0a 04 19 	ld.sh	r9,r9[r10<<0x1]
80003392:	f0 09 19 00 	cp.h	r9,r8
}
80003396:	5f bc       	srhi	r12
80003398:	5e fc       	retal	r12
8000339a:	00 00       	add	r0,r0
8000339c:	00 00       	add	r0,r0
8000339e:	07 fc       	ld.ub	r12,r3[0x7]
800033a0:	00 00       	add	r0,r0
800033a2:	07 f8       	ld.ub	r8,r3[0x7]
800033a4:	00 00       	add	r0,r0
800033a6:	07 f4       	ld.ub	r4,r3[0x7]

800033a8 <udi_cdc_is_tx_ready>:


bool udi_cdc_is_tx_ready(void)
{
	irqflags_t flags;
	if (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS) {
800033a8:	49 58       	lddpc	r8,800033fc <udi_cdc_is_tx_ready+0x54>
800033aa:	11 89       	ld.ub	r9,r8[0x0]
800033ac:	49 58       	lddpc	r8,80003400 <udi_cdc_is_tx_ready+0x58>
800033ae:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800033b2:	34 08       	mov	r8,64
800033b4:	f0 09 19 00 	cp.h	r9,r8
800033b8:	c0 20       	breq	800033bc <udi_cdc_is_tx_ready+0x14>
800033ba:	5e ff       	retal	1
		return true;
	}
	if (!udi_cdc_tx_both_buf_to_send) {
800033bc:	49 28       	lddpc	r8,80003404 <udi_cdc_is_tx_ready+0x5c>
800033be:	11 88       	ld.ub	r8,r8[0x0]
800033c0:	58 08       	cp.w	r8,0
800033c2:	c1 21       	brne	800033e6 <udi_cdc_is_tx_ready+0x3e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800033c4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800033c8:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
		if (!udi_cdc_tx_trans_ongoing) {
800033ca:	49 09       	lddpc	r9,80003408 <udi_cdc_is_tx_ready+0x60>
800033cc:	13 89       	ld.ub	r9,r9[0x0]
800033ce:	58 09       	cp.w	r9,0
800033d0:	c0 91       	brne	800033e2 <udi_cdc_is_tx_ready+0x3a>
			// No transfer on-going
			// then use the other buffer to store data
			udi_cdc_tx_both_buf_to_send = true;
800033d2:	30 1a       	mov	r10,1
800033d4:	48 c9       	lddpc	r9,80003404 <udi_cdc_is_tx_ready+0x5c>
800033d6:	b2 8a       	st.b	r9[0x0],r10
			udi_cdc_tx_buf_sel = (udi_cdc_tx_buf_sel==0)?1:0;
800033d8:	48 99       	lddpc	r9,800033fc <udi_cdc_is_tx_ready+0x54>
800033da:	13 8a       	ld.ub	r10,r9[0x0]
800033dc:	58 0a       	cp.w	r10,0
800033de:	5f 0a       	sreq	r10
800033e0:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800033e2:	e3 b8 00 00 	mtsr	0x0,r8
		}
	  	cpu_irq_restore(flags);
	}
	return (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS);
800033e6:	48 68       	lddpc	r8,800033fc <udi_cdc_is_tx_ready+0x54>
800033e8:	11 89       	ld.ub	r9,r8[0x0]
800033ea:	48 68       	lddpc	r8,80003400 <udi_cdc_is_tx_ready+0x58>
800033ec:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800033f0:	34 08       	mov	r8,64
800033f2:	f0 09 19 00 	cp.h	r9,r8
800033f6:	5f 1c       	srne	r12
}
800033f8:	5e fc       	retal	r12
800033fa:	00 00       	add	r0,r0
800033fc:	00 00       	add	r0,r0
800033fe:	07 6f       	ld.uh	pc,--r3
80003400:	00 00       	add	r0,r0
80003402:	07 70       	ld.ub	r0,--r3
80003404:	00 00       	add	r0,r0
80003406:	08 81       	andn	r1,r4
80003408:	00 00       	add	r0,r0
8000340a:	07 fe       	ld.ub	lr,r3[0x7]

8000340c <udi_cdc_putc>:


int udi_cdc_putc(int value)
{
8000340c:	eb cd 40 fe 	pushm	r1-r7,lr
80003410:	18 97       	mov	r7,r12
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
80003412:	49 88       	lddpc	r8,80003470 <udi_cdc_putc+0x64>
80003414:	11 e9       	ld.ub	r9,r8[0x6]
80003416:	30 98       	mov	r8,9
80003418:	f0 09 18 00 	cp.b	r9,r8
8000341c:	5f 04       	sreq	r4

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
		if (!udi_cdc_running) {
8000341e:	49 66       	lddpc	r6,80003474 <udi_cdc_putc+0x68>
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003420:	49 63       	lddpc	r3,80003478 <udi_cdc_putc+0x6c>
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003422:	49 75       	lddpc	r5,8000347c <udi_cdc_putc+0x70>
80003424:	49 72       	lddpc	r2,80003480 <udi_cdc_putc+0x74>
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
80003426:	30 01       	mov	r1,0

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
80003428:	f0 1f 00 17 	mcall	80003484 <udi_cdc_putc+0x78>
8000342c:	c0 51       	brne	80003436 <udi_cdc_putc+0x2a>
		if (!udi_cdc_running) {
8000342e:	0d 88       	ld.ub	r8,r6[0x0]
80003430:	58 08       	cp.w	r8,0
80003432:	cf b1       	brne	80003428 <udi_cdc_putc+0x1c>
80003434:	c1 b8       	rjmp	8000346a <udi_cdc_putc+0x5e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003436:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
8000343a:	d3 03       	ssrf	0x10
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
8000343c:	07 88       	ld.ub	r8,r3[0x0]
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
8000343e:	ea 08 04 19 	ld.sh	r9,r5[r8<<0x1]
80003442:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
80003446:	f0 0c 15 06 	lsl	r12,r8,0x6
8000344a:	f8 0b 00 0b 	add	r11,r12,r11
8000344e:	e4 0b 0b 07 	st.b	r2[r11],r7
80003452:	2f f9       	sub	r9,-1
80003454:	ea 08 0a 19 	st.h	r5[r8<<0x1],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003458:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);

	if (b_databit_9) {
8000345c:	58 04       	cp.w	r4,0
8000345e:	c0 31       	brne	80003464 <udi_cdc_putc+0x58>
80003460:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
80003464:	a9 47       	asr	r7,0x8
80003466:	02 94       	mov	r4,r1
80003468:	ce 0b       	rjmp	80003428 <udi_cdc_putc+0x1c>
		goto udi_cdc_putc_process_one_byte;
8000346a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8000346e:	00 00       	add	r0,r0
80003470:	00 00       	add	r0,r0
80003472:	07 68       	ld.uh	r8,--r3
80003474:	00 00       	add	r0,r0
80003476:	07 fd       	ld.ub	sp,r3[0x7]
80003478:	00 00       	add	r0,r0
8000347a:	07 6f       	ld.uh	pc,--r3
8000347c:	00 00       	add	r0,r0
8000347e:	07 70       	ld.ub	r0,--r3
80003480:	00 00       	add	r0,r0
80003482:	07 74       	ld.ub	r4,--r3
80003484:	80 00       	ld.sh	r0,r0[0x0]
80003486:	33 a8       	mov	r8,58

80003488 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(void)
{
80003488:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000348c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003490:	d3 03       	ssrf	0x10
	irqflags_t flags;
	uint8_t buf_sel_trans;

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel;
80003492:	49 78       	lddpc	r8,800034ec <udi_cdc_rx_start+0x64>
80003494:	11 87       	ld.ub	r7,r8[0x0]
	if (udi_cdc_rx_trans_ongoing ||
80003496:	49 78       	lddpc	r8,800034f0 <udi_cdc_rx_start+0x68>
80003498:	11 88       	ld.ub	r8,r8[0x0]
8000349a:	58 08       	cp.w	r8,0
8000349c:	c0 a1       	brne	800034b0 <udi_cdc_rx_start+0x28>
		(udi_cdc_rx_pos < udi_cdc_rx_buf_nb[buf_sel_trans])) {
8000349e:	49 68       	lddpc	r8,800034f4 <udi_cdc_rx_start+0x6c>
800034a0:	90 08       	ld.sh	r8,r8[0x0]
800034a2:	49 6a       	lddpc	r10,800034f8 <udi_cdc_rx_start+0x70>
800034a4:	f4 07 04 1a 	ld.sh	r10,r10[r7<<0x1]
800034a8:	f0 0a 19 00 	cp.h	r10,r8
800034ac:	e0 88 00 06 	brls	800034b8 <udi_cdc_rx_start+0x30>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034b0:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
800034b4:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos = 0;
800034b8:	30 0a       	mov	r10,0
800034ba:	48 f8       	lddpc	r8,800034f4 <udi_cdc_rx_start+0x6c>
800034bc:	b0 0a       	st.h	r8[0x0],r10
	udi_cdc_rx_buf_sel = (buf_sel_trans==0)?1:0;
800034be:	58 07       	cp.w	r7,0
800034c0:	5f 0a       	sreq	r10
800034c2:	48 b8       	lddpc	r8,800034ec <udi_cdc_rx_start+0x64>
800034c4:	b0 8a       	st.b	r8[0x0],r10

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing = true;
800034c6:	30 1a       	mov	r10,1
800034c8:	48 a8       	lddpc	r8,800034f0 <udi_cdc_rx_start+0x68>
800034ca:	b0 8a       	st.b	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034cc:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
	
	if (udi_cdc_is_rx_ready()) {
800034d0:	f0 1f 00 0b 	mcall	800034fc <udi_cdc_rx_start+0x74>
		UDI_CDC_RX_NOTIFY();
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUT,
800034d4:	a7 67       	lsl	r7,0x6
800034d6:	48 b8       	lddpc	r8,80003500 <udi_cdc_rx_start+0x78>
800034d8:	34 09       	mov	r9,64
800034da:	48 ba       	lddpc	r10,80003504 <udi_cdc_rx_start+0x7c>
800034dc:	0e 0a       	add	r10,r7
800034de:	30 1b       	mov	r11,1
800034e0:	30 2c       	mov	r12,2
800034e2:	f0 1f 00 0a 	mcall	80003508 <udi_cdc_rx_start+0x80>
					true,
					udi_cdc_rx_buf[buf_sel_trans],
					UDI_CDC_RX_BUFFERS,
					udi_cdc_data_recevied);
}
800034e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800034ea:	00 00       	add	r0,r0
800034ec:	00 00       	add	r0,r0
800034ee:	07 fc       	ld.ub	r12,r3[0x7]
800034f0:	00 00       	add	r0,r0
800034f2:	08 80       	andn	r0,r4
800034f4:	00 00       	add	r0,r0
800034f6:	07 f8       	ld.ub	r8,r3[0x7]
800034f8:	00 00       	add	r0,r0
800034fa:	07 f4       	ld.ub	r4,r3[0x7]
800034fc:	80 00       	ld.sh	r0,r0[0x0]
800034fe:	33 84       	mov	r4,56
80003500:	80 00       	ld.sh	r0,r0[0x0]
80003502:	35 88       	mov	r8,88
80003504:	00 00       	add	r0,r0
80003506:	08 00       	add	r0,r4
80003508:	80 00       	ld.sh	r0,r0[0x0]
8000350a:	25 ac       	sub	r12,90

8000350c <udi_cdc_getc>:
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
}


int udi_cdc_getc(void)
{
8000350c:	d4 31       	pushm	r0-r7,lr
	int rx_data = 0;
	bool b_databit_9;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
8000350e:	49 88       	lddpc	r8,8000356c <udi_cdc_getc+0x60>
80003510:	11 e9       	ld.ub	r9,r8[0x6]
80003512:	30 98       	mov	r8,9
80003514:	f0 09 18 00 	cp.b	r9,r8
80003518:	5f 02       	sreq	r2
8000351a:	30 03       	mov	r3,0

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
8000351c:	49 56       	lddpc	r6,80003570 <udi_cdc_getc+0x64>
8000351e:	49 67       	lddpc	r7,80003574 <udi_cdc_getc+0x68>
80003520:	49 65       	lddpc	r5,80003578 <udi_cdc_getc+0x6c>
		if (!udi_cdc_running) {
80003522:	49 74       	lddpc	r4,8000357c <udi_cdc_getc+0x70>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
80003524:	49 71       	lddpc	r1,80003580 <udi_cdc_getc+0x74>
	udi_cdc_rx_start();

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
80003526:	06 90       	mov	r0,r3
80003528:	c0 48       	rjmp	80003530 <udi_cdc_getc+0x24>
	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
		if (!udi_cdc_running) {
8000352a:	09 88       	ld.ub	r8,r4[0x0]
8000352c:	58 08       	cp.w	r8,0
8000352e:	c1 b0       	breq	80003564 <udi_cdc_getc+0x58>

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003530:	0d 89       	ld.ub	r9,r6[0x0]
80003532:	8e 08       	ld.sh	r8,r7[0x0]
80003534:	ea 09 04 19 	ld.sh	r9,r5[r9<<0x1]
80003538:	f0 09 19 00 	cp.h	r9,r8
8000353c:	fe 98 ff f7 	brls	8000352a <udi_cdc_getc+0x1e>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
80003540:	0d 88       	ld.ub	r8,r6[0x0]
80003542:	8e 09       	ld.sh	r9,r7[0x0]
80003544:	5c 79       	castu.h	r9
80003546:	a7 68       	lsl	r8,0x6
80003548:	12 08       	add	r8,r9
8000354a:	e2 08 07 08 	ld.ub	r8,r1[r8]
8000354e:	10 43       	or	r3,r8
	udi_cdc_rx_pos++;
80003550:	8e 08       	ld.sh	r8,r7[0x0]
80003552:	2f f8       	sub	r8,-1
80003554:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start();
80003556:	f0 1f 00 0c 	mcall	80003584 <udi_cdc_getc+0x78>

	if (b_databit_9) {
8000355a:	58 02       	cp.w	r2,0
8000355c:	c0 50       	breq	80003566 <udi_cdc_getc+0x5a>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
8000355e:	a9 63       	lsl	r3,0x8
80003560:	00 92       	mov	r2,r0
80003562:	ce 7b       	rjmp	80003530 <udi_cdc_getc+0x24>
		goto udi_cdc_getc_process_one_byte;
80003564:	30 03       	mov	r3,0
	}
	return rx_data;
}
80003566:	06 9c       	mov	r12,r3
80003568:	d8 32       	popm	r0-r7,pc
8000356a:	00 00       	add	r0,r0
8000356c:	00 00       	add	r0,r0
8000356e:	07 68       	ld.uh	r8,--r3
80003570:	00 00       	add	r0,r0
80003572:	07 fc       	ld.ub	r12,r3[0x7]
80003574:	00 00       	add	r0,r0
80003576:	07 f8       	ld.ub	r8,r3[0x7]
80003578:	00 00       	add	r0,r0
8000357a:	07 f4       	ld.ub	r4,r3[0x7]
8000357c:	00 00       	add	r0,r0
8000357e:	07 fd       	ld.ub	sp,r3[0x7]
80003580:	00 00       	add	r0,r0
80003582:	08 00       	add	r0,r4
80003584:	80 00       	ld.sh	r0,r0[0x0]
80003586:	34 88       	mov	r8,72

80003588 <udi_cdc_data_recevied>:
					udi_cdc_data_recevied);
}


void udi_cdc_data_recevied(udd_ep_status_t status, iram_size_t n)
{
80003588:	d4 01       	pushm	lr
	uint8_t buf_sel_trans;

	if (UDD_EP_TRANSFER_OK != status) {
8000358a:	58 0c       	cp.w	r12,0
8000358c:	c1 01       	brne	800035ac <udi_cdc_data_recevied+0x24>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel==0)?1:0;
8000358e:	48 98       	lddpc	r8,800035b0 <udi_cdc_data_recevied+0x28>
80003590:	11 88       	ld.ub	r8,r8[0x0]
	udi_cdc_rx_buf_nb[buf_sel_trans] = n;
80003592:	58 08       	cp.w	r8,0
80003594:	f9 b8 01 00 	movne	r8,0
80003598:	f9 b8 00 02 	moveq	r8,2
8000359c:	48 69       	lddpc	r9,800035b4 <udi_cdc_data_recevied+0x2c>
8000359e:	f2 08 0a 0b 	st.h	r9[r8],r11
	udi_cdc_rx_trans_ongoing = false;
800035a2:	30 09       	mov	r9,0
800035a4:	48 58       	lddpc	r8,800035b8 <udi_cdc_data_recevied+0x30>
800035a6:	b0 89       	st.b	r8[0x0],r9
	udi_cdc_rx_start();
800035a8:	f0 1f 00 05 	mcall	800035bc <udi_cdc_data_recevied+0x34>
800035ac:	d8 02       	popm	pc
800035ae:	00 00       	add	r0,r0
800035b0:	00 00       	add	r0,r0
800035b2:	07 fc       	ld.ub	r12,r3[0x7]
800035b4:	00 00       	add	r0,r0
800035b6:	07 f4       	ld.ub	r4,r3[0x7]
800035b8:	00 00       	add	r0,r0
800035ba:	08 80       	andn	r0,r4
800035bc:	80 00       	ld.sh	r0,r0[0x0]
800035be:	34 88       	mov	r8,72

800035c0 <udi_cdc_tx_send>:
	udi_cdc_tx_send();
}


static void udi_cdc_tx_send(void)
{
800035c0:	eb cd 40 e0 	pushm	r5-r7,lr
	irqflags_t flags;
	uint8_t buf_sel_trans;
	bool b_short_packet;

	if (udi_cdc_tx_trans_ongoing) {
800035c4:	4a a8       	lddpc	r8,8000366c <udi_cdc_tx_send+0xac>
800035c6:	11 88       	ld.ub	r8,r8[0x0]
800035c8:	58 08       	cp.w	r8,0
800035ca:	c4 f1       	brne	80003668 <udi_cdc_tx_send+0xa8>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
800035cc:	f0 1f 00 29 	mcall	80003670 <udi_cdc_tx_send+0xb0>
800035d0:	c0 a0       	breq	800035e4 <udi_cdc_tx_send+0x24>
		if (udi_cdc_tx_sof_num == udd_get_micro_frame_number()) {
800035d2:	f0 1f 00 29 	mcall	80003674 <udi_cdc_tx_send+0xb4>
800035d6:	4a 98       	lddpc	r8,80003678 <udi_cdc_tx_send+0xb8>
800035d8:	90 08       	ld.sh	r8,r8[0x0]
800035da:	f8 08 19 00 	cp.h	r8,r12
800035de:	c0 a1       	brne	800035f2 <udi_cdc_tx_send+0x32>
800035e0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num == udd_get_frame_number()) {
800035e4:	f0 1f 00 26 	mcall	8000367c <udi_cdc_tx_send+0xbc>
800035e8:	4a 48       	lddpc	r8,80003678 <udi_cdc_tx_send+0xb8>
800035ea:	90 08       	ld.sh	r8,r8[0x0]
800035ec:	f8 08 19 00 	cp.h	r8,r12
800035f0:	c3 c0       	breq	80003668 <udi_cdc_tx_send+0xa8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800035f2:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800035f6:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel;
800035f8:	4a 29       	lddpc	r9,80003680 <udi_cdc_tx_send+0xc0>
800035fa:	13 87       	ld.ub	r7,r9[0x0]
	if (!udi_cdc_tx_both_buf_to_send) {
800035fc:	4a 29       	lddpc	r9,80003684 <udi_cdc_tx_send+0xc4>
800035fe:	13 89       	ld.ub	r9,r9[0x0]
80003600:	58 09       	cp.w	r9,0
80003602:	c0 61       	brne	8000360e <udi_cdc_tx_send+0x4e>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel = (buf_sel_trans==0)?1:0;
80003604:	58 07       	cp.w	r7,0
80003606:	5f 0a       	sreq	r10
80003608:	49 e9       	lddpc	r9,80003680 <udi_cdc_tx_send+0xc0>
8000360a:	b2 8a       	st.b	r9[0x0],r10
8000360c:	c0 38       	rjmp	80003612 <udi_cdc_tx_send+0x52>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
8000360e:	58 07       	cp.w	r7,0
80003610:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing = true;
80003612:	30 1a       	mov	r10,1
80003614:	49 69       	lddpc	r9,8000366c <udi_cdc_tx_send+0xac>
80003616:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003618:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[buf_sel_trans] != UDI_CDC_TX_BUFFERS);
8000361c:	0e 95       	mov	r5,r7
8000361e:	49 b8       	lddpc	r8,80003688 <udi_cdc_tx_send+0xc8>
80003620:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
80003624:	34 08       	mov	r8,64
80003626:	f0 09 19 00 	cp.h	r9,r8
8000362a:	5f 16       	srne	r6
	if (b_short_packet) {
8000362c:	58 06       	cp.w	r6,0
8000362e:	c0 e0       	breq	8000364a <udi_cdc_tx_send+0x8a>
		if (udd_is_high_speed()) {
80003630:	f0 1f 00 10 	mcall	80003670 <udi_cdc_tx_send+0xb0>
80003634:	c0 60       	breq	80003640 <udi_cdc_tx_send+0x80>
			udi_cdc_tx_sof_num = udd_get_micro_frame_number();
80003636:	f0 1f 00 10 	mcall	80003674 <udi_cdc_tx_send+0xb4>
8000363a:	49 08       	lddpc	r8,80003678 <udi_cdc_tx_send+0xb8>
8000363c:	b0 0c       	st.h	r8[0x0],r12
8000363e:	c0 98       	rjmp	80003650 <udi_cdc_tx_send+0x90>
		}else{
			udi_cdc_tx_sof_num = udd_get_frame_number();
80003640:	f0 1f 00 0f 	mcall	8000367c <udi_cdc_tx_send+0xbc>
80003644:	48 d8       	lddpc	r8,80003678 <udi_cdc_tx_send+0xb8>
80003646:	b0 0c       	st.h	r8[0x0],r12
80003648:	c0 48       	rjmp	80003650 <udi_cdc_tx_send+0x90>
		}
	}else{
		udi_cdc_tx_sof_num = 0; // Force next transfer without wait SOF
8000364a:	30 09       	mov	r9,0
8000364c:	48 b8       	lddpc	r8,80003678 <udi_cdc_tx_send+0xb8>
8000364e:	b0 09       	st.h	r8[0x0],r9
	}

	// Send the buffer with enable of short packet
	udd_ep_run( UDI_CDC_DATA_EP_IN,
80003650:	a7 67       	lsl	r7,0x6
80003652:	48 f8       	lddpc	r8,8000368c <udi_cdc_tx_send+0xcc>
80003654:	48 d9       	lddpc	r9,80003688 <udi_cdc_tx_send+0xc8>
80003656:	f2 05 05 19 	ld.uh	r9,r9[r5<<0x1]
8000365a:	48 ea       	lddpc	r10,80003690 <udi_cdc_tx_send+0xd0>
8000365c:	0e 0a       	add	r10,r7
8000365e:	0c 9b       	mov	r11,r6
80003660:	e0 6c 00 81 	mov	r12,129
80003664:	f0 1f 00 0c 	mcall	80003694 <udi_cdc_tx_send+0xd4>
80003668:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000366c:	00 00       	add	r0,r0
8000366e:	07 fe       	ld.ub	lr,r3[0x7]
80003670:	80 00       	ld.sh	r0,r0[0x0]
80003672:	23 b6       	sub	r6,59
80003674:	80 00       	ld.sh	r0,r0[0x0]
80003676:	23 f2       	sub	r2,63
80003678:	00 00       	add	r0,r0
8000367a:	07 fa       	ld.ub	r10,r3[0x7]
8000367c:	80 00       	ld.sh	r0,r0[0x0]
8000367e:	23 e6       	sub	r6,62
80003680:	00 00       	add	r0,r0
80003682:	07 6f       	ld.uh	pc,--r3
80003684:	00 00       	add	r0,r0
80003686:	08 81       	andn	r1,r4
80003688:	00 00       	add	r0,r0
8000368a:	07 70       	ld.ub	r0,--r3
8000368c:	80 00       	ld.sh	r0,r0[0x0]
8000368e:	36 98       	mov	r8,105
80003690:	00 00       	add	r0,r0
80003692:	07 74       	ld.ub	r4,--r3
80003694:	80 00       	ld.sh	r0,r0[0x0]
80003696:	25 ac       	sub	r12,90

80003698 <udi_cdc_data_sent>:
	udi_cdc_rx_start();
}


void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n)
{
80003698:	d4 01       	pushm	lr
	if (UDD_EP_TRANSFER_OK != status) {
8000369a:	58 0c       	cp.w	r12,0
8000369c:	c1 21       	brne	800036c0 <udi_cdc_data_sent+0x28>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[(udi_cdc_tx_buf_sel==0)?1:0] = 0;
8000369e:	48 a8       	lddpc	r8,800036c4 <udi_cdc_data_sent+0x2c>
800036a0:	11 88       	ld.ub	r8,r8[0x0]
800036a2:	58 08       	cp.w	r8,0
800036a4:	f9 b9 01 00 	movne	r9,0
800036a8:	f9 b9 00 02 	moveq	r9,2
800036ac:	30 08       	mov	r8,0
800036ae:	48 7a       	lddpc	r10,800036c8 <udi_cdc_data_sent+0x30>
800036b0:	f4 09 0a 08 	st.h	r10[r9],r8
	udi_cdc_tx_both_buf_to_send = false;
800036b4:	48 69       	lddpc	r9,800036cc <udi_cdc_data_sent+0x34>
800036b6:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_trans_ongoing = false;
800036b8:	48 69       	lddpc	r9,800036d0 <udi_cdc_data_sent+0x38>
800036ba:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_send();
800036bc:	f0 1f 00 06 	mcall	800036d4 <udi_cdc_data_sent+0x3c>
800036c0:	d8 02       	popm	pc
800036c2:	00 00       	add	r0,r0
800036c4:	00 00       	add	r0,r0
800036c6:	07 6f       	ld.uh	pc,--r3
800036c8:	00 00       	add	r0,r0
800036ca:	07 70       	ld.ub	r0,--r3
800036cc:	00 00       	add	r0,r0
800036ce:	08 81       	andn	r1,r4
800036d0:	00 00       	add	r0,r0
800036d2:	07 fe       	ld.ub	lr,r3[0x7]
800036d4:	80 00       	ld.sh	r0,r0[0x0]
800036d6:	35 c0       	mov	r0,92

800036d8 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
800036d8:	d4 01       	pushm	lr
	udi_cdc_tx_send();
800036da:	f0 1f 00 02 	mcall	800036e0 <udi_cdc_data_sof_notify+0x8>
}
800036de:	d8 02       	popm	pc
800036e0:	80 00       	ld.sh	r0,r0[0x0]
800036e2:	35 c0       	mov	r0,92

800036e4 <udi_cdc_data_enable>:
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
}

bool udi_cdc_data_enable(void)
{
800036e4:	eb cd 40 c0 	pushm	r6-r7,lr
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
800036e8:	30 06       	mov	r6,0
800036ea:	48 f8       	lddpc	r8,80003724 <udi_cdc_data_enable+0x40>
800036ec:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_both_buf_to_send = false;
800036ee:	48 f8       	lddpc	r8,80003728 <udi_cdc_data_enable+0x44>
800036f0:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_sel = 0;
800036f2:	48 f8       	lddpc	r8,8000372c <udi_cdc_data_enable+0x48>
800036f4:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_nb[0] = 0;
800036f6:	48 f8       	lddpc	r8,80003730 <udi_cdc_data_enable+0x4c>
800036f8:	30 07       	mov	r7,0
800036fa:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_buf_nb[1] = 0;
800036fc:	b0 17       	st.h	r8[0x2],r7
	udi_cdc_tx_sof_num = 0;
800036fe:	48 e8       	lddpc	r8,80003734 <udi_cdc_data_enable+0x50>
80003700:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_send();
80003702:	f0 1f 00 0e 	mcall	80003738 <udi_cdc_data_enable+0x54>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing = false;
80003706:	48 e8       	lddpc	r8,8000373c <udi_cdc_data_enable+0x58>
80003708:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_sel = 0;
8000370a:	48 e8       	lddpc	r8,80003740 <udi_cdc_data_enable+0x5c>
8000370c:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_nb[0] = 0;
8000370e:	48 e8       	lddpc	r8,80003744 <udi_cdc_data_enable+0x60>
80003710:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_rx_pos = 0;
80003712:	48 e8       	lddpc	r8,80003748 <udi_cdc_data_enable+0x64>
80003714:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_running = udi_cdc_rx_start();
80003716:	f0 1f 00 0e 	mcall	8000374c <udi_cdc_data_enable+0x68>
8000371a:	48 e8       	lddpc	r8,80003750 <udi_cdc_data_enable+0x6c>
8000371c:	b0 8c       	st.b	r8[0x0],r12
	return udi_cdc_running;
8000371e:	11 8c       	ld.ub	r12,r8[0x0]
}
80003720:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003724:	00 00       	add	r0,r0
80003726:	07 fe       	ld.ub	lr,r3[0x7]
80003728:	00 00       	add	r0,r0
8000372a:	08 81       	andn	r1,r4
8000372c:	00 00       	add	r0,r0
8000372e:	07 6f       	ld.uh	pc,--r3
80003730:	00 00       	add	r0,r0
80003732:	07 70       	ld.ub	r0,--r3
80003734:	00 00       	add	r0,r0
80003736:	07 fa       	ld.ub	r10,r3[0x7]
80003738:	80 00       	ld.sh	r0,r0[0x0]
8000373a:	35 c0       	mov	r0,92
8000373c:	00 00       	add	r0,r0
8000373e:	08 80       	andn	r0,r4
80003740:	00 00       	add	r0,r0
80003742:	07 fc       	ld.ub	r12,r3[0x7]
80003744:	00 00       	add	r0,r0
80003746:	07 f4       	ld.ub	r4,r3[0x7]
80003748:	00 00       	add	r0,r0
8000374a:	07 f8       	ld.ub	r8,r3[0x7]
8000374c:	80 00       	ld.sh	r0,r0[0x0]
8000374e:	34 88       	mov	r8,72
80003750:	00 00       	add	r0,r0
80003752:	07 fd       	ld.ub	sp,r3[0x7]

80003754 <udi_cdc_comm_disable>:


void udi_cdc_comm_disable(void)
{
80003754:	d4 01       	pushm	lr
	udi_cdc_running = false;
80003756:	30 09       	mov	r9,0
80003758:	48 38       	lddpc	r8,80003764 <udi_cdc_comm_disable+0x10>
8000375a:	b0 89       	st.b	r8[0x0],r9
	UDI_CDC_DISABLE_EXT();
8000375c:	f0 1f 00 03 	mcall	80003768 <udi_cdc_comm_disable+0x14>
}
80003760:	d8 02       	popm	pc
80003762:	00 00       	add	r0,r0
80003764:	00 00       	add	r0,r0
80003766:	07 fd       	ld.ub	sp,r3[0x7]
80003768:	80 00       	ld.sh	r0,r0[0x0]
8000376a:	3f 1c       	mov	r12,-15

8000376c <udi_cdc_comm_enable>:

//@}


bool udi_cdc_comm_enable(void)
{
8000376c:	d4 01       	pushm	lr
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
8000376e:	30 0a       	mov	r10,0
80003770:	48 a8       	lddpc	r8,80003798 <udi_cdc_comm_enable+0x2c>
80003772:	b0 0a       	st.h	r8[0x0],r10
	uid_cdc_state_msg.value = CPU_TO_LE16(0);
80003774:	48 a8       	lddpc	r8,8000379c <udi_cdc_comm_enable+0x30>
80003776:	b0 4a       	st.h	r8[0x8],r10

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
80003778:	48 a8       	lddpc	r8,800037a0 <udi_cdc_comm_enable+0x34>
8000377a:	30 09       	mov	r9,0
8000377c:	b0 8a       	st.b	r8[0x0],r10
8000377e:	3c 2a       	mov	r10,-62
80003780:	b0 9a       	st.b	r8[0x1],r10
80003782:	30 1a       	mov	r10,1
80003784:	b0 aa       	st.b	r8[0x2],r10
80003786:	b0 b9       	st.b	r8[0x3],r9
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
80003788:	b0 c9       	st.b	r8[0x4],r9
	udi_cdc_line_coding.bParityType = UDI_CDC_DEFAULT_PARITY;
8000378a:	b0 d9       	st.b	r8[0x5],r9
	udi_cdc_line_coding.bDataBits = UDI_CDC_DEFAULT_DATABITS;
8000378c:	30 89       	mov	r9,8
8000378e:	b0 e9       	st.b	r8[0x6],r9
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));

	// Call application callback
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
80003790:	f0 1f 00 05 	mcall	800037a4 <udi_cdc_comm_enable+0x38>
}
80003794:	d8 02       	popm	pc
80003796:	00 00       	add	r0,r0
80003798:	00 00       	add	r0,r0
8000379a:	08 82       	andn	r2,r4
8000379c:	00 00       	add	r0,r0
8000379e:	00 44       	or	r4,r0
800037a0:	00 00       	add	r0,r0
800037a2:	07 68       	ld.uh	r8,--r3
800037a4:	80 00       	ld.sh	r0,r0[0x0]
800037a6:	3f 10       	mov	r0,-15

800037a8 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
800037a8:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800037ac:	49 18       	lddpc	r8,800037f0 <udc_sof_notify+0x48>
800037ae:	11 89       	ld.ub	r9,r8[0x0]
800037b0:	30 08       	mov	r8,0
800037b2:	f0 09 18 00 	cp.b	r9,r8
800037b6:	c1 b0       	breq	800037ec <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037b8:	48 f8       	lddpc	r8,800037f4 <udc_sof_notify+0x4c>
800037ba:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800037bc:	70 09       	ld.w	r9,r8[0x0]
800037be:	13 ca       	ld.ub	r10,r9[0x4]
800037c0:	30 09       	mov	r9,0
800037c2:	f2 0a 18 00 	cp.b	r10,r9
800037c6:	c1 30       	breq	800037ec <udc_sof_notify+0x44>
800037c8:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037ca:	48 b6       	lddpc	r6,800037f4 <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
800037cc:	70 18       	ld.w	r8,r8[0x4]
800037ce:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800037d2:	70 48       	ld.w	r8,r8[0x10]
800037d4:	58 08       	cp.w	r8,0
800037d6:	c0 20       	breq	800037da <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
800037d8:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800037da:	2f f7       	sub	r7,-1
800037dc:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037de:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800037e0:	70 09       	ld.w	r9,r8[0x0]
800037e2:	13 c9       	ld.ub	r9,r9[0x4]
800037e4:	ee 09 18 00 	cp.b	r9,r7
800037e8:	fe 9b ff f2 	brhi	800037cc <udc_sof_notify+0x24>
800037ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800037f0:	00 00       	add	r0,r0
800037f2:	08 8e       	andn	lr,r4
800037f4:	00 00       	add	r0,r0
800037f6:	08 88       	andn	r8,r4

800037f8 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
800037f8:	48 78       	lddpc	r8,80003814 <udc_get_eof_conf+0x1c>
800037fa:	70 08       	ld.w	r8,r8[0x0]
800037fc:	70 08       	ld.w	r8,r8[0x0]
800037fe:	11 aa       	ld.ub	r10,r8[0x2]
80003800:	11 b9       	ld.ub	r9,r8[0x3]
80003802:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80003806:	5c c9       	swap.bh	r9
80003808:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
8000380c:	f0 0c 00 0c 	add	r12,r8,r12
80003810:	5e fc       	retal	r12
80003812:	00 00       	add	r0,r0
80003814:	00 00       	add	r0,r0
80003816:	08 88       	andn	r8,r4

80003818 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80003818:	eb cd 40 e0 	pushm	r5-r7,lr
8000381c:	18 97       	mov	r7,r12
8000381e:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration)
80003820:	49 b8       	lddpc	r8,8000388c <udc_update_iface_desc+0x74>
80003822:	11 89       	ld.ub	r9,r8[0x0]
80003824:	30 08       	mov	r8,0
80003826:	f0 09 18 00 	cp.b	r9,r8
8000382a:	c2 f0       	breq	80003888 <udc_update_iface_desc+0x70>
		return false;

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
8000382c:	49 98       	lddpc	r8,80003890 <udc_update_iface_desc+0x78>
8000382e:	70 08       	ld.w	r8,r8[0x0]
80003830:	70 08       	ld.w	r8,r8[0x0]
80003832:	11 c9       	ld.ub	r9,r8[0x4]
80003834:	18 9e       	mov	lr,r12
80003836:	f8 09 18 00 	cp.b	r9,r12
8000383a:	e0 88 00 27 	brls	80003888 <udc_update_iface_desc+0x70>
		return false;

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000383e:	49 65       	lddpc	r5,80003894 <udc_update_iface_desc+0x7c>
80003840:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
80003842:	f0 1f 00 16 	mcall	80003898 <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
80003846:	6a 08       	ld.w	r8,r5[0x0]
80003848:	10 3c       	cp.w	r12,r8
8000384a:	e0 88 00 1f 	brls	80003888 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000384e:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003850:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003852:	11 9a       	ld.ub	r10,r8[0x1]
80003854:	f6 0a 18 00 	cp.b	r10,r11
80003858:	c0 a1       	brne	8000386c <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber)
8000385a:	11 aa       	ld.ub	r10,r8[0x2]
8000385c:	0e 9e       	mov	lr,r7
8000385e:	ee 0a 18 00 	cp.b	r10,r7
80003862:	c0 51       	brne	8000386c <udc_update_iface_desc+0x54>
					&& (setting_num ==
							udc_ptr_iface->
80003864:	11 ba       	ld.ub	r10,r8[0x3]
80003866:	ec 0a 18 00 	cp.b	r10,r6
8000386a:	c0 b0       	breq	80003880 <udc_update_iface_desc+0x68>
							bAlternateSetting))
				return true;	// Interface found
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) ((uint8_t
8000386c:	13 88       	ld.ub	r8,r9[0x0]
8000386e:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003872:	10 3c       	cp.w	r12,r8
80003874:	fe 9b ff ee 	brhi	80003850 <udc_update_iface_desc+0x38>
80003878:	48 79       	lddpc	r9,80003894 <udc_update_iface_desc+0x7c>
8000387a:	93 08       	st.w	r9[0x0],r8
8000387c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003880:	48 59       	lddpc	r9,80003894 <udc_update_iface_desc+0x7c>
80003882:	93 08       	st.w	r9[0x0],r8
80003884:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003888:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000388c:	00 00       	add	r0,r0
8000388e:	08 8e       	andn	lr,r4
80003890:	00 00       	add	r0,r0
80003892:	08 88       	andn	r8,r4
80003894:	00 00       	add	r0,r0
80003896:	08 94       	mov	r4,r4
80003898:	80 00       	ld.sh	r0,r0[0x0]
8000389a:	37 f8       	mov	r8,127

8000389c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
8000389c:	eb cd 40 c0 	pushm	r6-r7,lr
800038a0:	18 96       	mov	r6,r12
800038a2:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
800038a4:	f0 1f 00 11 	mcall	800038e8 <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800038a8:	0d 88       	ld.ub	r8,r6[0x0]
800038aa:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800038ac:	0c 3c       	cp.w	r12,r6
800038ae:	e0 88 00 19 	brls	800038e0 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038b2:	0d 98       	ld.ub	r8,r6[0x1]
800038b4:	30 49       	mov	r9,4
800038b6:	f2 08 18 00 	cp.b	r8,r9
800038ba:	c1 30       	breq	800038e0 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038bc:	ee 08 18 00 	cp.b	r8,r7
800038c0:	c0 a1       	brne	800038d4 <udc_next_desc_in_iface+0x38>
800038c2:	c1 08       	rjmp	800038e2 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038c4:	0d 98       	ld.ub	r8,r6[0x1]
800038c6:	f2 08 18 00 	cp.b	r8,r9
800038ca:	c0 b0       	breq	800038e0 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038cc:	ee 08 18 00 	cp.b	r8,r7
800038d0:	c0 31       	brne	800038d6 <udc_next_desc_in_iface+0x3a>
800038d2:	c0 88       	rjmp	800038e2 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038d4:	30 49       	mov	r9,4
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800038d6:	0d 88       	ld.ub	r8,r6[0x0]
800038d8:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800038da:	0c 3c       	cp.w	r12,r6
800038dc:	fe 9b ff f4 	brhi	800038c4 <udc_next_desc_in_iface+0x28>
800038e0:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL;	// No specific descriptor found
}
800038e2:	0c 9c       	mov	r12,r6
800038e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800038e8:	80 00       	ld.sh	r0,r0[0x0]
800038ea:	37 f8       	mov	r8,127

800038ec <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
800038ec:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
800038ee:	48 48       	lddpc	r8,800038fc <udc_valid_address+0x10>
800038f0:	11 bc       	ld.ub	r12,r8[0x3]
800038f2:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800038f6:	f0 1f 00 03 	mcall	80003900 <udc_valid_address+0x14>
}
800038fa:	d8 02       	popm	pc
800038fc:	00 00       	add	r0,r0
800038fe:	0a 10       	sub	r0,r5
80003900:	80 00       	ld.sh	r0,r0[0x0]
80003902:	23 b8       	sub	r8,59

80003904 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
80003904:	eb cd 40 e0 	pushm	r5-r7,lr
80003908:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num))
8000390a:	f0 1f 00 12 	mcall	80003950 <udc_iface_enable+0x4c>
8000390e:	c1 f0       	breq	8000394c <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003910:	49 18       	lddpc	r8,80003954 <udc_iface_enable+0x50>
80003912:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80003914:	30 56       	mov	r6,5
80003916:	0c 9b       	mov	r11,r6
80003918:	0e 9c       	mov	r12,r7
8000391a:	f0 1f 00 10 	mcall	80003958 <udc_iface_enable+0x54>
8000391e:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80003920:	c0 d0       	breq	8000393a <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
						ep_desc->bmAttributes,
						le16_to_cpu
80003922:	19 ca       	ld.ub	r10,r12[0x4]
80003924:	19 d8       	ld.ub	r8,r12[0x5]
80003926:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
8000392a:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000392c:	5c 7a       	castu.h	r10
8000392e:	19 bb       	ld.ub	r11,r12[0x3]
80003930:	19 ac       	ld.ub	r12,r12[0x2]
80003932:	f0 1f 00 0b 	mcall	8000395c <udc_iface_enable+0x58>
80003936:	cf 01       	brne	80003916 <udc_iface_enable+0x12>
80003938:	c0 a8       	rjmp	8000394c <udc_iface_enable+0x48>
						(ep_desc->wMaxPacketSize)))
			return false;
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
8000393a:	48 a8       	lddpc	r8,80003960 <udc_iface_enable+0x5c>
8000393c:	70 08       	ld.w	r8,r8[0x0]
8000393e:	70 18       	ld.w	r8,r8[0x4]
80003940:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
80003944:	70 0c       	ld.w	r12,r8[0x0]
80003946:	5d 1c       	icall	r12
80003948:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000394c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003950:	80 00       	ld.sh	r0,r0[0x0]
80003952:	38 18       	mov	r8,-127
80003954:	00 00       	add	r0,r0
80003956:	08 94       	mov	r4,r4
80003958:	80 00       	ld.sh	r0,r0[0x0]
8000395a:	38 9c       	mov	r12,-119
8000395c:	80 00       	ld.sh	r0,r0[0x0]
8000395e:	29 04       	sub	r4,-112
80003960:	00 00       	add	r0,r0
80003962:	08 88       	andn	r8,r4

80003964 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
80003964:	eb cd 40 e0 	pushm	r5-r7,lr
80003968:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
8000396a:	18 97       	mov	r7,r12
8000396c:	30 0b       	mov	r11,0
8000396e:	f0 1f 00 12 	mcall	800039b4 <udc_iface_disable+0x50>
80003972:	c1 e0       	breq	800039ae <udc_iface_disable+0x4a>
		return false;

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003974:	49 18       	lddpc	r8,800039b8 <udc_iface_disable+0x54>
80003976:	70 08       	ld.w	r8,r8[0x0]
80003978:	70 18       	ld.w	r8,r8[0x4]
8000397a:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
8000397e:	6a 3c       	ld.w	r12,r5[0xc]
80003980:	5d 1c       	icall	r12
80003982:	18 9b       	mov	r11,r12
80003984:	0c 9c       	mov	r12,r6
80003986:	f0 1f 00 0c 	mcall	800039b4 <udc_iface_disable+0x50>
8000398a:	c1 20       	breq	800039ae <udc_iface_disable+0x4a>
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000398c:	48 c8       	lddpc	r8,800039bc <udc_iface_disable+0x58>
8000398e:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80003990:	30 56       	mov	r6,5
80003992:	0c 9b       	mov	r11,r6
80003994:	0e 9c       	mov	r12,r7
80003996:	f0 1f 00 0b 	mcall	800039c0 <udc_iface_disable+0x5c>
8000399a:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
							usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc)
8000399c:	c0 50       	breq	800039a6 <udc_iface_disable+0x42>
				break;
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
8000399e:	19 ac       	ld.ub	r12,r12[0x2]
800039a0:	f0 1f 00 09 	mcall	800039c4 <udc_iface_disable+0x60>
		}
800039a4:	cf 7b       	rjmp	80003992 <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
800039a6:	6a 18       	ld.w	r8,r5[0x4]
800039a8:	5d 18       	icall	r8
800039aa:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
800039ae:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800039b2:	00 00       	add	r0,r0
800039b4:	80 00       	ld.sh	r0,r0[0x0]
800039b6:	38 18       	mov	r8,-127
800039b8:	00 00       	add	r0,r0
800039ba:	08 88       	andn	r8,r4
800039bc:	00 00       	add	r0,r0
800039be:	08 94       	mov	r4,r4
800039c0:	80 00       	ld.sh	r0,r0[0x0]
800039c2:	38 9c       	mov	r12,-119
800039c4:	80 00       	ld.sh	r0,r0[0x0]
800039c6:	25 7c       	sub	r12,87

800039c8 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device, 
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
800039c8:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800039cc:	49 38       	lddpc	r8,80003a18 <udc_reset+0x50>
800039ce:	11 89       	ld.ub	r9,r8[0x0]
800039d0:	30 08       	mov	r8,0
800039d2:	f0 09 18 00 	cp.b	r9,r8
800039d6:	c1 70       	breq	80003a04 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800039d8:	49 18       	lddpc	r8,80003a1c <udc_reset+0x54>
800039da:	70 08       	ld.w	r8,r8[0x0]
800039dc:	70 08       	ld.w	r8,r8[0x0]
800039de:	11 c9       	ld.ub	r9,r8[0x4]
800039e0:	30 08       	mov	r8,0
800039e2:	f0 09 18 00 	cp.b	r9,r8
800039e6:	c0 f0       	breq	80003a04 <udc_reset+0x3c>
800039e8:	30 07       	mov	r7,0
800039ea:	48 d6       	lddpc	r6,80003a1c <udc_reset+0x54>
				iface_num++) {
			udc_iface_disable(iface_num);
800039ec:	0e 9c       	mov	r12,r7
800039ee:	f0 1f 00 0d 	mcall	80003a20 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800039f2:	2f f7       	sub	r7,-1
800039f4:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800039f6:	6c 08       	ld.w	r8,r6[0x0]
800039f8:	70 08       	ld.w	r8,r8[0x0]
800039fa:	11 c8       	ld.ub	r8,r8[0x4]
800039fc:	ee 08 18 00 	cp.b	r8,r7
80003a00:	fe 9b ff f6 	brhi	800039ec <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80003a04:	30 09       	mov	r9,0
80003a06:	48 58       	lddpc	r8,80003a18 <udc_reset+0x50>
80003a08:	b0 89       	st.b	r8[0x0],r9
	if (0 != (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status)) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80003a0a:	e0 69 01 00 	mov	r9,256
80003a0e:	48 68       	lddpc	r8,80003a24 <udc_reset+0x5c>
80003a10:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80003a12:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003a16:	00 00       	add	r0,r0
80003a18:	00 00       	add	r0,r0
80003a1a:	08 8e       	andn	lr,r4
80003a1c:	00 00       	add	r0,r0
80003a1e:	08 88       	andn	r8,r4
80003a20:	80 00       	ld.sh	r0,r0[0x0]
80003a22:	39 64       	mov	r4,-106
80003a24:	00 00       	add	r0,r0
80003a26:	08 8c       	andn	r12,r4

80003a28 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80003a28:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80003a2c:	fe f8 04 3c 	ld.w	r8,pc[1084]
80003a30:	30 09       	mov	r9,0
80003a32:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80003a34:	30 0a       	mov	r10,0
80003a36:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80003a38:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
80003a3a:	11 88       	ld.ub	r8,r8[0x0]
80003a3c:	10 9a       	mov	r10,r8
80003a3e:	f2 08 18 00 	cp.b	r8,r9
80003a42:	c0 94       	brge	80003a54 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0)
80003a44:	fe f9 04 24 	ld.w	r9,pc[1060]
80003a48:	92 3b       	ld.sh	r11,r9[0x6]
80003a4a:	30 09       	mov	r9,0
80003a4c:	f2 0b 19 00 	cp.h	r11,r9
80003a50:	e0 80 02 0a 	breq	80003e64 <udc_process_setup+0x43c>
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80003a54:	10 99       	mov	r9,r8
80003a56:	e2 19 00 60 	andl	r9,0x60,COH
80003a5a:	e0 81 01 d9 	brne	80003e0c <udc_process_setup+0x3e4>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80003a5e:	f2 0a 18 00 	cp.b	r10,r9
80003a62:	e0 84 01 01 	brge	80003c64 <udc_process_setup+0x23c>
		// GET Standard Requests 
		if (udd_g_ctrlreq.req.wLength == 0)
80003a66:	fe f9 04 02 	ld.w	r9,pc[1026]
80003a6a:	92 39       	ld.sh	r9,r9[0x6]
80003a6c:	58 09       	cp.w	r9,0
80003a6e:	e0 80 01 cf 	breq	80003e0c <udc_process_setup+0x3e4>
			return false;	// Error for USB host

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003a72:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a76:	e0 81 00 9e 	brne	80003bb2 <udc_process_setup+0x18a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003a7a:	fe fa 03 ee 	ld.w	r10,pc[1006]
80003a7e:	15 9a       	ld.ub	r10,r10[0x1]
80003a80:	30 6b       	mov	r11,6
80003a82:	f6 0a 18 00 	cp.b	r10,r11
80003a86:	c1 a0       	breq	80003aba <udc_process_setup+0x92>
80003a88:	30 8b       	mov	r11,8
80003a8a:	f6 0a 18 00 	cp.b	r10,r11
80003a8e:	e0 80 00 85 	breq	80003b98 <udc_process_setup+0x170>
80003a92:	30 0b       	mov	r11,0
80003a94:	f6 0a 18 00 	cp.b	r10,r11
80003a98:	e0 81 00 8d 	brne	80003bb2 <udc_process_setup+0x18a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status))
80003a9c:	30 28       	mov	r8,2
80003a9e:	f0 09 19 00 	cp.h	r9,r8
80003aa2:	c0 40       	breq	80003aaa <udc_process_setup+0x82>
80003aa4:	30 0c       	mov	r12,0
80003aa6:	e0 8f 01 af 	bral	80003e04 <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(
80003aaa:	30 2b       	mov	r11,2
80003aac:	fe fc 03 c0 	ld.w	r12,pc[960]
80003ab0:	f0 1f 00 f0 	mcall	80003e70 <udc_process_setup+0x448>
80003ab4:	30 1c       	mov	r12,1
80003ab6:	e0 8f 01 a7 	bral	80003e04 <udc_process_setup+0x3dc>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003aba:	fe f8 03 ae 	ld.w	r8,pc[942]
80003abe:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80003ac0:	f2 08 16 08 	lsr	r8,r9,0x8
80003ac4:	30 2a       	mov	r10,2
80003ac6:	f4 08 18 00 	cp.b	r8,r10
80003aca:	c1 00       	breq	80003aea <udc_process_setup+0xc2>
80003acc:	30 3a       	mov	r10,3
80003ace:	f4 08 18 00 	cp.b	r8,r10
80003ad2:	c2 a0       	breq	80003b26 <udc_process_setup+0xfe>
80003ad4:	30 19       	mov	r9,1
80003ad6:	f2 08 18 00 	cp.b	r8,r9
80003ada:	c5 d1       	brne	80003b94 <udc_process_setup+0x16c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80003adc:	fe f8 03 98 	ld.w	r8,pc[920]
80003ae0:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80003ae2:	19 8b       	ld.ub	r11,r12[0x0]
80003ae4:	f0 1f 00 e3 	mcall	80003e70 <udc_process_setup+0x448>
80003ae8:	c4 78       	rjmp	80003b76 <udc_process_setup+0x14e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003aea:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80003aec:	fe f8 03 88 	ld.w	r8,pc[904]
80003af0:	70 08       	ld.w	r8,r8[0x0]
80003af2:	f1 38 00 11 	ld.ub	r8,r8[17]
80003af6:	f2 08 18 00 	cp.b	r8,r9
80003afa:	e0 88 00 4d 	brls	80003b94 <udc_process_setup+0x16c>
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80003afe:	fe f8 03 76 	ld.w	r8,pc[886]
80003b02:	70 18       	ld.w	r8,r8[0x4]
80003b04:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80003b08:	19 a9       	ld.ub	r9,r12[0x2]
80003b0a:	19 b8       	ld.ub	r8,r12[0x3]
80003b0c:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003b10:	5c c8       	swap.bh	r8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
80003b12:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80003b16:	f0 1f 00 d7 	mcall	80003e70 <udc_process_setup+0x448>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80003b1a:	fe f8 03 4e 	ld.w	r8,pc[846]
80003b1e:	70 28       	ld.w	r8,r8[0x8]
80003b20:	30 29       	mov	r9,2
80003b22:	b0 99       	st.b	r8[0x1],r9
80003b24:	c2 98       	rjmp	80003b76 <udc_process_setup+0x14e>
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80003b26:	5c 59       	castu.b	r9
80003b28:	58 19       	cp.w	r9,1
80003b2a:	c1 00       	breq	80003b4a <udc_process_setup+0x122>
80003b2c:	58 29       	cp.w	r9,2
80003b2e:	c0 40       	breq	80003b36 <udc_process_setup+0x10e>
80003b30:	58 09       	cp.w	r9,0
80003b32:	c0 60       	breq	80003b3e <udc_process_setup+0x116>
80003b34:	c3 08       	rjmp	80003b94 <udc_process_setup+0x16c>
80003b36:	fe fc 03 42 	ld.w	r12,pc[834]
80003b3a:	30 3b       	mov	r11,3
80003b3c:	c0 a8       	rjmp	80003b50 <udc_process_setup+0x128>
	case 0:
		udd_set_setup_payload(
80003b3e:	30 4b       	mov	r11,4
80003b40:	fe fc 03 3c 	ld.w	r12,pc[828]
80003b44:	f0 1f 00 cb 	mcall	80003e70 <udc_process_setup+0x448>
80003b48:	c1 78       	rjmp	80003b76 <udc_process_setup+0x14e>
80003b4a:	fe fc 03 36 	ld.w	r12,pc[822]
80003b4e:	30 9b       	mov	r11,9
80003b50:	fe fa 03 34 	ld.w	r10,pc[820]
80003b54:	2f ea       	sub	r10,-2
80003b56:	18 98       	mov	r8,r12
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80003b58:	11 39       	ld.ub	r9,r8++
80003b5a:	5c c9       	swap.bh	r9
80003b5c:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
80003b5e:	f0 0c 01 09 	sub	r9,r8,r12
80003b62:	f6 09 18 00 	cp.b	r9,r11
80003b66:	cf 93       	brcs	80003b58 <udc_process_setup+0x130>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
80003b68:	a1 7b       	lsl	r11,0x1
80003b6a:	2f eb       	sub	r11,-2
80003b6c:	fe fc 03 18 	ld.w	r12,pc[792]
80003b70:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
80003b72:	f0 1f 00 c0 	mcall	80003e70 <udc_process_setup+0x448>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size)
80003b76:	fe f8 02 f2 	ld.w	r8,pc[754]
80003b7a:	90 39       	ld.sh	r9,r8[0x6]
80003b7c:	90 68       	ld.sh	r8,r8[0xc]
80003b7e:	f2 08 19 00 	cp.h	r8,r9
80003b82:	e0 8b 00 04 	brhi	80003b8a <udc_process_setup+0x162>
80003b86:	30 1c       	mov	r12,1
80003b88:	c3 e9       	rjmp	80003e04 <udc_process_setup+0x3dc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
80003b8a:	fe f8 02 de 	ld.w	r8,pc[734]
80003b8e:	b0 69       	st.h	r8[0xc],r9
80003b90:	30 1c       	mov	r12,1
80003b92:	c3 99       	rjmp	80003e04 <udc_process_setup+0x3dc>
80003b94:	30 0c       	mov	r12,0
80003b96:	c3 79       	rjmp	80003e04 <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1)
80003b98:	30 18       	mov	r8,1
80003b9a:	f0 09 19 00 	cp.h	r9,r8
80003b9e:	c0 30       	breq	80003ba4 <udc_process_setup+0x17c>
80003ba0:	30 0c       	mov	r12,0
80003ba2:	c3 19       	rjmp	80003e04 <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(&udc_num_configuration,1);
80003ba4:	30 1b       	mov	r11,1
80003ba6:	fe fc 02 e2 	ld.w	r12,pc[738]
80003baa:	f0 1f 00 b2 	mcall	80003e70 <udc_process_setup+0x448>
80003bae:	30 1c       	mov	r12,1
80003bb0:	c2 a9       	rjmp	80003e04 <udc_process_setup+0x3dc>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003bb2:	58 18       	cp.w	r8,1
80003bb4:	c3 61       	brne	80003c20 <udc_process_setup+0x1f8>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003bb6:	fe fa 02 b2 	ld.w	r10,pc[690]
80003bba:	15 9b       	ld.ub	r11,r10[0x1]
80003bbc:	30 aa       	mov	r10,10
80003bbe:	f4 0b 18 00 	cp.b	r11,r10
80003bc2:	c2 f1       	brne	80003c20 <udc_process_setup+0x1f8>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1)
80003bc4:	f0 09 19 00 	cp.h	r9,r8
80003bc8:	c2 a1       	brne	80003c1c <udc_process_setup+0x1f4>
		return false;	// Error in request
	if (!udc_num_configuration)
80003bca:	fe f8 02 be 	ld.w	r8,pc[702]
80003bce:	11 89       	ld.ub	r9,r8[0x0]
80003bd0:	30 08       	mov	r8,0
80003bd2:	f0 09 18 00 	cp.b	r9,r8
80003bd6:	c2 30       	breq	80003c1c <udc_process_setup+0x1f4>
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003bd8:	fe f8 02 90 	ld.w	r8,pc[656]
80003bdc:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003bde:	fe f8 02 ae 	ld.w	r8,pc[686]
80003be2:	70 08       	ld.w	r8,r8[0x0]
80003be4:	70 08       	ld.w	r8,r8[0x0]
80003be6:	11 c8       	ld.ub	r8,r8[0x4]
80003be8:	ee 08 18 00 	cp.b	r8,r7
80003bec:	e0 88 00 18 	brls	80003c1c <udc_process_setup+0x1f4>
		return false;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003bf0:	30 0b       	mov	r11,0
80003bf2:	0e 9c       	mov	r12,r7
80003bf4:	f0 1f 00 a7 	mcall	80003e90 <udc_process_setup+0x468>
80003bf8:	c1 20       	breq	80003c1c <udc_process_setup+0x1f4>
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
80003bfa:	fe f8 02 92 	ld.w	r8,pc[658]
80003bfe:	70 08       	ld.w	r8,r8[0x0]
80003c00:	70 18       	ld.w	r8,r8[0x4]
80003c02:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80003c06:	70 3c       	ld.w	r12,r8[0xc]
80003c08:	5d 1c       	icall	r12
80003c0a:	fe f8 02 8a 	ld.w	r8,pc[650]
80003c0e:	b0 8c       	st.b	r8[0x0],r12
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80003c10:	30 1b       	mov	r11,1
80003c12:	10 9c       	mov	r12,r8
80003c14:	f0 1f 00 97 	mcall	80003e70 <udc_process_setup+0x448>
80003c18:	30 1c       	mov	r12,1
80003c1a:	cf 58       	rjmp	80003e04 <udc_process_setup+0x3dc>
80003c1c:	30 0c       	mov	r12,0
80003c1e:	cf 38       	rjmp	80003e04 <udc_process_setup+0x3dc>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003c20:	58 28       	cp.w	r8,2
80003c22:	e0 81 00 f5 	brne	80003e0c <udc_process_setup+0x3e4>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c26:	fe f8 02 42 	ld.w	r8,pc[578]
80003c2a:	11 9a       	ld.ub	r10,r8[0x1]
80003c2c:	30 08       	mov	r8,0
80003c2e:	f0 0a 18 00 	cp.b	r10,r8
80003c32:	e0 81 00 e8 	brne	80003e02 <udc_process_setup+0x3da>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
80003c36:	30 28       	mov	r8,2
80003c38:	f0 09 19 00 	cp.h	r9,r8
80003c3c:	c0 30       	breq	80003c42 <udc_process_setup+0x21a>
80003c3e:	30 0c       	mov	r12,0
80003c40:	ce 28       	rjmp	80003e04 <udc_process_setup+0x3dc>
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80003c42:	fe f8 02 26 	ld.w	r8,pc[550]
80003c46:	11 dc       	ld.ub	r12,r8[0x5]
80003c48:	f0 1f 00 94 	mcall	80003e98 <udc_process_setup+0x470>
80003c4c:	e0 68 01 00 	mov	r8,256
80003c50:	f9 b8 00 00 	moveq	r8,0
80003c54:	fe fc 02 48 	ld.w	r12,pc[584]
80003c58:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload(
80003c5a:	30 2b       	mov	r11,2
80003c5c:	f0 1f 00 85 	mcall	80003e70 <udc_process_setup+0x448>
80003c60:	30 1c       	mov	r12,1
80003c62:	cd 18       	rjmp	80003e04 <udc_process_setup+0x3dc>
			}
		}
#endif
	} else {
		// SET Standard Requests  
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003c64:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003c68:	c7 71       	brne	80003d56 <udc_process_setup+0x32e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c6a:	fe f9 01 fe 	ld.w	r9,pc[510]
80003c6e:	13 99       	ld.ub	r9,r9[0x1]
80003c70:	30 3a       	mov	r10,3
80003c72:	f4 09 18 00 	cp.b	r9,r10
80003c76:	e0 80 00 c6 	breq	80003e02 <udc_process_setup+0x3da>
80003c7a:	e0 8b 00 07 	brhi	80003c88 <udc_process_setup+0x260>
80003c7e:	30 1a       	mov	r10,1
80003c80:	f4 09 18 00 	cp.b	r9,r10
80003c84:	c6 91       	brne	80003d56 <udc_process_setup+0x32e>
80003c86:	c1 78       	rjmp	80003cb4 <udc_process_setup+0x28c>
80003c88:	30 5a       	mov	r10,5
80003c8a:	f4 09 18 00 	cp.b	r9,r10
80003c8e:	c0 60       	breq	80003c9a <udc_process_setup+0x272>
80003c90:	30 9a       	mov	r10,9
80003c92:	f4 09 18 00 	cp.b	r9,r10
80003c96:	c6 01       	brne	80003d56 <udc_process_setup+0x32e>
80003c98:	c2 28       	rjmp	80003cdc <udc_process_setup+0x2b4>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003c9a:	4f 48       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003c9c:	90 39       	ld.sh	r9,r8[0x6]
80003c9e:	30 08       	mov	r8,0
80003ca0:	f0 09 19 00 	cp.h	r9,r8
80003ca4:	c0 30       	breq	80003caa <udc_process_setup+0x282>
80003ca6:	30 0c       	mov	r12,0
80003ca8:	ca e8       	rjmp	80003e04 <udc_process_setup+0x3dc>
		return false;

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
80003caa:	4f e9       	lddpc	r9,80003ea0 <udc_process_setup+0x478>
80003cac:	4e f8       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003cae:	91 49       	st.w	r8[0x10],r9
80003cb0:	30 1c       	mov	r12,1
80003cb2:	ca 98       	rjmp	80003e04 <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003cb4:	4e d8       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003cb6:	90 39       	ld.sh	r9,r8[0x6]
80003cb8:	30 08       	mov	r8,0
80003cba:	f0 09 19 00 	cp.h	r9,r8
80003cbe:	c0 d1       	brne	80003cd8 <udc_process_setup+0x2b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80003cc0:	4e a8       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003cc2:	90 19       	ld.sh	r9,r8[0x2]
80003cc4:	30 18       	mov	r8,1
80003cc6:	f0 09 19 00 	cp.h	r9,r8
80003cca:	c0 71       	brne	80003cd8 <udc_process_setup+0x2b0>
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
80003ccc:	4e 88       	lddpc	r8,80003e6c <udc_process_setup+0x444>
80003cce:	90 09       	ld.sh	r9,r8[0x0]
80003cd0:	a9 d9       	cbr	r9,0x9
80003cd2:	b0 09       	st.h	r8[0x0],r9
80003cd4:	30 1c       	mov	r12,1
80003cd6:	c9 78       	rjmp	80003e04 <udc_process_setup+0x3dc>
80003cd8:	30 0c       	mov	r12,0
80003cda:	c9 58       	rjmp	80003e04 <udc_process_setup+0x3dc>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength != 0)
80003cdc:	4e 38       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003cde:	90 39       	ld.sh	r9,r8[0x6]
80003ce0:	30 08       	mov	r8,0
80003ce2:	f0 09 19 00 	cp.h	r9,r8
80003ce6:	c3 41       	brne	80003d4e <udc_process_setup+0x326>
		return false;
	// Authorize configuration only if the address is valid
	if (!udd_getaddress())
80003ce8:	f0 1f 00 6f 	mcall	80003ea4 <udc_process_setup+0x47c>
80003cec:	c3 10       	breq	80003d4e <udc_process_setup+0x326>
			return false;
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80003cee:	4d f8       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003cf0:	11 b9       	ld.ub	r9,r8[0x3]
80003cf2:	4e 18       	lddpc	r8,80003e74 <udc_process_setup+0x44c>
80003cf4:	70 08       	ld.w	r8,r8[0x0]
80003cf6:	f1 38 00 11 	ld.ub	r8,r8[17]
80003cfa:	10 39       	cp.w	r9,r8
80003cfc:	e0 89 00 29 	brgt	80003d4e <udc_process_setup+0x326>
				udc_config.confdev_lsfs->bNumConfigurations)
			return false;
	}

	// Reset current configuration
	udc_reset();
80003d00:	f0 1f 00 6a 	mcall	80003ea8 <udc_process_setup+0x480>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80003d04:	4d 98       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003d06:	11 b8       	ld.ub	r8,r8[0x3]
80003d08:	4e 09       	lddpc	r9,80003e88 <udc_process_setup+0x460>
80003d0a:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
80003d0c:	58 08       	cp.w	r8,0
80003d0e:	c2 20       	breq	80003d52 <udc_process_setup+0x32a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
80003d10:	20 18       	sub	r8,1
80003d12:	4d 99       	lddpc	r9,80003e74 <udc_process_setup+0x44c>
80003d14:	72 19       	ld.w	r9,r9[0x4]
80003d16:	f2 08 00 38 	add	r8,r9,r8<<0x3
80003d1a:	4d d9       	lddpc	r9,80003e8c <udc_process_setup+0x464>
80003d1c:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d1e:	70 08       	ld.w	r8,r8[0x0]
80003d20:	11 c9       	ld.ub	r9,r8[0x4]
80003d22:	30 08       	mov	r8,0
80003d24:	f0 09 18 00 	cp.b	r9,r8
80003d28:	c1 50       	breq	80003d52 <udc_process_setup+0x32a>
80003d2a:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d2c:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d2e:	4d 86       	lddpc	r6,80003e8c <udc_process_setup+0x464>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d30:	0a 9b       	mov	r11,r5
80003d32:	0e 9c       	mov	r12,r7
80003d34:	f0 1f 00 5e 	mcall	80003eac <udc_process_setup+0x484>
80003d38:	c0 b0       	breq	80003d4e <udc_process_setup+0x326>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80003d3a:	2f f7       	sub	r7,-1
80003d3c:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d3e:	6c 08       	ld.w	r8,r6[0x0]
80003d40:	70 08       	ld.w	r8,r8[0x0]
80003d42:	11 c8       	ld.ub	r8,r8[0x4]
80003d44:	ee 08 18 00 	cp.b	r8,r7
80003d48:	fe 9b ff f4 	brhi	80003d30 <udc_process_setup+0x308>
80003d4c:	c0 38       	rjmp	80003d52 <udc_process_setup+0x32a>
80003d4e:	30 0c       	mov	r12,0
80003d50:	c5 a8       	rjmp	80003e04 <udc_process_setup+0x3dc>
80003d52:	30 1c       	mov	r12,1
80003d54:	c5 88       	rjmp	80003e04 <udc_process_setup+0x3dc>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003d56:	58 18       	cp.w	r8,1
80003d58:	c2 21       	brne	80003d9c <udc_process_setup+0x374>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003d5a:	4c 49       	lddpc	r9,80003e68 <udc_process_setup+0x440>
80003d5c:	13 9a       	ld.ub	r10,r9[0x1]
80003d5e:	30 b9       	mov	r9,11
80003d60:	f2 0a 18 00 	cp.b	r10,r9
80003d64:	c1 c1       	brne	80003d9c <udc_process_setup+0x374>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength != 0)
80003d66:	4c 18       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003d68:	90 39       	ld.sh	r9,r8[0x6]
80003d6a:	30 08       	mov	r8,0
80003d6c:	f0 09 19 00 	cp.h	r9,r8
80003d70:	c1 41       	brne	80003d98 <udc_process_setup+0x370>
		return false;	// Error in request
	if (!udc_num_configuration)
80003d72:	4c 68       	lddpc	r8,80003e88 <udc_process_setup+0x460>
80003d74:	11 89       	ld.ub	r9,r8[0x0]
80003d76:	30 08       	mov	r8,0
80003d78:	f0 09 18 00 	cp.b	r9,r8
80003d7c:	c0 e0       	breq	80003d98 <udc_process_setup+0x370>
		return false;	// The device is not is configured state yet


	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
80003d7e:	4b b8       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003d80:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num))
80003d82:	11 d7       	ld.ub	r7,r8[0x5]
80003d84:	0e 9c       	mov	r12,r7
80003d86:	f0 1f 00 4b 	mcall	80003eb0 <udc_process_setup+0x488>
80003d8a:	c0 70       	breq	80003d98 <udc_process_setup+0x370>
		return false;

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80003d8c:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80003d90:	0e 9c       	mov	r12,r7
80003d92:	f0 1f 00 47 	mcall	80003eac <udc_process_setup+0x484>
80003d96:	c3 78       	rjmp	80003e04 <udc_process_setup+0x3dc>
80003d98:	30 0c       	mov	r12,0
80003d9a:	c3 58       	rjmp	80003e04 <udc_process_setup+0x3dc>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003d9c:	58 28       	cp.w	r8,2
80003d9e:	c3 71       	brne	80003e0c <udc_process_setup+0x3e4>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003da0:	4b 28       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003da2:	11 98       	ld.ub	r8,r8[0x1]
80003da4:	30 19       	mov	r9,1
80003da6:	f2 08 18 00 	cp.b	r8,r9
80003daa:	c0 60       	breq	80003db6 <udc_process_setup+0x38e>
80003dac:	30 39       	mov	r9,3
80003dae:	f2 08 18 00 	cp.b	r8,r9
80003db2:	c2 81       	brne	80003e02 <udc_process_setup+0x3da>
80003db4:	c1 48       	rjmp	80003ddc <udc_process_setup+0x3b4>
 *
 * \return true if success 
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003db6:	4a d8       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003db8:	90 39       	ld.sh	r9,r8[0x6]
80003dba:	30 08       	mov	r8,0
80003dbc:	f0 09 19 00 	cp.h	r9,r8
80003dc0:	c0 c1       	brne	80003dd8 <udc_process_setup+0x3b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003dc2:	4a a8       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003dc4:	90 19       	ld.sh	r9,r8[0x2]
80003dc6:	30 08       	mov	r8,0
80003dc8:	f0 09 19 00 	cp.h	r9,r8
80003dcc:	c0 61       	brne	80003dd8 <udc_process_setup+0x3b0>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003dce:	4a 78       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003dd0:	11 dc       	ld.ub	r12,r8[0x5]
80003dd2:	f0 1f 00 39 	mcall	80003eb4 <udc_process_setup+0x48c>
80003dd6:	c1 78       	rjmp	80003e04 <udc_process_setup+0x3dc>
80003dd8:	30 0c       	mov	r12,0
80003dda:	c1 58       	rjmp	80003e04 <udc_process_setup+0x3dc>
 * \return true if success 
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_epset_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003ddc:	4a 38       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003dde:	90 39       	ld.sh	r9,r8[0x6]
80003de0:	30 08       	mov	r8,0
80003de2:	f0 09 19 00 	cp.h	r9,r8
80003de6:	c0 c1       	brne	80003dfe <udc_process_setup+0x3d6>
		return false;
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003de8:	4a 08       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003dea:	90 19       	ld.sh	r9,r8[0x2]
80003dec:	30 08       	mov	r8,0
80003dee:	f0 09 19 00 	cp.h	r9,r8
80003df2:	c0 61       	brne	80003dfe <udc_process_setup+0x3d6>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003df4:	49 d8       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003df6:	11 dc       	ld.ub	r12,r8[0x5]
80003df8:	f0 1f 00 30 	mcall	80003eb8 <udc_process_setup+0x490>
80003dfc:	c0 48       	rjmp	80003e04 <udc_process_setup+0x3dc>
80003dfe:	30 0c       	mov	r12,0
80003e00:	c0 28       	rjmp	80003e04 <udc_process_setup+0x3dc>
80003e02:	30 0c       	mov	r12,0
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd())
80003e04:	58 0c       	cp.w	r12,0
80003e06:	c0 30       	breq	80003e0c <udc_process_setup+0x3e4>
80003e08:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
			return true;
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80003e0c:	49 78       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003e0e:	11 88       	ld.ub	r8,r8[0x0]
80003e10:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003e14:	58 18       	cp.w	r8,1
80003e16:	c2 71       	brne	80003e64 <udc_process_setup+0x43c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration)
80003e18:	49 c8       	lddpc	r8,80003e88 <udc_process_setup+0x460>
80003e1a:	11 89       	ld.ub	r9,r8[0x0]
80003e1c:	30 08       	mov	r8,0
80003e1e:	f0 09 18 00 	cp.b	r9,r8
80003e22:	c2 10       	breq	80003e64 <udc_process_setup+0x43c>
		return false;	// The device is not is configured state yet
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003e24:	49 18       	lddpc	r8,80003e68 <udc_process_setup+0x440>
80003e26:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003e28:	49 98       	lddpc	r8,80003e8c <udc_process_setup+0x464>
80003e2a:	70 08       	ld.w	r8,r8[0x0]
80003e2c:	70 08       	ld.w	r8,r8[0x0]
80003e2e:	11 c8       	ld.ub	r8,r8[0x4]
80003e30:	ee 08 18 00 	cp.b	r8,r7
80003e34:	e0 88 00 18 	brls	80003e64 <udc_process_setup+0x43c>
		return false;

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003e38:	0e 96       	mov	r6,r7
80003e3a:	30 0b       	mov	r11,0
80003e3c:	0e 9c       	mov	r12,r7
80003e3e:	f0 1f 00 15 	mcall	80003e90 <udc_process_setup+0x468>
80003e42:	c1 10       	breq	80003e64 <udc_process_setup+0x43c>
		return false;
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003e44:	49 28       	lddpc	r8,80003e8c <udc_process_setup+0x464>
80003e46:	70 08       	ld.w	r8,r8[0x0]
80003e48:	70 18       	ld.w	r8,r8[0x4]
80003e4a:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003e4e:	6e 3c       	ld.w	r12,r7[0xc]
80003e50:	5d 1c       	icall	r12
80003e52:	18 9b       	mov	r11,r12
80003e54:	0c 9c       	mov	r12,r6
80003e56:	f0 1f 00 0f 	mcall	80003e90 <udc_process_setup+0x468>
80003e5a:	c0 50       	breq	80003e64 <udc_process_setup+0x43c>
		return false;

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80003e5c:	6e 2c       	ld.w	r12,r7[0x8]
80003e5e:	5d 1c       	icall	r12
80003e60:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003e64:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003e68:	00 00       	add	r0,r0
80003e6a:	0a 10       	sub	r0,r5
80003e6c:	00 00       	add	r0,r0
80003e6e:	08 8c       	andn	r12,r4
80003e70:	80 00       	ld.sh	r0,r0[0x0]
80003e72:	24 00       	sub	r0,64
80003e74:	00 00       	add	r0,r0
80003e76:	00 a4       	st.w	r0++,r4
80003e78:	00 00       	add	r0,r0
80003e7a:	00 c0       	st.b	r0++,r0
80003e7c:	00 00       	add	r0,r0
80003e7e:	00 e4       	st.h	--r0,r4
80003e80:	00 00       	add	r0,r0
80003e82:	00 c4       	st.b	r0++,r4
80003e84:	00 00       	add	r0,r0
80003e86:	00 d0       	st.w	--r0,r0
80003e88:	00 00       	add	r0,r0
80003e8a:	08 8e       	andn	lr,r4
80003e8c:	00 00       	add	r0,r0
80003e8e:	08 88       	andn	r8,r4
80003e90:	80 00       	ld.sh	r0,r0[0x0]
80003e92:	38 18       	mov	r8,-127
80003e94:	00 00       	add	r0,r0
80003e96:	08 84       	andn	r4,r4
80003e98:	80 00       	ld.sh	r0,r0[0x0]
80003e9a:	24 0c       	sub	r12,64
80003e9c:	00 00       	add	r0,r0
80003e9e:	08 90       	mov	r0,r4
80003ea0:	80 00       	ld.sh	r0,r0[0x0]
80003ea2:	38 ec       	mov	r12,-114
80003ea4:	80 00       	ld.sh	r0,r0[0x0]
80003ea6:	23 da       	sub	r10,61
80003ea8:	80 00       	ld.sh	r0,r0[0x0]
80003eaa:	39 c8       	mov	r8,-100
80003eac:	80 00       	ld.sh	r0,r0[0x0]
80003eae:	39 04       	mov	r4,-112
80003eb0:	80 00       	ld.sh	r0,r0[0x0]
80003eb2:	39 64       	mov	r4,-106
80003eb4:	80 00       	ld.sh	r0,r0[0x0]
80003eb6:	24 9c       	sub	r12,73
80003eb8:	80 00       	ld.sh	r0,r0[0x0]
80003eba:	24 20       	sub	r0,66

80003ebc <_read>:
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
{
80003ebc:	eb cd 40 fc 	pushm	r2-r7,lr
80003ec0:	20 1d       	sub	sp,4
80003ec2:	16 94       	mov	r4,r11
80003ec4:	14 95       	mov	r5,r10
	int nChars = 0;

	if (file != 0)
80003ec6:	58 0c       	cp.w	r12,0
80003ec8:	c0 30       	breq	80003ece <_read+0x12>
80003eca:	3f f7       	mov	r7,-1
80003ecc:	c1 98       	rjmp	80003efe <_read+0x42>
		return -1;

	for (; len > 0; --len) {
80003ece:	58 0a       	cp.w	r10,0
80003ed0:	e0 89 00 04 	brgt	80003ed8 <_read+0x1c>
80003ed4:	30 07       	mov	r7,0
80003ed6:	c1 48       	rjmp	80003efe <_read+0x42>
80003ed8:	30 07       	mov	r7,0
		int c;
		ptr_get(stdio_base,&c);
80003eda:	48 c3       	lddpc	r3,80003f08 <_read+0x4c>
80003edc:	48 c6       	lddpc	r6,80003f0c <_read+0x50>
80003ede:	1a 92       	mov	r2,sp
80003ee0:	66 0c       	ld.w	r12,r3[0x0]
80003ee2:	6c 08       	ld.w	r8,r6[0x0]
80003ee4:	1a 9b       	mov	r11,sp
80003ee6:	5d 18       	icall	r8
		if (c < 0)
80003ee8:	40 08       	lddsp	r8,sp[0x0]
80003eea:	58 08       	cp.w	r8,0
80003eec:	c0 95       	brlt	80003efe <_read+0x42>
		break;
		*ptr++ = c;
80003eee:	e8 07 0b 08 	st.b	r4[r7],r8
		++nChars;
80003ef2:	2f f7       	sub	r7,-1
// GCC AVR32 implementation
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
80003ef4:	ea 07 01 08 	sub	r8,r5,r7
	int nChars = 0;

	if (file != 0)
		return -1;

	for (; len > 0; --len) {
80003ef8:	58 08       	cp.w	r8,0
80003efa:	fe 99 ff f3 	brgt	80003ee0 <_read+0x24>
		break;
		*ptr++ = c;
		++nChars;
	}
	return nChars;
}
80003efe:	0e 9c       	mov	r12,r7
80003f00:	2f fd       	sub	sp,-4
80003f02:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003f06:	00 00       	add	r0,r0
80003f08:	00 00       	add	r0,r0
80003f0a:	0a 38       	cp.w	r8,r5
80003f0c:	00 00       	add	r0,r0
80003f0e:	0a 30       	cp.w	r0,r5

80003f10 <stdio_usb_enable>:
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80003f10:	30 19       	mov	r9,1
80003f12:	48 28       	lddpc	r8,80003f18 <stdio_usb_enable+0x8>
80003f14:	b0 89       	st.b	r8[0x0],r9
	return true;
}
80003f16:	5e ff       	retal	1
80003f18:	00 00       	add	r0,r0
80003f1a:	08 98       	mov	r8,r4

80003f1c <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
80003f1c:	30 09       	mov	r9,0
80003f1e:	48 28       	lddpc	r8,80003f24 <stdio_usb_disable+0x8>
80003f20:	b0 89       	st.b	r8[0x0],r9
}
80003f22:	5e fc       	retal	r12
80003f24:	00 00       	add	r0,r0
80003f26:	08 98       	mov	r8,r4

80003f28 <stdio_usb_vbus_event>:
	
	*data = udi_cdc_getc ();
}

void stdio_usb_vbus_event(bool b_high)
{
80003f28:	d4 01       	pushm	lr
	if (b_high) {
80003f2a:	58 0c       	cp.w	r12,0
80003f2c:	c0 40       	breq	80003f34 <stdio_usb_vbus_event+0xc>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80003f2e:	f0 1f 00 04 	mcall	80003f3c <stdio_usb_vbus_event+0x14>
80003f32:	d8 02       	popm	pc
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
80003f34:	f0 1f 00 03 	mcall	80003f40 <stdio_usb_vbus_event+0x18>
80003f38:	d8 02       	popm	pc
80003f3a:	00 00       	add	r0,r0
80003f3c:	80 00       	ld.sh	r0,r0[0x0]
80003f3e:	2a 94       	sub	r4,-87
80003f40:	80 00       	ld.sh	r0,r0[0x0]
80003f42:	27 44       	sub	r4,116

80003f44 <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init (volatile void * usart)
{
80003f44:	d4 01       	pushm	lr
	stdio_base = usart;
80003f46:	48 98       	lddpc	r8,80003f68 <stdio_usb_init+0x24>
80003f48:	91 0c       	st.w	r8[0x0],r12
	ptr_put = stdio_usb_putchar;
80003f4a:	48 99       	lddpc	r9,80003f6c <stdio_usb_init+0x28>
80003f4c:	48 98       	lddpc	r8,80003f70 <stdio_usb_init+0x2c>
80003f4e:	91 09       	st.w	r8[0x0],r9
	ptr_get = stdio_usb_getchar;
80003f50:	48 99       	lddpc	r9,80003f74 <stdio_usb_init+0x30>
80003f52:	48 a8       	lddpc	r8,80003f78 <stdio_usb_init+0x34>
80003f54:	91 09       	st.w	r8[0x0],r9

/*! \brief Start the USB Device stack
 */
static inline void udc_start(void)
{
	udd_enable();
80003f56:	f0 1f 00 0a 	mcall	80003f7c <stdio_usb_init+0x38>
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
80003f5a:	f0 1f 00 0a 	mcall	80003f80 <stdio_usb_init+0x3c>
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();

	if (! udc_include_vbus_monitoring ()) {
80003f5e:	c0 41       	brne	80003f66 <stdio_usb_init+0x22>
		stdio_usb_vbus_event (true);
80003f60:	30 1c       	mov	r12,1
80003f62:	f0 1f 00 09 	mcall	80003f84 <stdio_usb_init+0x40>
80003f66:	d8 02       	popm	pc
80003f68:	00 00       	add	r0,r0
80003f6a:	0a 38       	cp.w	r8,r5
80003f6c:	80 00       	ld.sh	r0,r0[0x0]
80003f6e:	3f b4       	mov	r4,-5
80003f70:	00 00       	add	r0,r0
80003f72:	0a 34       	cp.w	r4,r5
80003f74:	80 00       	ld.sh	r0,r0[0x0]
80003f76:	3f 88       	mov	r8,-8
80003f78:	00 00       	add	r0,r0
80003f7a:	0a 30       	cp.w	r0,r5
80003f7c:	80 00       	ld.sh	r0,r0[0x0]
80003f7e:	2b 04       	sub	r4,-80
80003f80:	80 00       	ld.sh	r0,r0[0x0]
80003f82:	23 b4       	sub	r4,59
80003f84:	80 00       	ld.sh	r0,r0[0x0]
80003f86:	3f 28       	mov	r8,-14

80003f88 <stdio_usb_getchar>:

	return udi_cdc_putc (data) ? 0 : -1;
}

void stdio_usb_getchar (void volatile * usart, int * data)
{
80003f88:	eb cd 40 80 	pushm	r7,lr
80003f8c:	16 97       	mov	r7,r11
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003f8e:	48 88       	lddpc	r8,80003fac <stdio_usb_getchar+0x24>
80003f90:	11 89       	ld.ub	r9,r8[0x0]
80003f92:	30 08       	mov	r8,0
80003f94:	f0 09 18 00 	cp.b	r9,r8
80003f98:	c0 51       	brne	80003fa2 <stdio_usb_getchar+0x1a>
		*data = 0;  // -1
80003f9a:	30 08       	mov	r8,0
80003f9c:	97 08       	st.w	r11[0x0],r8
		return;
80003f9e:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	
	*data = udi_cdc_getc ();
80003fa2:	f0 1f 00 04 	mcall	80003fb0 <stdio_usb_getchar+0x28>
80003fa6:	8f 0c       	st.w	r7[0x0],r12
80003fa8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fac:	00 00       	add	r0,r0
80003fae:	08 98       	mov	r8,r4
80003fb0:	80 00       	ld.sh	r0,r0[0x0]
80003fb2:	35 0c       	mov	r12,80

80003fb4 <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * usart, int data)
{
80003fb4:	d4 01       	pushm	lr
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003fb6:	48 78       	lddpc	r8,80003fd0 <stdio_usb_putchar+0x1c>
80003fb8:	11 89       	ld.ub	r9,r8[0x0]
80003fba:	30 08       	mov	r8,0
80003fbc:	f0 09 18 00 	cp.b	r9,r8
80003fc0:	c0 60       	breq	80003fcc <stdio_usb_putchar+0x18>
		return 0;  // -1
	}

	return udi_cdc_putc (data) ? 0 : -1;
80003fc2:	16 9c       	mov	r12,r11
80003fc4:	f0 1f 00 04 	mcall	80003fd4 <stdio_usb_putchar+0x20>
80003fc8:	c0 21       	brne	80003fcc <stdio_usb_putchar+0x18>
80003fca:	dc 0a       	popm	pc,r12=-1
80003fcc:	d8 0a       	popm	pc,r12=0
80003fce:	00 00       	add	r0,r0
80003fd0:	00 00       	add	r0,r0
80003fd2:	08 98       	mov	r8,r4
80003fd4:	80 00       	ld.sh	r0,r0[0x0]
80003fd6:	34 0c       	mov	r12,64

80003fd8 <_write>:

#elif (defined(__GNUC__) && !defined(XMEGA))

	int __attribute__((weak))
	_write (int file, char * ptr, int len)
	{
80003fd8:	eb cd 40 f8 	pushm	r3-r7,lr
80003fdc:	16 94       	mov	r4,r11
80003fde:	14 95       	mov	r5,r10
		int nChars = 0;
	
		if ( (file != 1)
80003fe0:	20 1c       	sub	r12,1
80003fe2:	58 2c       	cp.w	r12,2
80003fe4:	e0 8b 00 13 	brhi	8000400a <_write+0x32>
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80003fe8:	58 0a       	cp.w	r10,0
80003fea:	c0 31       	brne	80003ff0 <_write+0x18>
80003fec:	30 07       	mov	r7,0
80003fee:	c0 f8       	rjmp	8000400c <_write+0x34>
80003ff0:	30 07       	mov	r7,0
			if (ptr_put(stdio_base, *ptr++) < 0) {
80003ff2:	48 93       	lddpc	r3,80004014 <_write+0x3c>
80003ff4:	48 96       	lddpc	r6,80004018 <_write+0x40>
80003ff6:	66 0c       	ld.w	r12,r3[0x0]
80003ff8:	6c 08       	ld.w	r8,r6[0x0]
80003ffa:	e8 07 07 0b 	ld.ub	r11,r4[r7]
80003ffe:	5d 18       	icall	r8
80004000:	c0 55       	brlt	8000400a <_write+0x32>
				return -1;
			}
			++nChars;
80004002:	2f f7       	sub	r7,-1
	
		if ( (file != 1)
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80004004:	0e 35       	cp.w	r5,r7
80004006:	cf 81       	brne	80003ff6 <_write+0x1e>
80004008:	c0 28       	rjmp	8000400c <_write+0x34>
8000400a:	3f f7       	mov	r7,-1
				return -1;
			}
			++nChars;
		}
		return nChars;
	}
8000400c:	0e 9c       	mov	r12,r7
8000400e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80004012:	00 00       	add	r0,r0
80004014:	00 00       	add	r0,r0
80004016:	0a 38       	cp.w	r8,r5
80004018:	00 00       	add	r0,r0
8000401a:	0a 34       	cp.w	r4,r5

8000401c <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
8000401c:	f8 c8 ff f8 	sub	r8,r12,-8
80004020:	99 18       	st.w	r12[0x4],r8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80004022:	3f f9       	mov	r9,-1
80004024:	99 29       	st.w	r12[0x8],r9

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
80004026:	99 38       	st.w	r12[0xc],r8
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
80004028:	99 48       	st.w	r12[0x10],r8

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
8000402a:	30 08       	mov	r8,0
8000402c:	99 08       	st.w	r12[0x0],r8
}
8000402e:	5e fc       	retal	r12

80004030 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80004030:	30 08       	mov	r8,0
80004032:	99 48       	st.w	r12[0x10],r8
}
80004034:	5e fc       	retal	r12

80004036 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
80004036:	78 18       	ld.w	r8,r12[0x4]

	pxNewListItem->pxNext = pxIndex->pxNext;
80004038:	70 19       	ld.w	r9,r8[0x4]
8000403a:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxPrevious = pxList->pxIndex;
8000403c:	78 19       	ld.w	r9,r12[0x4]
8000403e:	97 29       	st.w	r11[0x8],r9
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
80004040:	70 19       	ld.w	r9,r8[0x4]
80004042:	93 2b       	st.w	r9[0x8],r11
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
80004044:	91 1b       	st.w	r8[0x4],r11
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
80004046:	99 1b       	st.w	r12[0x4],r11

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80004048:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
8000404a:	78 08       	ld.w	r8,r12[0x0]
8000404c:	2f f8       	sub	r8,-1
8000404e:	99 08       	st.w	r12[0x0],r8
}
80004050:	5e fc       	retal	r12

80004052 <vListInsert>:
{
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
80004052:	76 0a       	ld.w	r10,r11[0x0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80004054:	5b fa       	cp.w	r10,-1
80004056:	c0 31       	brne	8000405c <vListInsert+0xa>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80004058:	78 48       	ld.w	r8,r12[0x10]
8000405a:	c0 c8       	rjmp	80004072 <vListInsert+0x20>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
8000405c:	f8 c8 ff f8 	sub	r8,r12,-8
80004060:	70 19       	ld.w	r9,r8[0x4]
80004062:	72 09       	ld.w	r9,r9[0x0]
80004064:	12 3a       	cp.w	r10,r9
80004066:	c0 63       	brcs	80004072 <vListInsert+0x20>
80004068:	70 18       	ld.w	r8,r8[0x4]
8000406a:	70 19       	ld.w	r9,r8[0x4]
8000406c:	72 09       	ld.w	r9,r9[0x0]
8000406e:	12 3a       	cp.w	r10,r9
80004070:	cf c2       	brcc	80004068 <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80004072:	70 19       	ld.w	r9,r8[0x4]
80004074:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
80004076:	93 2b       	st.w	r9[0x8],r11
	pxNewListItem->pxPrevious = pxIterator;
80004078:	97 28       	st.w	r11[0x8],r8
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
8000407a:	91 1b       	st.w	r8[0x4],r11

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
8000407c:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
8000407e:	78 08       	ld.w	r8,r12[0x0]
80004080:	2f f8       	sub	r8,-1
80004082:	99 08       	st.w	r12[0x0],r8
}
80004084:	5e fc       	retal	r12

80004086 <vListRemove>:

void vListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80004086:	78 18       	ld.w	r8,r12[0x4]
80004088:	78 29       	ld.w	r9,r12[0x8]
8000408a:	91 29       	st.w	r8[0x8],r9
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
8000408c:	78 28       	ld.w	r8,r12[0x8]
8000408e:	78 19       	ld.w	r9,r12[0x4]
80004090:	91 19       	st.w	r8[0x4],r9
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
80004092:	78 48       	ld.w	r8,r12[0x10]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80004094:	70 19       	ld.w	r9,r8[0x4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80004096:	18 39       	cp.w	r9,r12
80004098:	f9 f9 00 02 	ld.weq	r9,r12[0x8]
8000409c:	f1 f9 0a 01 	st.weq	r8[0x4],r9
	}

	pxItemToRemove->pvContainer = NULL;
800040a0:	30 09       	mov	r9,0
800040a2:	99 49       	st.w	r12[0x10],r9
	( pxList->uxNumberOfItems )--;
800040a4:	70 09       	ld.w	r9,r8[0x0]
800040a6:	20 19       	sub	r9,1
800040a8:	91 09       	st.w	r8[0x0],r9
}
800040aa:	5e fc       	retal	r12

800040ac <pxPortInitialiseStack>:
	/* Setup the initial stack of the task.  The stack is set exactly as
	expected by the portRESTORE_CONTEXT() macro. */

	/* When the task starts, it will expect to find the function parameter in R12. */
	pxTopOfStack--;
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x08080808;					/* R8 */
800040ac:	e0 68 08 08 	mov	r8,2056
800040b0:	ea 18 08 08 	orh	r8,0x808
800040b4:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x09090909;					/* R9 */
800040b6:	e0 68 09 09 	mov	r8,2313
800040ba:	ea 18 09 09 	orh	r8,0x909
800040be:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0A0A0A0A;					/* R10 */
800040c0:	e0 68 0a 0a 	mov	r8,2570
800040c4:	ea 18 0a 0a 	orh	r8,0xa0a
800040c8:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0B0B0B0B;					/* R11 */
800040ca:	e0 68 0b 0b 	mov	r8,2827
800040ce:	ea 18 0b 0b 	orh	r8,0xb0b
800040d2:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pvParameters;					/* R12 */
800040d4:	18 da       	st.w	--r12,r10
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xDEADBEEF;					/* R14/LR */
800040d6:	e0 68 be ef 	mov	r8,48879
800040da:	ea 18 de ad 	orh	r8,0xdead
800040de:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE; /* R15/PC */
800040e0:	18 db       	st.w	--r12,r11
	*pxTopOfStack-- = ( portSTACK_TYPE ) portINITIAL_SR;				/* SR */
800040e2:	fc 18 00 40 	movh	r8,0x40
800040e6:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xFF0000FF;					/* R0 */
800040e8:	e0 68 00 ff 	mov	r8,255
800040ec:	ea 18 ff 00 	orh	r8,0xff00
800040f0:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x01010101;					/* R1 */
800040f2:	e0 68 01 01 	mov	r8,257
800040f6:	ea 18 01 01 	orh	r8,0x101
800040fa:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x02020202;					/* R2 */
800040fc:	e0 68 02 02 	mov	r8,514
80004100:	ea 18 02 02 	orh	r8,0x202
80004104:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x03030303;					/* R3 */
80004106:	e0 68 03 03 	mov	r8,771
8000410a:	ea 18 03 03 	orh	r8,0x303
8000410e:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x04040404;					/* R4 */
80004110:	e0 68 04 04 	mov	r8,1028
80004114:	ea 18 04 04 	orh	r8,0x404
80004118:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x05050505;					/* R5 */
8000411a:	e0 68 05 05 	mov	r8,1285
8000411e:	ea 18 05 05 	orh	r8,0x505
80004122:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x06060606;					/* R6 */
80004124:	e0 68 06 06 	mov	r8,1542
80004128:	ea 18 06 06 	orh	r8,0x606
8000412c:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x07070707;					/* R7 */
8000412e:	e0 68 07 07 	mov	r8,1799
80004132:	ea 18 07 07 	orh	r8,0x707
80004136:	18 d8       	st.w	--r12,r8
	*pxTopOfStack = ( portSTACK_TYPE ) portNO_CRITICAL_NESTING;			/* ulCriticalNesting */
80004138:	30 08       	mov	r8,0
8000413a:	18 d8       	st.w	--r12,r8

	return pxTopOfStack;
}
8000413c:	5e fc       	retal	r12
8000413e:	d7 03       	nop

80004140 <vPortEnterCritical>:
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
__attribute__((__noinline__)) void vPortEnterCritical( void )
{
	/* Disable interrupts */
	portDISABLE_INTERRUPTS();
80004140:	d3 03       	ssrf	0x10

	/* Now interrupts are disabled ulCriticalNesting can be accessed
	 directly.  Increment ulCriticalNesting to keep a count of how many times
	 portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
80004142:	48 38       	lddpc	r8,8000414c <vPortEnterCritical+0xc>
80004144:	70 09       	ld.w	r9,r8[0x0]
80004146:	2f f9       	sub	r9,-1
80004148:	91 09       	st.w	r8[0x0],r9
}
8000414a:	5e fc       	retal	r12
8000414c:	00 00       	add	r0,r0
8000414e:	00 e8       	st.h	--r0,r8

80004150 <xPortStartScheduler>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
80004150:	d4 01       	pushm	lr
	};

#endif

	/* Disable all interrupt/exception. */
	portDISABLE_INTERRUPTS();
80004152:	d3 03       	ssrf	0x10
		/* Start the timer/counter. */
		tc_start(tc, configTICK_TC_CHANNEL);
	}
	#else
	{
		INTC_register_interrupt(&vTick, AVR32_CORE_COMPARE_IRQ, AVR32_INTC_INT0);
80004154:	30 0a       	mov	r10,0
80004156:	14 9b       	mov	r11,r10
80004158:	49 2c       	lddpc	r12,800041a0 <xPortStartScheduler+0x50>
8000415a:	f0 1f 00 13 	mcall	800041a4 <xPortStartScheduler+0x54>
/* Schedule the COUNT&COMPARE match interrupt in (configCPU_CLOCK_HZ/configTICK_RATE_HZ)
clock cycles from now. */
#if( configTICK_USE_TC==0 )
	static void prvScheduleFirstTick(void)
	{
		Set_system_register(AVR32_COMPARE, configCPU_CLOCK_HZ/configTICK_RATE_HZ);
8000415e:	e0 68 2e e0 	mov	r8,12000
80004162:	e3 b8 00 43 	mtsr	0x10c,r8
		Set_system_register(AVR32_COUNT, 0);
80004166:	30 08       	mov	r8,0
80004168:	e3 b8 00 42 	mtsr	0x108,r8
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Start the first task. */
	portRESTORE_CONTEXT();
8000416c:	e0 68 09 6c 	mov	r8,2412
80004170:	ea 18 00 00 	orh	r8,0x0
80004174:	70 00       	ld.w	r0,r8[0x0]
80004176:	60 0d       	ld.w	sp,r0[0x0]
80004178:	1b 00       	ld.w	r0,sp++
8000417a:	e0 68 00 e8 	mov	r8,232
8000417e:	ea 18 00 00 	orh	r8,0x0
80004182:	91 00       	st.w	r8[0x0],r0
80004184:	e3 cd 00 ff 	ldm	sp++,r0-r7
80004188:	2f ed       	sub	sp,-8
8000418a:	e3 cd 5f 00 	ldm	sp++,r8-r12,lr
8000418e:	fa f0 ff e0 	ld.w	r0,sp[-32]
80004192:	e3 b0 00 00 	mtsr	0x0,r0
80004196:	fa f0 ff dc 	ld.w	r0,sp[-36]
8000419a:	fa ff ff e4 	ld.w	pc,sp[-28]

	/* Should not get here! */
	return 0;
}
8000419e:	d8 0a       	popm	pc,r12=0
800041a0:	80 00       	ld.sh	r0,r0[0x0]
800041a2:	42 6c       	lddsp	r12,sp[0x98]
800041a4:	80 00       	ld.sh	r0,r0[0x0]
800041a6:	22 24       	sub	r4,34

800041a8 <SCALLYield>:
/*-----------------------------------------------------------*/
__attribute__((__naked__)) void SCALLYield( void );
__attribute__((__naked__)) void SCALLYield( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_SCALL();
800041a8:	20 6d       	sub	sp,24
800041aa:	eb cd 00 ff 	pushm	r0-r7
800041ae:	fa c7 ff c0 	sub	r7,sp,-64
800041b2:	ee f0 ff f8 	ld.w	r0,r7[-8]
800041b6:	ef 40 ff e0 	st.w	r7[-32],r0
800041ba:	ee f0 ff fc 	ld.w	r0,r7[-4]
800041be:	ef 40 ff e4 	st.w	r7[-28],r0
800041c2:	eb c7 5f 00 	stm	--r7,r8-r12,lr
800041c6:	e0 68 00 e8 	mov	r8,232
800041ca:	ea 18 00 00 	orh	r8,0x0
800041ce:	70 00       	ld.w	r0,r8[0x0]
800041d0:	1a d0       	st.w	--sp,r0
800041d2:	f0 1f 00 1a 	mcall	80004238 <LABEL_RET_SCALL_266+0x14>
800041d6:	e0 68 09 6c 	mov	r8,2412
800041da:	ea 18 00 00 	orh	r8,0x0
800041de:	70 00       	ld.w	r0,r8[0x0]
800041e0:	81 0d       	st.w	r0[0x0],sp
	vTaskSwitchContext();
800041e2:	f0 1f 00 17 	mcall	8000423c <LABEL_RET_SCALL_266+0x18>
	portRESTORE_CONTEXT_SCALL();
800041e6:	e0 68 09 6c 	mov	r8,2412
800041ea:	ea 18 00 00 	orh	r8,0x0
800041ee:	70 00       	ld.w	r0,r8[0x0]
800041f0:	60 0d       	ld.w	sp,r0[0x0]
800041f2:	1b 00       	ld.w	r0,sp++
800041f4:	e0 68 00 e8 	mov	r8,232
800041f8:	ea 18 00 00 	orh	r8,0x0
800041fc:	91 00       	st.w	r8[0x0],r0
800041fe:	fa c7 ff d8 	sub	r7,sp,-40
80004202:	e3 c7 5f 00 	ldm	r7++,r8-r12,lr
80004206:	ee f0 ff e0 	ld.w	r0,r7[-32]
8000420a:	e0 61 00 e8 	mov	r1,232
8000420e:	ea 11 00 00 	orh	r1,0x0
80004212:	62 02       	ld.w	r2,r1[0x0]
80004214:	58 02       	cp.w	r2,0
80004216:	c0 70       	breq	80004224 <LABEL_RET_SCALL_266>
80004218:	e4 c2 00 01 	sub	r2,r2,1
8000421c:	83 02       	st.w	r1[0x0],r2
8000421e:	58 02       	cp.w	r2,0
80004220:	c0 21       	brne	80004224 <LABEL_RET_SCALL_266>
80004222:	b1 c0       	cbr	r0,0x10

80004224 <LABEL_RET_SCALL_266>:
80004224:	ef 40 ff f8 	st.w	r7[-8],r0
80004228:	ee f0 ff e4 	ld.w	r0,r7[-28]
8000422c:	ef 40 ff fc 	st.w	r7[-4],r0
80004230:	e3 cd 00 ff 	ldm	sp++,r0-r7
80004234:	2f ad       	sub	sp,-24
80004236:	d6 13       	rets
80004238:	80 00       	ld.sh	r0,r0[0x0]
8000423a:	41 40       	lddsp	r0,sp[0x50]
8000423c:	80 00       	ld.sh	r0,r0[0x0]
8000423e:	43 80       	lddsp	r0,sp[0xe0]

80004240 <prvClearCcInt>:
		Set_system_register(AVR32_COUNT, 0);
	}

	__attribute__((__noinline__)) static void prvClearCcInt(void)
	{
		Set_system_register(AVR32_COMPARE, Get_system_register(AVR32_COMPARE));
80004240:	e1 b8 00 43 	mfsr	r8,0x10c
80004244:	e3 b8 00 43 	mtsr	0x10c,r8
	}
80004248:	5e fc       	retal	r12
8000424a:	d7 03       	nop

8000424c <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

__attribute__((__noinline__)) void vPortExitCritical( void )
{
	if(ulCriticalNesting > portNO_CRITICAL_NESTING)
8000424c:	48 78       	lddpc	r8,80004268 <vPortExitCritical+0x1c>
8000424e:	70 08       	ld.w	r8,r8[0x0]
80004250:	58 08       	cp.w	r8,0
80004252:	5e 0c       	reteq	r12
	{
		ulCriticalNesting--;
80004254:	48 58       	lddpc	r8,80004268 <vPortExitCritical+0x1c>
80004256:	70 09       	ld.w	r9,r8[0x0]
80004258:	20 19       	sub	r9,1
8000425a:	91 09       	st.w	r8[0x0],r9
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
8000425c:	70 08       	ld.w	r8,r8[0x0]
8000425e:	58 08       	cp.w	r8,0
80004260:	5e 1c       	retne	r12
		{
			/* Enable all interrupt/exception. */
			portENABLE_INTERRUPTS();
80004262:	d5 03       	csrf	0x10
80004264:	5e fc       	retal	r12
80004266:	00 00       	add	r0,r0
80004268:	00 00       	add	r0,r0
8000426a:	00 e8       	st.h	--r0,r8

8000426c <vTick>:
/* The preemptive scheduler is defined as "naked" as the full context is saved
on entry as part of the context switch. */
__attribute__((__naked__)) static void vTick( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_OS_INT();
8000426c:	eb cd 00 ff 	pushm	r0-r7
80004270:	e0 68 00 e8 	mov	r8,232
80004274:	ea 18 00 00 	orh	r8,0x0
80004278:	70 00       	ld.w	r0,r8[0x0]
8000427a:	1a d0       	st.w	--sp,r0
8000427c:	7a 90       	ld.w	r0,sp[0x24]
8000427e:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
80004282:	58 10       	cp.w	r0,1
80004284:	e0 8b 00 08 	brhi	80004294 <LABEL_INT_SKIP_SAVE_CONTEXT_240>
80004288:	e0 68 09 6c 	mov	r8,2412
8000428c:	ea 18 00 00 	orh	r8,0x0
80004290:	70 00       	ld.w	r0,r8[0x0]
80004292:	81 0d       	st.w	r0[0x0],sp

80004294 <LABEL_INT_SKIP_SAVE_CONTEXT_240>:
	#if( configTICK_USE_TC==1 )
		/* Clear the interrupt flag. */
		prvClearTcInt();
	#else
		/* Clear the interrupt flag. */
		prvClearCcInt();
80004294:	f0 1f 00 12 	mcall	800042dc <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x14>
	#endif

	/* Because FreeRTOS is not supposed to run with nested interrupts, put all OS
	calls in a critical section . */
	portENTER_CRITICAL();
80004298:	f0 1f 00 12 	mcall	800042e0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x18>
		vTaskIncrementTick();
8000429c:	f0 1f 00 12 	mcall	800042e4 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x1c>
	portEXIT_CRITICAL();
800042a0:	f0 1f 00 12 	mcall	800042e8 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x20>

	/* Restore the context of the "elected task". */
	portRESTORE_CONTEXT_OS_INT();
800042a4:	7a 90       	ld.w	r0,sp[0x24]
800042a6:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
800042aa:	58 10       	cp.w	r0,1
800042ac:	e0 8b 00 0e 	brhi	800042c8 <LABEL_INT_SKIP_RESTORE_CONTEXT_257>
800042b0:	f0 1f 00 0c 	mcall	800042e0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x18>
800042b4:	f0 1f 00 0e 	mcall	800042ec <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x24>
800042b8:	f0 1f 00 0c 	mcall	800042e8 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x20>
800042bc:	e0 68 09 6c 	mov	r8,2412
800042c0:	ea 18 00 00 	orh	r8,0x0
800042c4:	70 00       	ld.w	r0,r8[0x0]
800042c6:	60 0d       	ld.w	sp,r0[0x0]

800042c8 <LABEL_INT_SKIP_RESTORE_CONTEXT_257>:
800042c8:	1b 00       	ld.w	r0,sp++
800042ca:	e0 68 00 e8 	mov	r8,232
800042ce:	ea 18 00 00 	orh	r8,0x0
800042d2:	91 00       	st.w	r8[0x0],r0
800042d4:	e3 cd 00 ff 	ldm	sp++,r0-r7
800042d8:	d6 03       	rete
800042da:	00 00       	add	r0,r0
800042dc:	80 00       	ld.sh	r0,r0[0x0]
800042de:	42 40       	lddsp	r0,sp[0x90]
800042e0:	80 00       	ld.sh	r0,r0[0x0]
800042e2:	41 40       	lddsp	r0,sp[0x50]
800042e4:	80 00       	ld.sh	r0,r0[0x0]
800042e6:	43 fc       	lddsp	r12,sp[0xfc]
800042e8:	80 00       	ld.sh	r0,r0[0x0]
800042ea:	42 4c       	lddsp	r12,sp[0x90]
800042ec:	80 00       	ld.sh	r0,r0[0x0]
800042ee:	43 80       	lddsp	r0,sp[0xe0]

800042f0 <__malloc_lock>:
 * safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_lock(struct _reent *ptr);
void __malloc_lock(struct _reent *ptr)
{
800042f0:	d4 01       	pushm	lr
	vTaskSuspendAll();
800042f2:	f0 1f 00 02 	mcall	800042f8 <__malloc_lock+0x8>
}
800042f6:	d8 02       	popm	pc
800042f8:	80 00       	ld.sh	r0,r0[0x0]
800042fa:	43 70       	lddsp	r0,sp[0xdc]

800042fc <__malloc_unlock>:
 * a safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_unlock(struct _reent *ptr);
void __malloc_unlock(struct _reent *ptr)
{
800042fc:	d4 01       	pushm	lr
	xTaskResumeAll();
800042fe:	f0 1f 00 02 	mcall	80004304 <__malloc_unlock+0x8>
}
80004302:	d8 02       	popm	pc
80004304:	80 00       	ld.sh	r0,r0[0x0]
80004306:	45 14       	lddsp	r4,sp[0x144]

80004308 <_init_startup>:
 * exception vectors are not compatible with the SCALL management in the current
 * FreeRTOS port. More low-level initializations are besides added here.
 */
int _init_startup(void);
int _init_startup(void)
{
80004308:	d4 01       	pushm	lr
		extern void __heap_end__;
		portBASE_TYPE *pxMem;
	#endif

	/* Load the Exception Vector Base Address in the corresponding system register. */
	Set_system_register( AVR32_EVBA, ( int ) &_evba );
8000430a:	48 48       	lddpc	r8,80004318 <_init_startup+0x10>
8000430c:	e3 b8 00 01 	mtsr	0x4,r8

	/* Enable exceptions. */
	ENABLE_ALL_EXCEPTIONS();
80004310:	d5 53       	csrf	0x15

	/* Initialize interrupt handling. */
	INTC_init_interrupts();
80004312:	f0 1f 00 03 	mcall	8000431c <_init_startup+0x14>
	}
	#endif

  // Don't-care value for GCC.
  return 1;
}
80004316:	da 0a       	popm	pc,r12=1
80004318:	80 00       	ld.sh	r0,r0[0x0]
8000431a:	5a 00       	cp.w	r0,-32
8000431c:	80 00       	ld.sh	r0,r0[0x0]
8000431e:	22 54       	sub	r4,37

80004320 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80004320:	eb cd 40 80 	pushm	r7,lr
80004324:	18 97       	mov	r7,r12
	if( pv )
80004326:	58 0c       	cp.w	r12,0
80004328:	c0 80       	breq	80004338 <vPortFree+0x18>
	{
		vTaskSuspendAll();
8000432a:	f0 1f 00 05 	mcall	8000433c <vPortFree+0x1c>
		{
			free( pv );
8000432e:	0e 9c       	mov	r12,r7
80004330:	f0 1f 00 04 	mcall	80004340 <vPortFree+0x20>
		}
		xTaskResumeAll();
80004334:	f0 1f 00 04 	mcall	80004344 <vPortFree+0x24>
80004338:	e3 cd 80 80 	ldm	sp++,r7,pc
8000433c:	80 00       	ld.sh	r0,r0[0x0]
8000433e:	43 70       	lddsp	r0,sp[0xdc]
80004340:	80 00       	ld.sh	r0,r0[0x0]
80004342:	4b 18       	lddpc	r8,80004404 <vTaskIncrementTick+0x8>
80004344:	80 00       	ld.sh	r0,r0[0x0]
80004346:	45 14       	lddsp	r4,sp[0x144]

80004348 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
80004348:	eb cd 40 80 	pushm	r7,lr
8000434c:	18 97       	mov	r7,r12
void *pvReturn;

	vTaskSuspendAll();
8000434e:	f0 1f 00 06 	mcall	80004364 <pvPortMalloc+0x1c>
	{
		pvReturn = malloc( xWantedSize );
80004352:	0e 9c       	mov	r12,r7
80004354:	f0 1f 00 05 	mcall	80004368 <pvPortMalloc+0x20>
80004358:	18 97       	mov	r7,r12
	}
	xTaskResumeAll();
8000435a:	f0 1f 00 05 	mcall	8000436c <pvPortMalloc+0x24>
		}
	}
	#endif
	
	return pvReturn;
}
8000435e:	0e 9c       	mov	r12,r7
80004360:	e3 cd 80 80 	ldm	sp++,r7,pc
80004364:	80 00       	ld.sh	r0,r0[0x0]
80004366:	43 70       	lddsp	r0,sp[0xdc]
80004368:	80 00       	ld.sh	r0,r0[0x0]
8000436a:	4b 2c       	lddpc	r12,80004430 <vTaskIncrementTick+0x34>
8000436c:	80 00       	ld.sh	r0,r0[0x0]
8000436e:	45 14       	lddsp	r4,sp[0x144]

80004370 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
80004370:	48 38       	lddpc	r8,8000437c <vTaskSuspendAll+0xc>
80004372:	70 09       	ld.w	r9,r8[0x0]
80004374:	2f f9       	sub	r9,-1
80004376:	91 09       	st.w	r8[0x0],r9
}
80004378:	5e fc       	retal	r12
8000437a:	00 00       	add	r0,r0
8000437c:	00 00       	add	r0,r0
8000437e:	09 9c       	ld.ub	r12,r4[0x1]

80004380 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
80004380:	49 a8       	lddpc	r8,800043e8 <vTaskSwitchContext+0x68>
80004382:	70 08       	ld.w	r8,r8[0x0]
80004384:	58 08       	cp.w	r8,0
80004386:	c0 b1       	brne	8000439c <vTaskSwitchContext+0x1c>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
80004388:	49 98       	lddpc	r8,800043ec <vTaskSwitchContext+0x6c>
8000438a:	70 08       	ld.w	r8,r8[0x0]
8000438c:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004390:	49 89       	lddpc	r9,800043f0 <vTaskSwitchContext+0x70>
80004392:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80004396:	58 08       	cp.w	r8,0
80004398:	c0 60       	breq	800043a4 <vTaskSwitchContext+0x24>
8000439a:	c1 18       	rjmp	800043bc <vTaskSwitchContext+0x3c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
8000439c:	30 19       	mov	r9,1
8000439e:	49 68       	lddpc	r8,800043f4 <vTaskSwitchContext+0x74>
800043a0:	91 09       	st.w	r8[0x0],r9
800043a2:	5e fc       	retal	r12
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
800043a4:	49 28       	lddpc	r8,800043ec <vTaskSwitchContext+0x6c>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
800043a6:	49 3a       	lddpc	r10,800043f0 <vTaskSwitchContext+0x70>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
800043a8:	70 09       	ld.w	r9,r8[0x0]
800043aa:	20 19       	sub	r9,1
800043ac:	91 09       	st.w	r8[0x0],r9
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
800043ae:	70 09       	ld.w	r9,r8[0x0]
800043b0:	f2 09 00 29 	add	r9,r9,r9<<0x2
800043b4:	f4 09 03 29 	ld.w	r9,r10[r9<<0x2]
800043b8:	58 09       	cp.w	r9,0
800043ba:	cf 70       	breq	800043a8 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
800043bc:	48 c8       	lddpc	r8,800043ec <vTaskSwitchContext+0x6c>
800043be:	70 08       	ld.w	r8,r8[0x0]
800043c0:	f0 08 00 28 	add	r8,r8,r8<<0x2
800043c4:	48 b9       	lddpc	r9,800043f0 <vTaskSwitchContext+0x70>
800043c6:	f2 08 00 28 	add	r8,r9,r8<<0x2
800043ca:	70 19       	ld.w	r9,r8[0x4]
800043cc:	72 19       	ld.w	r9,r9[0x4]
800043ce:	91 19       	st.w	r8[0x4],r9
800043d0:	f0 ca ff f8 	sub	r10,r8,-8
800043d4:	14 39       	cp.w	r9,r10
800043d6:	f3 f9 00 01 	ld.weq	r9,r9[0x4]
800043da:	f1 f9 0a 01 	st.weq	r8[0x4],r9
800043de:	70 18       	ld.w	r8,r8[0x4]
800043e0:	70 39       	ld.w	r9,r8[0xc]
800043e2:	48 68       	lddpc	r8,800043f8 <vTaskSwitchContext+0x78>
800043e4:	91 09       	st.w	r8[0x0],r9
800043e6:	5e fc       	retal	r12
800043e8:	00 00       	add	r0,r0
800043ea:	09 9c       	ld.ub	r12,r4[0x1]
800043ec:	00 00       	add	r0,r0
800043ee:	09 d4       	ld.ub	r4,r4[0x5]
800043f0:	00 00       	add	r0,r0
800043f2:	08 b8       	st.h	r4++,r8
800043f4:	00 00       	add	r0,r0
800043f6:	09 bc       	ld.ub	r12,r4[0x3]
800043f8:	00 00       	add	r0,r0
800043fa:	09 6c       	ld.uh	r12,--r4

800043fc <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
800043fc:	eb cd 40 fe 	pushm	r1-r7,lr
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80004400:	4b a8       	lddpc	r8,800044e8 <vTaskIncrementTick+0xec>
80004402:	70 08       	ld.w	r8,r8[0x0]
80004404:	58 08       	cp.w	r8,0
80004406:	c6 a1       	brne	800044da <vTaskIncrementTick+0xde>
	{
		++xTickCount;
80004408:	4b 98       	lddpc	r8,800044ec <vTaskIncrementTick+0xf0>
8000440a:	70 09       	ld.w	r9,r8[0x0]
8000440c:	2f f9       	sub	r9,-1
8000440e:	91 09       	st.w	r8[0x0],r9
		if( xTickCount == ( portTickType ) 0 )
80004410:	70 08       	ld.w	r8,r8[0x0]
80004412:	58 08       	cp.w	r8,0
80004414:	c1 a1       	brne	80004448 <vTaskIncrementTick+0x4c>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
80004416:	4b 78       	lddpc	r8,800044f0 <vTaskIncrementTick+0xf4>
80004418:	70 0a       	ld.w	r10,r8[0x0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
8000441a:	4b 79       	lddpc	r9,800044f4 <vTaskIncrementTick+0xf8>
8000441c:	72 0b       	ld.w	r11,r9[0x0]
8000441e:	91 0b       	st.w	r8[0x0],r11
			pxOverflowDelayedTaskList = pxTemp;
80004420:	93 0a       	st.w	r9[0x0],r10
			xNumOfOverflows++;
80004422:	4b 69       	lddpc	r9,800044f8 <vTaskIncrementTick+0xfc>
80004424:	72 0a       	ld.w	r10,r9[0x0]
80004426:	2f fa       	sub	r10,-1
80004428:	93 0a       	st.w	r9[0x0],r10
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
8000442a:	70 08       	ld.w	r8,r8[0x0]
8000442c:	70 08       	ld.w	r8,r8[0x0]
8000442e:	58 08       	cp.w	r8,0
80004430:	c0 51       	brne	8000443a <vTaskIncrementTick+0x3e>
				/* The new current delayed list is empty.  Set 
				xNextTaskUnblockTime to the maximum possible value so it is 
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until 
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
80004432:	3f f9       	mov	r9,-1
80004434:	4b 28       	lddpc	r8,800044fc <vTaskIncrementTick+0x100>
80004436:	91 09       	st.w	r8[0x0],r9
80004438:	c0 88       	rjmp	80004448 <vTaskIncrementTick+0x4c>
			{
				/* The new current delayed list is not empty, get the value of 
				the item at the head of the delayed list.  This is the time at 
				which the task at the head of the delayed list should be removed 
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
8000443a:	4a e8       	lddpc	r8,800044f0 <vTaskIncrementTick+0xf4>
8000443c:	70 08       	ld.w	r8,r8[0x0]
8000443e:	70 38       	ld.w	r8,r8[0xc]
80004440:	70 38       	ld.w	r8,r8[0xc]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
80004442:	70 19       	ld.w	r9,r8[0x4]
80004444:	4a e8       	lddpc	r8,800044fc <vTaskIncrementTick+0x100>
80004446:	91 09       	st.w	r8[0x0],r9
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
80004448:	4a 98       	lddpc	r8,800044ec <vTaskIncrementTick+0xf0>
8000444a:	70 09       	ld.w	r9,r8[0x0]
8000444c:	4a c8       	lddpc	r8,800044fc <vTaskIncrementTick+0x100>
8000444e:	70 08       	ld.w	r8,r8[0x0]
80004450:	10 39       	cp.w	r9,r8
80004452:	c4 83       	brcs	800044e2 <vTaskIncrementTick+0xe6>
80004454:	4a 78       	lddpc	r8,800044f0 <vTaskIncrementTick+0xf4>
80004456:	70 08       	ld.w	r8,r8[0x0]
80004458:	70 08       	ld.w	r8,r8[0x0]
8000445a:	58 08       	cp.w	r8,0
8000445c:	c0 c0       	breq	80004474 <vTaskIncrementTick+0x78>
8000445e:	4a 58       	lddpc	r8,800044f0 <vTaskIncrementTick+0xf4>
80004460:	70 08       	ld.w	r8,r8[0x0]
80004462:	70 38       	ld.w	r8,r8[0xc]
80004464:	70 37       	ld.w	r7,r8[0xc]
80004466:	6e 18       	ld.w	r8,r7[0x4]
80004468:	4a 19       	lddpc	r9,800044ec <vTaskIncrementTick+0xf0>
8000446a:	72 09       	ld.w	r9,r9[0x0]
8000446c:	12 38       	cp.w	r8,r9
8000446e:	e0 88 00 14 	brls	80004496 <vTaskIncrementTick+0x9a>
80004472:	c0 e8       	rjmp	8000448e <vTaskIncrementTick+0x92>
80004474:	3f f9       	mov	r9,-1
80004476:	4a 28       	lddpc	r8,800044fc <vTaskIncrementTick+0x100>
80004478:	91 09       	st.w	r8[0x0],r9
8000447a:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8000447e:	6a 08       	ld.w	r8,r5[0x0]
80004480:	70 38       	ld.w	r8,r8[0xc]
80004482:	70 37       	ld.w	r7,r8[0xc]
80004484:	6e 18       	ld.w	r8,r7[0x4]
80004486:	64 09       	ld.w	r9,r2[0x0]
80004488:	12 38       	cp.w	r8,r9
8000448a:	e0 88 00 0b 	brls	800044a0 <vTaskIncrementTick+0xa4>
8000448e:	49 c9       	lddpc	r9,800044fc <vTaskIncrementTick+0x100>
80004490:	93 08       	st.w	r9[0x0],r8
80004492:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80004496:	49 b4       	lddpc	r4,80004500 <vTaskIncrementTick+0x104>
80004498:	08 91       	mov	r1,r4
8000449a:	49 b3       	lddpc	r3,80004504 <vTaskIncrementTick+0x108>
8000449c:	49 55       	lddpc	r5,800044f0 <vTaskIncrementTick+0xf4>
8000449e:	49 42       	lddpc	r2,800044ec <vTaskIncrementTick+0xf0>
800044a0:	ee c6 ff fc 	sub	r6,r7,-4
800044a4:	0c 9c       	mov	r12,r6
800044a6:	f0 1f 00 19 	mcall	80004508 <vTaskIncrementTick+0x10c>
800044aa:	6e a8       	ld.w	r8,r7[0x28]
800044ac:	58 08       	cp.w	r8,0
800044ae:	c0 50       	breq	800044b8 <vTaskIncrementTick+0xbc>
800044b0:	ee cc ff e8 	sub	r12,r7,-24
800044b4:	f0 1f 00 15 	mcall	80004508 <vTaskIncrementTick+0x10c>
800044b8:	6e bc       	ld.w	r12,r7[0x2c]
800044ba:	68 08       	ld.w	r8,r4[0x0]
800044bc:	10 3c       	cp.w	r12,r8
800044be:	e3 fc ba 00 	st.whi	r1[0x0],r12
800044c2:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
800044c6:	0c 9b       	mov	r11,r6
800044c8:	e6 0c 00 2c 	add	r12,r3,r12<<0x2
800044cc:	f0 1f 00 10 	mcall	8000450c <vTaskIncrementTick+0x110>
800044d0:	6a 08       	ld.w	r8,r5[0x0]
800044d2:	70 08       	ld.w	r8,r8[0x0]
800044d4:	58 08       	cp.w	r8,0
800044d6:	cd 41       	brne	8000447e <vTaskIncrementTick+0x82>
800044d8:	cc eb       	rjmp	80004474 <vTaskIncrementTick+0x78>
	}
	else
	{
		++uxMissedTicks;
800044da:	48 e8       	lddpc	r8,80004510 <vTaskIncrementTick+0x114>
800044dc:	70 09       	ld.w	r9,r8[0x0]
800044de:	2f f9       	sub	r9,-1
800044e0:	91 09       	st.w	r8[0x0],r9
800044e2:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800044e6:	00 00       	add	r0,r0
800044e8:	00 00       	add	r0,r0
800044ea:	09 9c       	ld.ub	r12,r4[0x1]
800044ec:	00 00       	add	r0,r0
800044ee:	09 98       	ld.ub	r8,r4[0x1]
800044f0:	00 00       	add	r0,r0
800044f2:	08 a4       	st.w	r4++,r4
800044f4:	00 00       	add	r0,r0
800044f6:	08 b4       	st.h	r4++,r4
800044f8:	00 00       	add	r0,r0
800044fa:	08 b0       	st.h	r4++,r0
800044fc:	00 00       	add	r0,r0
800044fe:	00 ec       	st.h	--r0,r12
80004500:	00 00       	add	r0,r0
80004502:	09 d4       	ld.ub	r4,r4[0x5]
80004504:	00 00       	add	r0,r0
80004506:	08 b8       	st.h	r4++,r8
80004508:	80 00       	ld.sh	r0,r0[0x0]
8000450a:	40 86       	lddsp	r6,sp[0x20]
8000450c:	80 00       	ld.sh	r0,r0[0x0]
8000450e:	40 36       	lddsp	r6,sp[0xc]
80004510:	00 00       	add	r0,r0
80004512:	08 9c       	mov	r12,r4

80004514 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
80004514:	d4 31       	pushm	r0-r7,lr
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
80004516:	f0 1f 00 2c 	mcall	800045c4 <xTaskResumeAll+0xb0>
	{
		--uxSchedulerSuspended;
8000451a:	4a c8       	lddpc	r8,800045c8 <xTaskResumeAll+0xb4>
8000451c:	70 09       	ld.w	r9,r8[0x0]
8000451e:	20 19       	sub	r9,1
80004520:	91 09       	st.w	r8[0x0],r9

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80004522:	70 08       	ld.w	r8,r8[0x0]
80004524:	58 08       	cp.w	r8,0
80004526:	c4 a1       	brne	800045ba <xTaskResumeAll+0xa6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
80004528:	4a 98       	lddpc	r8,800045cc <xTaskResumeAll+0xb8>
8000452a:	70 08       	ld.w	r8,r8[0x0]
8000452c:	58 08       	cp.w	r8,0
8000452e:	c4 60       	breq	800045ba <xTaskResumeAll+0xa6>
80004530:	30 04       	mov	r4,0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80004532:	4a 85       	lddpc	r5,800045d0 <xTaskResumeAll+0xbc>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
80004534:	4a 83       	lddpc	r3,800045d4 <xTaskResumeAll+0xc0>
80004536:	06 90       	mov	r0,r3
80004538:	4a 82       	lddpc	r2,800045d8 <xTaskResumeAll+0xc4>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
8000453a:	4a 91       	lddpc	r1,800045dc <xTaskResumeAll+0xc8>
8000453c:	c1 e8       	rjmp	80004578 <xTaskResumeAll+0x64>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
8000453e:	6a 38       	ld.w	r8,r5[0xc]
80004540:	70 37       	ld.w	r7,r8[0xc]
					vListRemove( &( pxTCB->xEventListItem ) );
80004542:	ee cc ff e8 	sub	r12,r7,-24
80004546:	f0 1f 00 27 	mcall	800045e0 <xTaskResumeAll+0xcc>
					vListRemove( &( pxTCB->xGenericListItem ) );
8000454a:	ee c6 ff fc 	sub	r6,r7,-4
8000454e:	0c 9c       	mov	r12,r6
80004550:	f0 1f 00 24 	mcall	800045e0 <xTaskResumeAll+0xcc>
					prvAddTaskToReadyQueue( pxTCB );
80004554:	6e bc       	ld.w	r12,r7[0x2c]
80004556:	66 08       	ld.w	r8,r3[0x0]
80004558:	10 3c       	cp.w	r12,r8
8000455a:	e1 fc ba 00 	st.whi	r0[0x0],r12
8000455e:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80004562:	0c 9b       	mov	r11,r6
80004564:	e4 0c 00 2c 	add	r12,r2,r12<<0x2
80004568:	f0 1f 00 1f 	mcall	800045e4 <xTaskResumeAll+0xd0>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
8000456c:	62 08       	ld.w	r8,r1[0x0]
8000456e:	6e b9       	ld.w	r9,r7[0x2c]
80004570:	70 b8       	ld.w	r8,r8[0x2c]
80004572:	10 39       	cp.w	r9,r8
80004574:	f9 b4 02 01 	movhs	r4,1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80004578:	6a 08       	ld.w	r8,r5[0x0]
8000457a:	58 08       	cp.w	r8,0
8000457c:	ce 11       	brne	8000453e <xTaskResumeAll+0x2a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
8000457e:	49 b8       	lddpc	r8,800045e8 <xTaskResumeAll+0xd4>
80004580:	70 08       	ld.w	r8,r8[0x0]
80004582:	58 08       	cp.w	r8,0
80004584:	c0 f0       	breq	800045a2 <xTaskResumeAll+0x8e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80004586:	49 98       	lddpc	r8,800045e8 <xTaskResumeAll+0xd4>
80004588:	70 08       	ld.w	r8,r8[0x0]
8000458a:	58 08       	cp.w	r8,0
8000458c:	c1 10       	breq	800045ae <xTaskResumeAll+0x9a>
					{
						vTaskIncrementTick();
						--uxMissedTicks;
8000458e:	49 77       	lddpc	r7,800045e8 <xTaskResumeAll+0xd4>
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
80004590:	f0 1f 00 17 	mcall	800045ec <xTaskResumeAll+0xd8>
						--uxMissedTicks;
80004594:	6e 08       	ld.w	r8,r7[0x0]
80004596:	20 18       	sub	r8,1
80004598:	8f 08       	st.w	r7[0x0],r8
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
8000459a:	6e 08       	ld.w	r8,r7[0x0]
8000459c:	58 08       	cp.w	r8,0
8000459e:	cf 91       	brne	80004590 <xTaskResumeAll+0x7c>
800045a0:	c0 78       	rjmp	800045ae <xTaskResumeAll+0x9a>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
800045a2:	58 14       	cp.w	r4,1
800045a4:	c0 50       	breq	800045ae <xTaskResumeAll+0x9a>
800045a6:	49 38       	lddpc	r8,800045f0 <xTaskResumeAll+0xdc>
800045a8:	70 08       	ld.w	r8,r8[0x0]
800045aa:	58 18       	cp.w	r8,1
800045ac:	c0 71       	brne	800045ba <xTaskResumeAll+0xa6>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
800045ae:	30 09       	mov	r9,0
800045b0:	49 08       	lddpc	r8,800045f0 <xTaskResumeAll+0xdc>
800045b2:	91 09       	st.w	r8[0x0],r9
					portYIELD_WITHIN_API();
800045b4:	d7 33       	scall
800045b6:	30 17       	mov	r7,1
800045b8:	c0 28       	rjmp	800045bc <xTaskResumeAll+0xa8>
800045ba:	30 07       	mov	r7,0
				}
			}
		}
	}
	taskEXIT_CRITICAL();
800045bc:	f0 1f 00 0e 	mcall	800045f4 <xTaskResumeAll+0xe0>

	return xAlreadyYielded;
}
800045c0:	0e 9c       	mov	r12,r7
800045c2:	d8 32       	popm	r0-r7,pc
800045c4:	80 00       	ld.sh	r0,r0[0x0]
800045c6:	41 40       	lddsp	r0,sp[0x50]
800045c8:	00 00       	add	r0,r0
800045ca:	09 9c       	ld.ub	r12,r4[0x1]
800045cc:	00 00       	add	r0,r0
800045ce:	09 b8       	ld.ub	r8,r4[0x3]
800045d0:	00 00       	add	r0,r0
800045d2:	09 70       	ld.ub	r0,--r4
800045d4:	00 00       	add	r0,r0
800045d6:	09 d4       	ld.ub	r4,r4[0x5]
800045d8:	00 00       	add	r0,r0
800045da:	08 b8       	st.h	r4++,r8
800045dc:	00 00       	add	r0,r0
800045de:	09 6c       	ld.uh	r12,--r4
800045e0:	80 00       	ld.sh	r0,r0[0x0]
800045e2:	40 86       	lddsp	r6,sp[0x20]
800045e4:	80 00       	ld.sh	r0,r0[0x0]
800045e6:	40 36       	lddsp	r6,sp[0xc]
800045e8:	00 00       	add	r0,r0
800045ea:	08 9c       	mov	r12,r4
800045ec:	80 00       	ld.sh	r0,r0[0x0]
800045ee:	43 fc       	lddsp	r12,sp[0xfc]
800045f0:	00 00       	add	r0,r0
800045f2:	09 bc       	ld.ub	r12,r4[0x3]
800045f4:	80 00       	ld.sh	r0,r0[0x0]
800045f6:	42 4c       	lddsp	r12,sp[0x90]

800045f8 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
800045f8:	eb cd 40 80 	pushm	r7,lr
800045fc:	18 97       	mov	r7,r12
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
800045fe:	49 08       	lddpc	r8,8000463c <prvAddCurrentTaskToDelayedList+0x44>
80004600:	70 08       	ld.w	r8,r8[0x0]
80004602:	91 1c       	st.w	r8[0x4],r12

	if( xTimeToWake < xTickCount )
80004604:	48 f8       	lddpc	r8,80004640 <prvAddCurrentTaskToDelayedList+0x48>
80004606:	70 08       	ld.w	r8,r8[0x0]
80004608:	10 3c       	cp.w	r12,r8
8000460a:	c0 a2       	brcc	8000461e <prvAddCurrentTaskToDelayedList+0x26>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
8000460c:	48 c8       	lddpc	r8,8000463c <prvAddCurrentTaskToDelayedList+0x44>
8000460e:	70 0b       	ld.w	r11,r8[0x0]
80004610:	48 d8       	lddpc	r8,80004644 <prvAddCurrentTaskToDelayedList+0x4c>
80004612:	70 0c       	ld.w	r12,r8[0x0]
80004614:	2f cb       	sub	r11,-4
80004616:	f0 1f 00 0d 	mcall	80004648 <prvAddCurrentTaskToDelayedList+0x50>
8000461a:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
8000461e:	48 88       	lddpc	r8,8000463c <prvAddCurrentTaskToDelayedList+0x44>
80004620:	70 0b       	ld.w	r11,r8[0x0]
80004622:	48 b8       	lddpc	r8,8000464c <prvAddCurrentTaskToDelayedList+0x54>
80004624:	70 0c       	ld.w	r12,r8[0x0]
80004626:	2f cb       	sub	r11,-4
80004628:	f0 1f 00 08 	mcall	80004648 <prvAddCurrentTaskToDelayedList+0x50>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
8000462c:	48 98       	lddpc	r8,80004650 <prvAddCurrentTaskToDelayedList+0x58>
8000462e:	70 08       	ld.w	r8,r8[0x0]
80004630:	10 37       	cp.w	r7,r8
80004632:	c0 32       	brcc	80004638 <prvAddCurrentTaskToDelayedList+0x40>
		{
			xNextTaskUnblockTime = xTimeToWake;
80004634:	48 78       	lddpc	r8,80004650 <prvAddCurrentTaskToDelayedList+0x58>
80004636:	91 07       	st.w	r8[0x0],r7
80004638:	e3 cd 80 80 	ldm	sp++,r7,pc
8000463c:	00 00       	add	r0,r0
8000463e:	09 6c       	ld.uh	r12,--r4
80004640:	00 00       	add	r0,r0
80004642:	09 98       	ld.ub	r8,r4[0x1]
80004644:	00 00       	add	r0,r0
80004646:	08 b4       	st.h	r4++,r4
80004648:	80 00       	ld.sh	r0,r0[0x0]
8000464a:	40 52       	lddsp	r2,sp[0x14]
8000464c:	00 00       	add	r0,r0
8000464e:	08 a4       	st.w	r4++,r4
80004650:	00 00       	add	r0,r0
80004652:	00 ec       	st.h	--r0,r12

80004654 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
80004654:	eb cd 40 c0 	pushm	r6-r7,lr
80004658:	18 97       	mov	r7,r12
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
8000465a:	58 0c       	cp.w	r12,0
8000465c:	c1 10       	breq	8000467e <vTaskDelay+0x2a>
		{
			vTaskSuspendAll();
8000465e:	f0 1f 00 0a 	mcall	80004684 <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80004662:	48 a8       	lddpc	r8,80004688 <vTaskDelay+0x34>
80004664:	70 06       	ld.w	r6,r8[0x0]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80004666:	48 a8       	lddpc	r8,8000468c <vTaskDelay+0x38>
80004668:	70 0c       	ld.w	r12,r8[0x0]
8000466a:	2f cc       	sub	r12,-4
8000466c:	f0 1f 00 09 	mcall	80004690 <vTaskDelay+0x3c>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80004670:	ee 06 00 0c 	add	r12,r7,r6
80004674:	f0 1f 00 08 	mcall	80004694 <vTaskDelay+0x40>
			}
			xAlreadyYielded = xTaskResumeAll();
80004678:	f0 1f 00 08 	mcall	80004698 <vTaskDelay+0x44>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
8000467c:	c0 21       	brne	80004680 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
8000467e:	d7 33       	scall
80004680:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004684:	80 00       	ld.sh	r0,r0[0x0]
80004686:	43 70       	lddsp	r0,sp[0xdc]
80004688:	00 00       	add	r0,r0
8000468a:	09 98       	ld.ub	r8,r4[0x1]
8000468c:	00 00       	add	r0,r0
8000468e:	09 6c       	ld.uh	r12,--r4
80004690:	80 00       	ld.sh	r0,r0[0x0]
80004692:	40 86       	lddsp	r6,sp[0x20]
80004694:	80 00       	ld.sh	r0,r0[0x0]
80004696:	45 f8       	lddsp	r8,sp[0x17c]
80004698:	80 00       	ld.sh	r0,r0[0x0]
8000469a:	45 14       	lddsp	r4,sp[0x144]

8000469c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
8000469c:	eb cd 40 f8 	pushm	r3-r7,lr
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
800046a0:	49 57       	lddpc	r7,800046f4 <prvIdleTask+0x58>
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
800046a2:	49 64       	lddpc	r4,800046f8 <prvIdleTask+0x5c>

				taskENTER_CRITICAL();
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					--uxCurrentNumberOfTasks;
800046a4:	49 63       	lddpc	r3,800046fc <prvIdleTask+0x60>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
800046a6:	49 75       	lddpc	r5,80004700 <prvIdleTask+0x64>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
800046a8:	6e 08       	ld.w	r8,r7[0x0]
800046aa:	58 08       	cp.w	r8,0
800046ac:	c1 e0       	breq	800046e8 <prvIdleTask+0x4c>
		{
			vTaskSuspendAll();
800046ae:	f0 1f 00 16 	mcall	80004704 <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
800046b2:	68 06       	ld.w	r6,r4[0x0]
			xTaskResumeAll();
800046b4:	f0 1f 00 15 	mcall	80004708 <prvIdleTask+0x6c>

			if( xListIsEmpty == pdFALSE )
800046b8:	58 06       	cp.w	r6,0
800046ba:	c1 70       	breq	800046e8 <prvIdleTask+0x4c>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
800046bc:	f0 1f 00 14 	mcall	8000470c <prvIdleTask+0x70>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
800046c0:	68 38       	ld.w	r8,r4[0xc]
800046c2:	70 36       	ld.w	r6,r8[0xc]
					vListRemove( &( pxTCB->xGenericListItem ) );
800046c4:	ec cc ff fc 	sub	r12,r6,-4
800046c8:	f0 1f 00 12 	mcall	80004710 <prvIdleTask+0x74>
					--uxCurrentNumberOfTasks;
800046cc:	66 08       	ld.w	r8,r3[0x0]
800046ce:	20 18       	sub	r8,1
800046d0:	87 08       	st.w	r3[0x0],r8
					--uxTasksDeleted;
800046d2:	6e 08       	ld.w	r8,r7[0x0]
800046d4:	20 18       	sub	r8,1
800046d6:	8f 08       	st.w	r7[0x0],r8
				}
				taskEXIT_CRITICAL();
800046d8:	f0 1f 00 0f 	mcall	80004714 <prvIdleTask+0x78>

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
800046dc:	6c cc       	ld.w	r12,r6[0x30]
800046de:	f0 1f 00 0f 	mcall	80004718 <prvIdleTask+0x7c>
		vPortFree( pxTCB );
800046e2:	0c 9c       	mov	r12,r6
800046e4:	f0 1f 00 0d 	mcall	80004718 <prvIdleTask+0x7c>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
800046e8:	6a 08       	ld.w	r8,r5[0x0]
800046ea:	58 18       	cp.w	r8,1
800046ec:	fe 98 ff de 	brls	800046a8 <prvIdleTask+0xc>
			{
				taskYIELD();
800046f0:	d7 33       	scall
800046f2:	cd bb       	rjmp	800046a8 <prvIdleTask+0xc>
800046f4:	00 00       	add	r0,r0
800046f6:	08 ac       	st.w	r4++,r12
800046f8:	00 00       	add	r0,r0
800046fa:	09 58       	ld.sh	r8,--r4
800046fc:	00 00       	add	r0,r0
800046fe:	09 b8       	ld.ub	r8,r4[0x3]
80004700:	00 00       	add	r0,r0
80004702:	08 b8       	st.h	r4++,r8
80004704:	80 00       	ld.sh	r0,r0[0x0]
80004706:	43 70       	lddsp	r0,sp[0xdc]
80004708:	80 00       	ld.sh	r0,r0[0x0]
8000470a:	45 14       	lddsp	r4,sp[0x144]
8000470c:	80 00       	ld.sh	r0,r0[0x0]
8000470e:	41 40       	lddsp	r0,sp[0x50]
80004710:	80 00       	ld.sh	r0,r0[0x0]
80004712:	40 86       	lddsp	r6,sp[0x20]
80004714:	80 00       	ld.sh	r0,r0[0x0]
80004716:	42 4c       	lddsp	r12,sp[0x90]
80004718:	80 00       	ld.sh	r0,r0[0x0]
8000471a:	43 20       	lddsp	r0,sp[0xc8]

8000471c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
8000471c:	d4 31       	pushm	r0-r7,lr
8000471e:	20 1d       	sub	sp,4
80004720:	fa c4 ff d8 	sub	r4,sp,-40
80004724:	50 0c       	stdsp	sp[0x0],r12
80004726:	16 91       	mov	r1,r11
80004728:	14 97       	mov	r7,r10
8000472a:	12 90       	mov	r0,r9
8000472c:	10 93       	mov	r3,r8
8000472e:	68 02       	ld.w	r2,r4[0x0]
80004730:	68 16       	ld.w	r6,r4[0x4]
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
80004732:	34 4c       	mov	r12,68
80004734:	f0 1f 00 5b 	mcall	800048a0 <xTaskGenericCreate+0x184>
80004738:	18 95       	mov	r5,r12

	if( pxNewTCB != NULL )
8000473a:	c0 31       	brne	80004740 <xTaskGenericCreate+0x24>
8000473c:	3f fc       	mov	r12,-1
8000473e:	ca d8       	rjmp	80004898 <xTaskGenericCreate+0x17c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
80004740:	58 06       	cp.w	r6,0
80004742:	e0 81 00 ad 	brne	8000489c <xTaskGenericCreate+0x180>
80004746:	0e 9c       	mov	r12,r7
80004748:	5c 7c       	castu.h	r12
8000474a:	a3 6c       	lsl	r12,0x2
8000474c:	f0 1f 00 55 	mcall	800048a0 <xTaskGenericCreate+0x184>
80004750:	18 96       	mov	r6,r12
80004752:	8b cc       	st.w	r5[0x30],r12

		if( pxNewTCB->pxStack == NULL )
80004754:	c0 61       	brne	80004760 <xTaskGenericCreate+0x44>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
80004756:	0a 9c       	mov	r12,r5
80004758:	f0 1f 00 53 	mcall	800048a4 <xTaskGenericCreate+0x188>
8000475c:	3f fc       	mov	r12,-1
8000475e:	c9 d8       	rjmp	80004898 <xTaskGenericCreate+0x17c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
80004760:	5c 77       	castu.h	r7
80004762:	ee 0a 15 02 	lsl	r10,r7,0x2
80004766:	e0 6b 00 a5 	mov	r11,165
8000476a:	0c 9c       	mov	r12,r6
8000476c:	f0 1f 00 4f 	mcall	800048a8 <xTaskGenericCreate+0x18c>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
80004770:	ee c6 00 01 	sub	r6,r7,1
80004774:	6a c8       	ld.w	r8,r5[0x30]
80004776:	f0 06 00 26 	add	r6,r8,r6<<0x2
8000477a:	e0 16 ff fc 	andl	r6,0xfffc
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
8000477e:	31 0a       	mov	r10,16
80004780:	02 9b       	mov	r11,r1
80004782:	ea cc ff cc 	sub	r12,r5,-52
80004786:	f0 1f 00 4a 	mcall	800048ac <xTaskGenericCreate+0x190>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
8000478a:	30 08       	mov	r8,0
8000478c:	eb 68 00 43 	st.b	r5[67],r8
80004790:	58 73       	cp.w	r3,7
80004792:	e6 07 17 80 	movls	r7,r3
80004796:	f9 b7 0b 07 	movhi	r7,7
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
8000479a:	8b b7       	st.w	r5[0x2c],r7
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
8000479c:	ea c4 ff fc 	sub	r4,r5,-4
800047a0:	08 9c       	mov	r12,r4
800047a2:	f0 1f 00 44 	mcall	800048b0 <xTaskGenericCreate+0x194>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
800047a6:	ea cc ff e8 	sub	r12,r5,-24
800047aa:	f0 1f 00 42 	mcall	800048b0 <xTaskGenericCreate+0x194>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
800047ae:	8b 45       	st.w	r5[0x10],r5

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
800047b0:	ee 07 11 08 	rsub	r7,r7,8
800047b4:	8b 67       	st.w	r5[0x18],r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
800047b6:	8b 95       	st.w	r5[0x24],r5
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
800047b8:	00 9a       	mov	r10,r0
800047ba:	40 0b       	lddsp	r11,sp[0x0]
800047bc:	0c 9c       	mov	r12,r6
800047be:	f0 1f 00 3e 	mcall	800048b4 <xTaskGenericCreate+0x198>
800047c2:	8b 0c       	st.w	r5[0x0],r12
		if( ( void * ) pxCreatedTask != NULL )
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
800047c4:	58 02       	cp.w	r2,0
800047c6:	e5 f5 1a 00 	st.wne	r2[0x0],r5
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
800047ca:	f0 1f 00 3c 	mcall	800048b8 <xTaskGenericCreate+0x19c>
		{
			uxCurrentNumberOfTasks++;
800047ce:	4b c8       	lddpc	r8,800048bc <xTaskGenericCreate+0x1a0>
800047d0:	70 09       	ld.w	r9,r8[0x0]
800047d2:	2f f9       	sub	r9,-1
800047d4:	91 09       	st.w	r8[0x0],r9
			if( pxCurrentTCB == NULL )
800047d6:	4b b8       	lddpc	r8,800048c0 <xTaskGenericCreate+0x1a4>
800047d8:	70 08       	ld.w	r8,r8[0x0]
800047da:	58 08       	cp.w	r8,0
800047dc:	c2 61       	brne	80004828 <xTaskGenericCreate+0x10c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
800047de:	4b 98       	lddpc	r8,800048c0 <xTaskGenericCreate+0x1a4>
800047e0:	91 05       	st.w	r8[0x0],r5

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
800047e2:	4b 78       	lddpc	r8,800048bc <xTaskGenericCreate+0x1a0>
800047e4:	70 08       	ld.w	r8,r8[0x0]
800047e6:	58 18       	cp.w	r8,1
800047e8:	c2 b1       	brne	8000483e <xTaskGenericCreate+0x122>
800047ea:	4b 77       	lddpc	r7,800048c4 <xTaskGenericCreate+0x1a8>

/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
800047ec:	ee c6 ff 60 	sub	r6,r7,-160
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
800047f0:	0e 9c       	mov	r12,r7
800047f2:	f0 1f 00 36 	mcall	800048c8 <xTaskGenericCreate+0x1ac>
800047f6:	2e c7       	sub	r7,-20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
800047f8:	0c 37       	cp.w	r7,r6
800047fa:	cf b1       	brne	800047f0 <xTaskGenericCreate+0xd4>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
800047fc:	4b 47       	lddpc	r7,800048cc <xTaskGenericCreate+0x1b0>
800047fe:	0e 9c       	mov	r12,r7
80004800:	f0 1f 00 32 	mcall	800048c8 <xTaskGenericCreate+0x1ac>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
80004804:	4b 36       	lddpc	r6,800048d0 <xTaskGenericCreate+0x1b4>
80004806:	0c 9c       	mov	r12,r6
80004808:	f0 1f 00 30 	mcall	800048c8 <xTaskGenericCreate+0x1ac>
	vListInitialise( ( xList * ) &xPendingReadyList );
8000480c:	4b 2c       	lddpc	r12,800048d4 <xTaskGenericCreate+0x1b8>
8000480e:	f0 1f 00 2f 	mcall	800048c8 <xTaskGenericCreate+0x1ac>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
80004812:	4b 2c       	lddpc	r12,800048d8 <xTaskGenericCreate+0x1bc>
80004814:	f0 1f 00 2d 	mcall	800048c8 <xTaskGenericCreate+0x1ac>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
80004818:	4b 1c       	lddpc	r12,800048dc <xTaskGenericCreate+0x1c0>
8000481a:	f0 1f 00 2c 	mcall	800048c8 <xTaskGenericCreate+0x1ac>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
8000481e:	4b 18       	lddpc	r8,800048e0 <xTaskGenericCreate+0x1c4>
80004820:	91 07       	st.w	r8[0x0],r7
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80004822:	4b 18       	lddpc	r8,800048e4 <xTaskGenericCreate+0x1c8>
80004824:	91 06       	st.w	r8[0x0],r6
80004826:	c0 c8       	rjmp	8000483e <xTaskGenericCreate+0x122>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80004828:	4b 08       	lddpc	r8,800048e8 <xTaskGenericCreate+0x1cc>
8000482a:	70 08       	ld.w	r8,r8[0x0]
8000482c:	58 08       	cp.w	r8,0
8000482e:	c0 81       	brne	8000483e <xTaskGenericCreate+0x122>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80004830:	4a 48       	lddpc	r8,800048c0 <xTaskGenericCreate+0x1a4>
80004832:	70 08       	ld.w	r8,r8[0x0]
80004834:	70 b8       	ld.w	r8,r8[0x2c]
80004836:	10 33       	cp.w	r3,r8
80004838:	c0 33       	brcs	8000483e <xTaskGenericCreate+0x122>
					{
						pxCurrentTCB = pxNewTCB;
8000483a:	4a 28       	lddpc	r8,800048c0 <xTaskGenericCreate+0x1a4>
8000483c:	91 05       	st.w	r8[0x0],r5
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
8000483e:	6a b8       	ld.w	r8,r5[0x2c]
80004840:	4a b9       	lddpc	r9,800048ec <xTaskGenericCreate+0x1d0>
80004842:	72 09       	ld.w	r9,r9[0x0]
80004844:	12 38       	cp.w	r8,r9
80004846:	e0 88 00 04 	brls	8000484e <xTaskGenericCreate+0x132>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
8000484a:	4a 99       	lddpc	r9,800048ec <xTaskGenericCreate+0x1d0>
8000484c:	93 08       	st.w	r9[0x0],r8
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
8000484e:	4a 98       	lddpc	r8,800048f0 <xTaskGenericCreate+0x1d4>
80004850:	70 09       	ld.w	r9,r8[0x0]
80004852:	2f f9       	sub	r9,-1
80004854:	91 09       	st.w	r8[0x0],r9

			prvAddTaskToReadyQueue( pxNewTCB );
80004856:	6a b8       	ld.w	r8,r5[0x2c]
80004858:	4a 79       	lddpc	r9,800048f4 <xTaskGenericCreate+0x1d8>
8000485a:	72 09       	ld.w	r9,r9[0x0]
8000485c:	12 38       	cp.w	r8,r9
8000485e:	e0 88 00 04 	brls	80004866 <xTaskGenericCreate+0x14a>
80004862:	4a 59       	lddpc	r9,800048f4 <xTaskGenericCreate+0x1d8>
80004864:	93 08       	st.w	r9[0x0],r8
80004866:	6a bc       	ld.w	r12,r5[0x2c]
80004868:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
8000486c:	08 9b       	mov	r11,r4
8000486e:	49 68       	lddpc	r8,800048c4 <xTaskGenericCreate+0x1a8>
80004870:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
80004874:	f0 1f 00 21 	mcall	800048f8 <xTaskGenericCreate+0x1dc>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
80004878:	f0 1f 00 21 	mcall	800048fc <xTaskGenericCreate+0x1e0>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
8000487c:	49 b8       	lddpc	r8,800048e8 <xTaskGenericCreate+0x1cc>
8000487e:	70 08       	ld.w	r8,r8[0x0]
80004880:	58 08       	cp.w	r8,0
80004882:	c0 a0       	breq	80004896 <xTaskGenericCreate+0x17a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
80004884:	48 f8       	lddpc	r8,800048c0 <xTaskGenericCreate+0x1a4>
80004886:	70 08       	ld.w	r8,r8[0x0]
80004888:	70 b8       	ld.w	r8,r8[0x2c]
8000488a:	10 33       	cp.w	r3,r8
8000488c:	e0 88 00 05 	brls	80004896 <xTaskGenericCreate+0x17a>
			{
				portYIELD_WITHIN_API();
80004890:	d7 33       	scall
80004892:	30 1c       	mov	r12,1
80004894:	c0 28       	rjmp	80004898 <xTaskGenericCreate+0x17c>
80004896:	30 1c       	mov	r12,1
			}
		}
	}

	return xReturn;
}
80004898:	2f fd       	sub	sp,-4
8000489a:	d8 32       	popm	r0-r7,pc
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
8000489c:	99 c6       	st.w	r12[0x30],r6
8000489e:	c6 1b       	rjmp	80004760 <xTaskGenericCreate+0x44>
800048a0:	80 00       	ld.sh	r0,r0[0x0]
800048a2:	43 48       	lddsp	r8,sp[0xd0]
800048a4:	80 00       	ld.sh	r0,r0[0x0]
800048a6:	43 20       	lddsp	r0,sp[0xc8]
800048a8:	80 00       	ld.sh	r0,r0[0x0]
800048aa:	4f 70       	lddpc	r0,80004a84 <main+0x28>
800048ac:	80 00       	ld.sh	r0,r0[0x0]
800048ae:	50 c0       	stdsp	sp[0x30],r0
800048b0:	80 00       	ld.sh	r0,r0[0x0]
800048b2:	40 30       	lddsp	r0,sp[0xc]
800048b4:	80 00       	ld.sh	r0,r0[0x0]
800048b6:	40 ac       	lddsp	r12,sp[0x28]
800048b8:	80 00       	ld.sh	r0,r0[0x0]
800048ba:	41 40       	lddsp	r0,sp[0x50]
800048bc:	00 00       	add	r0,r0
800048be:	09 b8       	ld.ub	r8,r4[0x3]
800048c0:	00 00       	add	r0,r0
800048c2:	09 6c       	ld.uh	r12,--r4
800048c4:	00 00       	add	r0,r0
800048c6:	08 b8       	st.h	r4++,r8
800048c8:	80 00       	ld.sh	r0,r0[0x0]
800048ca:	40 1c       	lddsp	r12,sp[0x4]
800048cc:	00 00       	add	r0,r0
800048ce:	09 84       	ld.ub	r4,r4[0x0]
800048d0:	00 00       	add	r0,r0
800048d2:	09 a0       	ld.ub	r0,r4[0x2]
800048d4:	00 00       	add	r0,r0
800048d6:	09 70       	ld.ub	r0,--r4
800048d8:	00 00       	add	r0,r0
800048da:	09 58       	ld.sh	r8,--r4
800048dc:	00 00       	add	r0,r0
800048de:	09 c0       	ld.ub	r0,r4[0x4]
800048e0:	00 00       	add	r0,r0
800048e2:	08 a4       	st.w	r4++,r4
800048e4:	00 00       	add	r0,r0
800048e6:	08 b4       	st.h	r4++,r4
800048e8:	00 00       	add	r0,r0
800048ea:	08 a8       	st.w	r4++,r8
800048ec:	00 00       	add	r0,r0
800048ee:	08 a0       	st.w	r4++,r0
800048f0:	00 00       	add	r0,r0
800048f2:	09 b4       	ld.ub	r4,r4[0x3]
800048f4:	00 00       	add	r0,r0
800048f6:	09 d4       	ld.ub	r4,r4[0x5]
800048f8:	80 00       	ld.sh	r0,r0[0x0]
800048fa:	40 36       	lddsp	r6,sp[0xc]
800048fc:	80 00       	ld.sh	r0,r0[0x0]
800048fe:	42 4c       	lddsp	r12,sp[0x90]

80004900 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
80004900:	d4 01       	pushm	lr
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
80004902:	30 09       	mov	r9,0
80004904:	1a d9       	st.w	--sp,r9
80004906:	1a d9       	st.w	--sp,r9
80004908:	1a d9       	st.w	--sp,r9
8000490a:	12 98       	mov	r8,r9
8000490c:	e0 6a 01 00 	mov	r10,256
80004910:	48 9b       	lddpc	r11,80004934 <vTaskStartScheduler+0x34>
80004912:	48 ac       	lddpc	r12,80004938 <vTaskStartScheduler+0x38>
80004914:	f0 1f 00 0a 	mcall	8000493c <vTaskStartScheduler+0x3c>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
80004918:	2f dd       	sub	sp,-12
8000491a:	58 1c       	cp.w	r12,1
8000491c:	c0 a1       	brne	80004930 <vTaskStartScheduler+0x30>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
8000491e:	d3 03       	ssrf	0x10

		xSchedulerRunning = pdTRUE;
80004920:	30 19       	mov	r9,1
80004922:	48 88       	lddpc	r8,80004940 <vTaskStartScheduler+0x40>
80004924:	91 09       	st.w	r8[0x0],r9
		xTickCount = ( portTickType ) 0;
80004926:	30 09       	mov	r9,0
80004928:	48 78       	lddpc	r8,80004944 <vTaskStartScheduler+0x44>
8000492a:	91 09       	st.w	r8[0x0],r9
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
8000492c:	f0 1f 00 07 	mcall	80004948 <vTaskStartScheduler+0x48>
80004930:	d8 02       	popm	pc
80004932:	00 00       	add	r0,r0
80004934:	80 00       	ld.sh	r0,r0[0x0]
80004936:	5d 08       	ror	r8
80004938:	80 00       	ld.sh	r0,r0[0x0]
8000493a:	46 9c       	lddsp	r12,sp[0x1a4]
8000493c:	80 00       	ld.sh	r0,r0[0x0]
8000493e:	47 1c       	lddsp	r12,sp[0x1c4]
80004940:	00 00       	add	r0,r0
80004942:	08 a8       	st.w	r4++,r8
80004944:	00 00       	add	r0,r0
80004946:	09 98       	ld.ub	r8,r4[0x1]
80004948:	80 00       	ld.sh	r0,r0[0x0]
8000494a:	41 50       	lddsp	r0,sp[0x54]

8000494c <vtaskC>:
		gpio_set_gpio_pin(RESPONSE_B);
	}
	
}

static void vtaskC(void *pvParameters){
8000494c:	d4 21       	pushm	r4-r7,lr
	while(1){
		while (gpio_get_pin_value(TEST_C))vTaskDelay(5/portTICK_RATE_MS);
8000494e:	31 b7       	mov	r7,27
80004950:	30 56       	mov	r6,5
		
		gpio_clr_gpio_pin(RESPONSE_C);
80004952:	32 05       	mov	r5,32
		vTaskDelay(1/portTICK_RATE_MS);
80004954:	30 14       	mov	r4,1
80004956:	c0 48       	rjmp	8000495e <vtaskC+0x12>
	
}

static void vtaskC(void *pvParameters){
	while(1){
		while (gpio_get_pin_value(TEST_C))vTaskDelay(5/portTICK_RATE_MS);
80004958:	0c 9c       	mov	r12,r6
8000495a:	f0 1f 00 09 	mcall	8000497c <vtaskC+0x30>
8000495e:	0e 9c       	mov	r12,r7
80004960:	f0 1f 00 08 	mcall	80004980 <vtaskC+0x34>
80004964:	cf a1       	brne	80004958 <vtaskC+0xc>
		
		gpio_clr_gpio_pin(RESPONSE_C);
80004966:	0a 9c       	mov	r12,r5
80004968:	f0 1f 00 07 	mcall	80004984 <vtaskC+0x38>
		vTaskDelay(1/portTICK_RATE_MS);
8000496c:	08 9c       	mov	r12,r4
8000496e:	f0 1f 00 04 	mcall	8000497c <vtaskC+0x30>
		gpio_set_gpio_pin(RESPONSE_C);
80004972:	0a 9c       	mov	r12,r5
80004974:	f0 1f 00 05 	mcall	80004988 <vtaskC+0x3c>
80004978:	cf 3b       	rjmp	8000495e <vtaskC+0x12>
8000497a:	00 00       	add	r0,r0
8000497c:	80 00       	ld.sh	r0,r0[0x0]
8000497e:	46 54       	lddsp	r4,sp[0x194]
80004980:	80 00       	ld.sh	r0,r0[0x0]
80004982:	21 d4       	sub	r4,29
80004984:	80 00       	ld.sh	r0,r0[0x0]
80004986:	22 06       	sub	r6,32
80004988:	80 00       	ld.sh	r0,r0[0x0]
8000498a:	21 ea       	sub	r10,30

8000498c <vtaskB>:

	}
	
}

static void vtaskB(void *pvParameters){
8000498c:	d4 21       	pushm	r4-r7,lr
	while(1){
		while (gpio_get_pin_value(TEST_B))vTaskDelay(5/portTICK_RATE_MS);
8000498e:	31 d7       	mov	r7,29
80004990:	30 56       	mov	r6,5
		
		gpio_clr_gpio_pin(RESPONSE_B);
80004992:	31 c5       	mov	r5,28
		vTaskDelay(1/portTICK_RATE_MS);
80004994:	30 14       	mov	r4,1
80004996:	c0 48       	rjmp	8000499e <vtaskB+0x12>
	
}

static void vtaskB(void *pvParameters){
	while(1){
		while (gpio_get_pin_value(TEST_B))vTaskDelay(5/portTICK_RATE_MS);
80004998:	0c 9c       	mov	r12,r6
8000499a:	f0 1f 00 09 	mcall	800049bc <vtaskB+0x30>
8000499e:	0e 9c       	mov	r12,r7
800049a0:	f0 1f 00 08 	mcall	800049c0 <vtaskB+0x34>
800049a4:	cf a1       	brne	80004998 <vtaskB+0xc>
		
		gpio_clr_gpio_pin(RESPONSE_B);
800049a6:	0a 9c       	mov	r12,r5
800049a8:	f0 1f 00 07 	mcall	800049c4 <vtaskB+0x38>
		vTaskDelay(1/portTICK_RATE_MS);
800049ac:	08 9c       	mov	r12,r4
800049ae:	f0 1f 00 04 	mcall	800049bc <vtaskB+0x30>
		gpio_set_gpio_pin(RESPONSE_B);
800049b2:	0a 9c       	mov	r12,r5
800049b4:	f0 1f 00 05 	mcall	800049c8 <vtaskB+0x3c>
800049b8:	cf 3b       	rjmp	8000499e <vtaskB+0x12>
800049ba:	00 00       	add	r0,r0
800049bc:	80 00       	ld.sh	r0,r0[0x0]
800049be:	46 54       	lddsp	r4,sp[0x194]
800049c0:	80 00       	ld.sh	r0,r0[0x0]
800049c2:	21 d4       	sub	r4,29
800049c4:	80 00       	ld.sh	r0,r0[0x0]
800049c6:	22 06       	sub	r6,32
800049c8:	80 00       	ld.sh	r0,r0[0x0]
800049ca:	21 ea       	sub	r10,30

800049cc <vtaskA>:
			gpio_toggle_pin(LED1_GPIO);
			vTaskDelay(500/portTICK_RATE_MS);
		}
}*/

static void vtaskA(void *pvParameters){
800049cc:	d4 21       	pushm	r4-r7,lr
	while(1){
		while (gpio_get_pin_value(TEST_A))vTaskDelay(5/portTICK_RATE_MS);
800049ce:	31 f7       	mov	r7,31
800049d0:	30 56       	mov	r6,5
	
		gpio_clr_gpio_pin(RESPONSE_A);
800049d2:	31 e5       	mov	r5,30
		vTaskDelay(1/portTICK_RATE_MS);
800049d4:	30 14       	mov	r4,1
800049d6:	c0 48       	rjmp	800049de <vtaskA+0x12>
		}
}*/

static void vtaskA(void *pvParameters){
	while(1){
		while (gpio_get_pin_value(TEST_A))vTaskDelay(5/portTICK_RATE_MS);
800049d8:	0c 9c       	mov	r12,r6
800049da:	f0 1f 00 09 	mcall	800049fc <vtaskA+0x30>
800049de:	0e 9c       	mov	r12,r7
800049e0:	f0 1f 00 08 	mcall	80004a00 <vtaskA+0x34>
800049e4:	cf a1       	brne	800049d8 <vtaskA+0xc>
	
		gpio_clr_gpio_pin(RESPONSE_A);
800049e6:	0a 9c       	mov	r12,r5
800049e8:	f0 1f 00 07 	mcall	80004a04 <vtaskA+0x38>
		vTaskDelay(1/portTICK_RATE_MS);
800049ec:	08 9c       	mov	r12,r4
800049ee:	f0 1f 00 04 	mcall	800049fc <vtaskA+0x30>
		gpio_set_gpio_pin(RESPONSE_A);
800049f2:	0a 9c       	mov	r12,r5
800049f4:	f0 1f 00 05 	mcall	80004a08 <vtaskA+0x3c>
800049f8:	cf 3b       	rjmp	800049de <vtaskA+0x12>
800049fa:	00 00       	add	r0,r0
800049fc:	80 00       	ld.sh	r0,r0[0x0]
800049fe:	46 54       	lddsp	r4,sp[0x194]
80004a00:	80 00       	ld.sh	r0,r0[0x0]
80004a02:	21 d4       	sub	r4,29
80004a04:	80 00       	ld.sh	r0,r0[0x0]
80004a06:	22 06       	sub	r6,32
80004a08:	80 00       	ld.sh	r0,r0[0x0]
80004a0a:	21 ea       	sub	r10,30

80004a0c <init>:
#define RESPONSE_B AVR32_PIN_PA28
#define TEST_C AVR32_PIN_PA27
#define RESPONSE_C AVR32_PIN_PB00

void init()
{
80004a0c:	eb cd 40 80 	pushm	r7,lr
	// board init
	board_init();
80004a10:	f0 1f 00 0e 	mcall	80004a48 <init+0x3c>
		.dfll_f       = EXAMPLE_TARGET_DFLL_FREQ_HZ,
		.pextra_params = &gc_dfllif_ref_opt
	};
	pcl_configure_clocks(&pcl_dfll_freq_param);
#else
	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
80004a14:	30 3a       	mov	r10,3
80004a16:	e0 6b 1b 00 	mov	r11,6912
80004a1a:	ea 1b 00 b7 	orh	r11,0xb7
80004a1e:	30 0c       	mov	r12,0
80004a20:	f0 1f 00 0b 	mcall	80004a4c <init+0x40>
#endif	
	
	// stdio init
	stdio_usb_init(&CONFIG_USART_IF);
80004a24:	fe 7c 1c 00 	mov	r12,-58368
80004a28:	f0 1f 00 0a 	mcall	80004a50 <init+0x44>

	// Specify that stdout and stdin should not be buffered.

#if defined(__GNUC__) && defined(__AVR32__)
	setbuf(stdout, NULL);
80004a2c:	48 a7       	lddpc	r7,80004a54 <init+0x48>
80004a2e:	6e 08       	ld.w	r8,r7[0x0]
80004a30:	30 0b       	mov	r11,0
80004a32:	70 1c       	ld.w	r12,r8[0x4]
80004a34:	f0 1f 00 09 	mcall	80004a58 <init+0x4c>
	setbuf(stdin,  NULL);
80004a38:	6e 08       	ld.w	r8,r7[0x0]
80004a3a:	30 0b       	mov	r11,0
80004a3c:	70 0c       	ld.w	r12,r8[0x0]
80004a3e:	f0 1f 00 07 	mcall	80004a58 <init+0x4c>
#endif
}
80004a42:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a46:	00 00       	add	r0,r0
80004a48:	80 00       	ld.sh	r0,r0[0x0]
80004a4a:	20 ec       	sub	r12,14
80004a4c:	80 00       	ld.sh	r0,r0[0x0]
80004a4e:	23 98       	sub	r8,57
80004a50:	80 00       	ld.sh	r0,r0[0x0]
80004a52:	3f 44       	mov	r4,-12
80004a54:	00 00       	add	r0,r0
80004a56:	01 e0       	ld.ub	r0,r0[0x6]
80004a58:	80 00       	ld.sh	r0,r0[0x0]
80004a5a:	4f a0       	lddpc	r0,80004c40 <_malloc_r+0x104>

80004a5c <main>:

/*********************************************************************
Functions
*********************************************************************/
int main()
{
80004a5c:	eb cd 40 c0 	pushm	r6-r7,lr
	// initialize
	init();
80004a60:	f0 1f 00 1a 	mcall	80004ac8 <main+0x6c>
	
	// start code from here
	gpio_set_gpio_pin(RESPONSE_A);
80004a64:	31 ec       	mov	r12,30
80004a66:	f0 1f 00 1a 	mcall	80004acc <main+0x70>
	gpio_set_gpio_pin(RESPONSE_B);
80004a6a:	31 cc       	mov	r12,28
80004a6c:	f0 1f 00 18 	mcall	80004acc <main+0x70>
	gpio_set_gpio_pin(RESPONSE_C);
80004a70:	32 0c       	mov	r12,32
80004a72:	f0 1f 00 17 	mcall	80004acc <main+0x70>
	// start basic task
	xTaskCreate( vtaskA, (signed char * ) "BASIC", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
80004a76:	49 76       	lddpc	r6,80004ad0 <main+0x74>
80004a78:	30 07       	mov	r7,0
80004a7a:	1a d7       	st.w	--sp,r7
80004a7c:	1a d7       	st.w	--sp,r7
80004a7e:	1a d7       	st.w	--sp,r7
80004a80:	30 28       	mov	r8,2
80004a82:	0e 99       	mov	r9,r7
80004a84:	e0 6a 01 00 	mov	r10,256
80004a88:	0c 9b       	mov	r11,r6
80004a8a:	49 3c       	lddpc	r12,80004ad4 <main+0x78>
80004a8c:	f0 1f 00 13 	mcall	80004ad8 <main+0x7c>
	xTaskCreate( vtaskB, (signed char * ) "BASIC", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
80004a90:	1a d7       	st.w	--sp,r7
80004a92:	1a d7       	st.w	--sp,r7
80004a94:	1a d7       	st.w	--sp,r7
80004a96:	30 28       	mov	r8,2
80004a98:	0e 99       	mov	r9,r7
80004a9a:	e0 6a 01 00 	mov	r10,256
80004a9e:	0c 9b       	mov	r11,r6
80004aa0:	48 fc       	lddpc	r12,80004adc <main+0x80>
80004aa2:	f0 1f 00 0e 	mcall	80004ad8 <main+0x7c>
	xTaskCreate( vtaskC, (signed char * ) "BASIC", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
80004aa6:	1a d7       	st.w	--sp,r7
80004aa8:	1a d7       	st.w	--sp,r7
80004aaa:	1a d7       	st.w	--sp,r7
80004aac:	30 28       	mov	r8,2
80004aae:	0e 99       	mov	r9,r7
80004ab0:	e0 6a 01 00 	mov	r10,256
80004ab4:	0c 9b       	mov	r11,r6
80004ab6:	48 bc       	lddpc	r12,80004ae0 <main+0x84>
80004ab8:	f0 1f 00 08 	mcall	80004ad8 <main+0x7c>
	//xTaskCreate( vCpuWork, (signed char * ) "BASIC", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
	// Start the scheduler, anything after this will not run.
	vTaskStartScheduler();
80004abc:	2f 7d       	sub	sp,-36
80004abe:	f0 1f 00 0a 	mcall	80004ae4 <main+0x88>
}
80004ac2:	0e 9c       	mov	r12,r7
80004ac4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004ac8:	80 00       	ld.sh	r0,r0[0x0]
80004aca:	4a 0c       	lddpc	r12,80004b48 <_malloc_r+0xc>
80004acc:	80 00       	ld.sh	r0,r0[0x0]
80004ace:	21 ea       	sub	r10,30
80004ad0:	80 00       	ld.sh	r0,r0[0x0]
80004ad2:	5d 10       	icall	r0
80004ad4:	80 00       	ld.sh	r0,r0[0x0]
80004ad6:	49 cc       	lddpc	r12,80004b44 <_malloc_r+0x8>
80004ad8:	80 00       	ld.sh	r0,r0[0x0]
80004ada:	47 1c       	lddsp	r12,sp[0x1c4]
80004adc:	80 00       	ld.sh	r0,r0[0x0]
80004ade:	49 8c       	lddpc	r12,80004b3c <_malloc_r>
80004ae0:	80 00       	ld.sh	r0,r0[0x0]
80004ae2:	49 4c       	lddpc	r12,80004b30 <malloc+0x4>
80004ae4:	80 00       	ld.sh	r0,r0[0x0]
80004ae6:	49 00       	lddpc	r0,80004b24 <free+0xc>

80004ae8 <atexit>:
80004ae8:	d4 01       	pushm	lr
80004aea:	30 09       	mov	r9,0
80004aec:	18 9b       	mov	r11,r12
80004aee:	12 9a       	mov	r10,r9
80004af0:	12 9c       	mov	r12,r9
80004af2:	e0 a0 03 37 	rcall	80005160 <__register_exitproc>
80004af6:	d8 02       	popm	pc

80004af8 <exit>:
80004af8:	d4 21       	pushm	r4-r7,lr
80004afa:	30 0b       	mov	r11,0
80004afc:	18 97       	mov	r7,r12
80004afe:	e0 a0 03 85 	rcall	80005208 <__call_exitprocs>
80004b02:	48 58       	lddpc	r8,80004b14 <exit+0x1c>
80004b04:	70 0c       	ld.w	r12,r8[0x0]
80004b06:	78 a8       	ld.w	r8,r12[0x28]
80004b08:	58 08       	cp.w	r8,0
80004b0a:	c0 20       	breq	80004b0e <exit+0x16>
80004b0c:	5d 18       	icall	r8
80004b0e:	0e 9c       	mov	r12,r7
80004b10:	e0 a0 02 ed 	rcall	800050ea <_exit>
80004b14:	80 00       	ld.sh	r0,r0[0x0]
80004b16:	5d 18       	icall	r8

80004b18 <free>:
80004b18:	d4 01       	pushm	lr
80004b1a:	48 48       	lddpc	r8,80004b28 <free+0x10>
80004b1c:	18 9b       	mov	r11,r12
80004b1e:	70 0c       	ld.w	r12,r8[0x0]
80004b20:	e0 a0 05 5a 	rcall	800055d4 <_free_r>
80004b24:	d8 02       	popm	pc
80004b26:	d7 03       	nop
80004b28:	00 00       	add	r0,r0
80004b2a:	01 e0       	ld.ub	r0,r0[0x6]

80004b2c <malloc>:
80004b2c:	d4 01       	pushm	lr
80004b2e:	48 38       	lddpc	r8,80004b38 <malloc+0xc>
80004b30:	18 9b       	mov	r11,r12
80004b32:	70 0c       	ld.w	r12,r8[0x0]
80004b34:	c0 4c       	rcall	80004b3c <_malloc_r>
80004b36:	d8 02       	popm	pc
80004b38:	00 00       	add	r0,r0
80004b3a:	01 e0       	ld.ub	r0,r0[0x6]

80004b3c <_malloc_r>:
80004b3c:	d4 31       	pushm	r0-r7,lr
80004b3e:	f6 c8 ff f5 	sub	r8,r11,-11
80004b42:	18 95       	mov	r5,r12
80004b44:	10 97       	mov	r7,r8
80004b46:	e0 17 ff f8 	andl	r7,0xfff8
80004b4a:	59 68       	cp.w	r8,22
80004b4c:	f9 b7 08 10 	movls	r7,16
80004b50:	16 37       	cp.w	r7,r11
80004b52:	5f 38       	srlo	r8
80004b54:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80004b58:	c0 50       	breq	80004b62 <_malloc_r+0x26>
80004b5a:	30 c8       	mov	r8,12
80004b5c:	99 38       	st.w	r12[0xc],r8
80004b5e:	e0 8f 01 ed 	bral	80004f38 <_malloc_r+0x3fc>
80004b62:	fe b0 fb c7 	rcall	800042f0 <__malloc_lock>
80004b66:	e0 47 01 f7 	cp.w	r7,503
80004b6a:	e0 8b 00 1c 	brhi	80004ba2 <_malloc_r+0x66>
80004b6e:	ee 03 16 03 	lsr	r3,r7,0x3
80004b72:	4c c8       	lddpc	r8,80004ca0 <_malloc_r+0x164>
80004b74:	f0 03 00 38 	add	r8,r8,r3<<0x3
80004b78:	70 36       	ld.w	r6,r8[0xc]
80004b7a:	10 36       	cp.w	r6,r8
80004b7c:	c0 61       	brne	80004b88 <_malloc_r+0x4c>
80004b7e:	ec c8 ff f8 	sub	r8,r6,-8
80004b82:	70 36       	ld.w	r6,r8[0xc]
80004b84:	10 36       	cp.w	r6,r8
80004b86:	c0 c0       	breq	80004b9e <_malloc_r+0x62>
80004b88:	6c 18       	ld.w	r8,r6[0x4]
80004b8a:	e0 18 ff fc 	andl	r8,0xfffc
80004b8e:	6c 3a       	ld.w	r10,r6[0xc]
80004b90:	ec 08 00 09 	add	r9,r6,r8
80004b94:	0a 9c       	mov	r12,r5
80004b96:	6c 28       	ld.w	r8,r6[0x8]
80004b98:	95 28       	st.w	r10[0x8],r8
80004b9a:	91 3a       	st.w	r8[0xc],r10
80004b9c:	c4 68       	rjmp	80004c28 <_malloc_r+0xec>
80004b9e:	2f e3       	sub	r3,-2
80004ba0:	c4 c8       	rjmp	80004c38 <_malloc_r+0xfc>
80004ba2:	ee 03 16 09 	lsr	r3,r7,0x9
80004ba6:	c0 41       	brne	80004bae <_malloc_r+0x72>
80004ba8:	ee 03 16 03 	lsr	r3,r7,0x3
80004bac:	c2 68       	rjmp	80004bf8 <_malloc_r+0xbc>
80004bae:	58 43       	cp.w	r3,4
80004bb0:	e0 8b 00 06 	brhi	80004bbc <_malloc_r+0x80>
80004bb4:	ee 03 16 06 	lsr	r3,r7,0x6
80004bb8:	2c 83       	sub	r3,-56
80004bba:	c1 f8       	rjmp	80004bf8 <_malloc_r+0xbc>
80004bbc:	59 43       	cp.w	r3,20
80004bbe:	e0 8b 00 04 	brhi	80004bc6 <_malloc_r+0x8a>
80004bc2:	2a 53       	sub	r3,-91
80004bc4:	c1 a8       	rjmp	80004bf8 <_malloc_r+0xbc>
80004bc6:	e0 43 00 54 	cp.w	r3,84
80004bca:	e0 8b 00 06 	brhi	80004bd6 <_malloc_r+0x9a>
80004bce:	ee 03 16 0c 	lsr	r3,r7,0xc
80004bd2:	29 23       	sub	r3,-110
80004bd4:	c1 28       	rjmp	80004bf8 <_malloc_r+0xbc>
80004bd6:	e0 43 01 54 	cp.w	r3,340
80004bda:	e0 8b 00 06 	brhi	80004be6 <_malloc_r+0xaa>
80004bde:	ee 03 16 0f 	lsr	r3,r7,0xf
80004be2:	28 93       	sub	r3,-119
80004be4:	c0 a8       	rjmp	80004bf8 <_malloc_r+0xbc>
80004be6:	e0 43 05 54 	cp.w	r3,1364
80004bea:	e0 88 00 04 	brls	80004bf2 <_malloc_r+0xb6>
80004bee:	37 e3       	mov	r3,126
80004bf0:	c0 48       	rjmp	80004bf8 <_malloc_r+0xbc>
80004bf2:	ee 03 16 12 	lsr	r3,r7,0x12
80004bf6:	28 43       	sub	r3,-124
80004bf8:	4a aa       	lddpc	r10,80004ca0 <_malloc_r+0x164>
80004bfa:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80004bfe:	74 36       	ld.w	r6,r10[0xc]
80004c00:	c1 98       	rjmp	80004c32 <_malloc_r+0xf6>
80004c02:	6c 19       	ld.w	r9,r6[0x4]
80004c04:	e0 19 ff fc 	andl	r9,0xfffc
80004c08:	f2 07 01 0b 	sub	r11,r9,r7
80004c0c:	58 fb       	cp.w	r11,15
80004c0e:	e0 8a 00 04 	brle	80004c16 <_malloc_r+0xda>
80004c12:	20 13       	sub	r3,1
80004c14:	c1 18       	rjmp	80004c36 <_malloc_r+0xfa>
80004c16:	6c 38       	ld.w	r8,r6[0xc]
80004c18:	58 0b       	cp.w	r11,0
80004c1a:	c0 b5       	brlt	80004c30 <_malloc_r+0xf4>
80004c1c:	6c 2a       	ld.w	r10,r6[0x8]
80004c1e:	ec 09 00 09 	add	r9,r6,r9
80004c22:	0a 9c       	mov	r12,r5
80004c24:	91 2a       	st.w	r8[0x8],r10
80004c26:	95 38       	st.w	r10[0xc],r8
80004c28:	72 18       	ld.w	r8,r9[0x4]
80004c2a:	a1 a8       	sbr	r8,0x0
80004c2c:	93 18       	st.w	r9[0x4],r8
80004c2e:	cb a8       	rjmp	80004da2 <_malloc_r+0x266>
80004c30:	10 96       	mov	r6,r8
80004c32:	14 36       	cp.w	r6,r10
80004c34:	ce 71       	brne	80004c02 <_malloc_r+0xc6>
80004c36:	2f f3       	sub	r3,-1
80004c38:	49 aa       	lddpc	r10,80004ca0 <_malloc_r+0x164>
80004c3a:	f4 cc ff f8 	sub	r12,r10,-8
80004c3e:	78 26       	ld.w	r6,r12[0x8]
80004c40:	18 36       	cp.w	r6,r12
80004c42:	c6 c0       	breq	80004d1a <_malloc_r+0x1de>
80004c44:	6c 19       	ld.w	r9,r6[0x4]
80004c46:	e0 19 ff fc 	andl	r9,0xfffc
80004c4a:	f2 07 01 08 	sub	r8,r9,r7
80004c4e:	58 f8       	cp.w	r8,15
80004c50:	e0 89 00 8e 	brgt	80004d6c <_malloc_r+0x230>
80004c54:	99 3c       	st.w	r12[0xc],r12
80004c56:	99 2c       	st.w	r12[0x8],r12
80004c58:	58 08       	cp.w	r8,0
80004c5a:	c0 55       	brlt	80004c64 <_malloc_r+0x128>
80004c5c:	ec 09 00 09 	add	r9,r6,r9
80004c60:	0a 9c       	mov	r12,r5
80004c62:	ce 3b       	rjmp	80004c28 <_malloc_r+0xec>
80004c64:	e0 49 01 ff 	cp.w	r9,511
80004c68:	e0 8b 00 13 	brhi	80004c8e <_malloc_r+0x152>
80004c6c:	a3 99       	lsr	r9,0x3
80004c6e:	f4 09 00 38 	add	r8,r10,r9<<0x3
80004c72:	70 2b       	ld.w	r11,r8[0x8]
80004c74:	8d 38       	st.w	r6[0xc],r8
80004c76:	8d 2b       	st.w	r6[0x8],r11
80004c78:	97 36       	st.w	r11[0xc],r6
80004c7a:	91 26       	st.w	r8[0x8],r6
80004c7c:	a3 49       	asr	r9,0x2
80004c7e:	74 18       	ld.w	r8,r10[0x4]
80004c80:	30 1b       	mov	r11,1
80004c82:	f6 09 09 49 	lsl	r9,r11,r9
80004c86:	f1 e9 10 09 	or	r9,r8,r9
80004c8a:	95 19       	st.w	r10[0x4],r9
80004c8c:	c4 78       	rjmp	80004d1a <_malloc_r+0x1de>
80004c8e:	f2 0a 16 09 	lsr	r10,r9,0x9
80004c92:	58 4a       	cp.w	r10,4
80004c94:	e0 8b 00 08 	brhi	80004ca4 <_malloc_r+0x168>
80004c98:	f2 0a 16 06 	lsr	r10,r9,0x6
80004c9c:	2c 8a       	sub	r10,-56
80004c9e:	c2 18       	rjmp	80004ce0 <_malloc_r+0x1a4>
80004ca0:	00 00       	add	r0,r0
80004ca2:	01 e4       	ld.ub	r4,r0[0x6]
80004ca4:	59 4a       	cp.w	r10,20
80004ca6:	e0 8b 00 04 	brhi	80004cae <_malloc_r+0x172>
80004caa:	2a 5a       	sub	r10,-91
80004cac:	c1 a8       	rjmp	80004ce0 <_malloc_r+0x1a4>
80004cae:	e0 4a 00 54 	cp.w	r10,84
80004cb2:	e0 8b 00 06 	brhi	80004cbe <_malloc_r+0x182>
80004cb6:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004cba:	29 2a       	sub	r10,-110
80004cbc:	c1 28       	rjmp	80004ce0 <_malloc_r+0x1a4>
80004cbe:	e0 4a 01 54 	cp.w	r10,340
80004cc2:	e0 8b 00 06 	brhi	80004cce <_malloc_r+0x192>
80004cc6:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004cca:	28 9a       	sub	r10,-119
80004ccc:	c0 a8       	rjmp	80004ce0 <_malloc_r+0x1a4>
80004cce:	e0 4a 05 54 	cp.w	r10,1364
80004cd2:	e0 88 00 04 	brls	80004cda <_malloc_r+0x19e>
80004cd6:	37 ea       	mov	r10,126
80004cd8:	c0 48       	rjmp	80004ce0 <_malloc_r+0x1a4>
80004cda:	f2 0a 16 12 	lsr	r10,r9,0x12
80004cde:	28 4a       	sub	r10,-124
80004ce0:	4c 8b       	lddpc	r11,80004e00 <_malloc_r+0x2c4>
80004ce2:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004ce6:	68 28       	ld.w	r8,r4[0x8]
80004ce8:	08 38       	cp.w	r8,r4
80004cea:	c0 e1       	brne	80004d06 <_malloc_r+0x1ca>
80004cec:	76 19       	ld.w	r9,r11[0x4]
80004cee:	a3 4a       	asr	r10,0x2
80004cf0:	30 1e       	mov	lr,1
80004cf2:	fc 0a 09 4a 	lsl	r10,lr,r10
80004cf6:	f3 ea 10 0a 	or	r10,r9,r10
80004cfa:	10 99       	mov	r9,r8
80004cfc:	97 1a       	st.w	r11[0x4],r10
80004cfe:	c0 a8       	rjmp	80004d12 <_malloc_r+0x1d6>
80004d00:	70 28       	ld.w	r8,r8[0x8]
80004d02:	08 38       	cp.w	r8,r4
80004d04:	c0 60       	breq	80004d10 <_malloc_r+0x1d4>
80004d06:	70 1a       	ld.w	r10,r8[0x4]
80004d08:	e0 1a ff fc 	andl	r10,0xfffc
80004d0c:	14 39       	cp.w	r9,r10
80004d0e:	cf 93       	brcs	80004d00 <_malloc_r+0x1c4>
80004d10:	70 39       	ld.w	r9,r8[0xc]
80004d12:	8d 39       	st.w	r6[0xc],r9
80004d14:	8d 28       	st.w	r6[0x8],r8
80004d16:	91 36       	st.w	r8[0xc],r6
80004d18:	93 26       	st.w	r9[0x8],r6
80004d1a:	e6 08 14 02 	asr	r8,r3,0x2
80004d1e:	30 1b       	mov	r11,1
80004d20:	4b 84       	lddpc	r4,80004e00 <_malloc_r+0x2c4>
80004d22:	f6 08 09 4b 	lsl	r11,r11,r8
80004d26:	68 18       	ld.w	r8,r4[0x4]
80004d28:	10 3b       	cp.w	r11,r8
80004d2a:	e0 8b 00 6d 	brhi	80004e04 <_malloc_r+0x2c8>
80004d2e:	f7 e8 00 09 	and	r9,r11,r8
80004d32:	c0 b1       	brne	80004d48 <_malloc_r+0x20c>
80004d34:	e0 13 ff fc 	andl	r3,0xfffc
80004d38:	a1 7b       	lsl	r11,0x1
80004d3a:	2f c3       	sub	r3,-4
80004d3c:	c0 38       	rjmp	80004d42 <_malloc_r+0x206>
80004d3e:	2f c3       	sub	r3,-4
80004d40:	a1 7b       	lsl	r11,0x1
80004d42:	f7 e8 00 09 	and	r9,r11,r8
80004d46:	cf c0       	breq	80004d3e <_malloc_r+0x202>
80004d48:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80004d4c:	06 92       	mov	r2,r3
80004d4e:	1c 91       	mov	r1,lr
80004d50:	62 36       	ld.w	r6,r1[0xc]
80004d52:	c2 e8       	rjmp	80004dae <_malloc_r+0x272>
80004d54:	6c 1a       	ld.w	r10,r6[0x4]
80004d56:	e0 1a ff fc 	andl	r10,0xfffc
80004d5a:	f4 07 01 08 	sub	r8,r10,r7
80004d5e:	58 f8       	cp.w	r8,15
80004d60:	e0 8a 00 15 	brle	80004d8a <_malloc_r+0x24e>
80004d64:	6c 3a       	ld.w	r10,r6[0xc]
80004d66:	6c 29       	ld.w	r9,r6[0x8]
80004d68:	95 29       	st.w	r10[0x8],r9
80004d6a:	93 3a       	st.w	r9[0xc],r10
80004d6c:	0e 99       	mov	r9,r7
80004d6e:	ec 07 00 07 	add	r7,r6,r7
80004d72:	a1 a9       	sbr	r9,0x0
80004d74:	99 37       	st.w	r12[0xc],r7
80004d76:	99 27       	st.w	r12[0x8],r7
80004d78:	8d 19       	st.w	r6[0x4],r9
80004d7a:	ee 08 09 08 	st.w	r7[r8],r8
80004d7e:	8f 2c       	st.w	r7[0x8],r12
80004d80:	8f 3c       	st.w	r7[0xc],r12
80004d82:	a1 a8       	sbr	r8,0x0
80004d84:	0a 9c       	mov	r12,r5
80004d86:	8f 18       	st.w	r7[0x4],r8
80004d88:	c0 d8       	rjmp	80004da2 <_malloc_r+0x266>
80004d8a:	6c 39       	ld.w	r9,r6[0xc]
80004d8c:	58 08       	cp.w	r8,0
80004d8e:	c0 f5       	brlt	80004dac <_malloc_r+0x270>
80004d90:	ec 0a 00 0a 	add	r10,r6,r10
80004d94:	74 18       	ld.w	r8,r10[0x4]
80004d96:	a1 a8       	sbr	r8,0x0
80004d98:	0a 9c       	mov	r12,r5
80004d9a:	95 18       	st.w	r10[0x4],r8
80004d9c:	6c 28       	ld.w	r8,r6[0x8]
80004d9e:	93 28       	st.w	r9[0x8],r8
80004da0:	91 39       	st.w	r8[0xc],r9
80004da2:	fe b0 fa ad 	rcall	800042fc <__malloc_unlock>
80004da6:	ec cc ff f8 	sub	r12,r6,-8
80004daa:	d8 32       	popm	r0-r7,pc
80004dac:	12 96       	mov	r6,r9
80004dae:	02 36       	cp.w	r6,r1
80004db0:	cd 21       	brne	80004d54 <_malloc_r+0x218>
80004db2:	2f f2       	sub	r2,-1
80004db4:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80004db8:	c0 30       	breq	80004dbe <_malloc_r+0x282>
80004dba:	2f 81       	sub	r1,-8
80004dbc:	cc ab       	rjmp	80004d50 <_malloc_r+0x214>
80004dbe:	1c 98       	mov	r8,lr
80004dc0:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004dc4:	c0 81       	brne	80004dd4 <_malloc_r+0x298>
80004dc6:	68 19       	ld.w	r9,r4[0x4]
80004dc8:	f6 08 11 ff 	rsub	r8,r11,-1
80004dcc:	f3 e8 00 08 	and	r8,r9,r8
80004dd0:	89 18       	st.w	r4[0x4],r8
80004dd2:	c0 78       	rjmp	80004de0 <_malloc_r+0x2a4>
80004dd4:	f0 c9 00 08 	sub	r9,r8,8
80004dd8:	20 13       	sub	r3,1
80004dda:	70 08       	ld.w	r8,r8[0x0]
80004ddc:	12 38       	cp.w	r8,r9
80004dde:	cf 10       	breq	80004dc0 <_malloc_r+0x284>
80004de0:	a1 7b       	lsl	r11,0x1
80004de2:	68 18       	ld.w	r8,r4[0x4]
80004de4:	10 3b       	cp.w	r11,r8
80004de6:	e0 8b 00 0f 	brhi	80004e04 <_malloc_r+0x2c8>
80004dea:	58 0b       	cp.w	r11,0
80004dec:	c0 c0       	breq	80004e04 <_malloc_r+0x2c8>
80004dee:	04 93       	mov	r3,r2
80004df0:	c0 38       	rjmp	80004df6 <_malloc_r+0x2ba>
80004df2:	2f c3       	sub	r3,-4
80004df4:	a1 7b       	lsl	r11,0x1
80004df6:	f7 e8 00 09 	and	r9,r11,r8
80004dfa:	ca 71       	brne	80004d48 <_malloc_r+0x20c>
80004dfc:	cf bb       	rjmp	80004df2 <_malloc_r+0x2b6>
80004dfe:	d7 03       	nop
80004e00:	00 00       	add	r0,r0
80004e02:	01 e4       	ld.ub	r4,r0[0x6]
80004e04:	68 23       	ld.w	r3,r4[0x8]
80004e06:	66 12       	ld.w	r2,r3[0x4]
80004e08:	e0 12 ff fc 	andl	r2,0xfffc
80004e0c:	0e 32       	cp.w	r2,r7
80004e0e:	5f 39       	srlo	r9
80004e10:	e4 07 01 08 	sub	r8,r2,r7
80004e14:	58 f8       	cp.w	r8,15
80004e16:	5f aa       	srle	r10
80004e18:	f5 e9 10 09 	or	r9,r10,r9
80004e1c:	e0 80 00 9a 	breq	80004f50 <_malloc_r+0x414>
80004e20:	4c 78       	lddpc	r8,80004f3c <_malloc_r+0x400>
80004e22:	70 01       	ld.w	r1,r8[0x0]
80004e24:	4c 78       	lddpc	r8,80004f40 <_malloc_r+0x404>
80004e26:	2f 01       	sub	r1,-16
80004e28:	70 08       	ld.w	r8,r8[0x0]
80004e2a:	0e 01       	add	r1,r7
80004e2c:	5b f8       	cp.w	r8,-1
80004e2e:	c0 40       	breq	80004e36 <_malloc_r+0x2fa>
80004e30:	28 11       	sub	r1,-127
80004e32:	e0 11 ff 80 	andl	r1,0xff80
80004e36:	02 9b       	mov	r11,r1
80004e38:	0a 9c       	mov	r12,r5
80004e3a:	ca 3c       	rcall	80004f80 <_sbrk_r>
80004e3c:	18 96       	mov	r6,r12
80004e3e:	5b fc       	cp.w	r12,-1
80004e40:	c6 d0       	breq	80004f1a <_malloc_r+0x3de>
80004e42:	e6 02 00 08 	add	r8,r3,r2
80004e46:	10 3c       	cp.w	r12,r8
80004e48:	c0 32       	brcc	80004e4e <_malloc_r+0x312>
80004e4a:	08 33       	cp.w	r3,r4
80004e4c:	c6 71       	brne	80004f1a <_malloc_r+0x3de>
80004e4e:	4b ea       	lddpc	r10,80004f44 <_malloc_r+0x408>
80004e50:	74 09       	ld.w	r9,r10[0x0]
80004e52:	e2 09 00 09 	add	r9,r1,r9
80004e56:	95 09       	st.w	r10[0x0],r9
80004e58:	10 36       	cp.w	r6,r8
80004e5a:	c0 a1       	brne	80004e6e <_malloc_r+0x332>
80004e5c:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80004e60:	c0 71       	brne	80004e6e <_malloc_r+0x332>
80004e62:	e2 02 00 02 	add	r2,r1,r2
80004e66:	68 28       	ld.w	r8,r4[0x8]
80004e68:	a1 a2       	sbr	r2,0x0
80004e6a:	91 12       	st.w	r8[0x4],r2
80004e6c:	c4 b8       	rjmp	80004f02 <_malloc_r+0x3c6>
80004e6e:	4b 5a       	lddpc	r10,80004f40 <_malloc_r+0x404>
80004e70:	74 0b       	ld.w	r11,r10[0x0]
80004e72:	5b fb       	cp.w	r11,-1
80004e74:	c0 31       	brne	80004e7a <_malloc_r+0x33e>
80004e76:	95 06       	st.w	r10[0x0],r6
80004e78:	c0 68       	rjmp	80004e84 <_malloc_r+0x348>
80004e7a:	ec 09 00 09 	add	r9,r6,r9
80004e7e:	4b 2a       	lddpc	r10,80004f44 <_malloc_r+0x408>
80004e80:	10 19       	sub	r9,r8
80004e82:	95 09       	st.w	r10[0x0],r9
80004e84:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80004e88:	f0 09 11 08 	rsub	r9,r8,8
80004e8c:	58 08       	cp.w	r8,0
80004e8e:	f2 08 17 10 	movne	r8,r9
80004e92:	ed d8 e1 06 	addne	r6,r6,r8
80004e96:	28 08       	sub	r8,-128
80004e98:	ec 01 00 01 	add	r1,r6,r1
80004e9c:	0a 9c       	mov	r12,r5
80004e9e:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80004ea2:	f0 01 01 01 	sub	r1,r8,r1
80004ea6:	02 9b       	mov	r11,r1
80004ea8:	c6 cc       	rcall	80004f80 <_sbrk_r>
80004eaa:	4a 78       	lddpc	r8,80004f44 <_malloc_r+0x408>
80004eac:	5b fc       	cp.w	r12,-1
80004eae:	ec 0c 17 00 	moveq	r12,r6
80004eb2:	f9 b1 00 00 	moveq	r1,0
80004eb6:	70 09       	ld.w	r9,r8[0x0]
80004eb8:	0c 1c       	sub	r12,r6
80004eba:	89 26       	st.w	r4[0x8],r6
80004ebc:	02 0c       	add	r12,r1
80004ebe:	12 01       	add	r1,r9
80004ec0:	a1 ac       	sbr	r12,0x0
80004ec2:	91 01       	st.w	r8[0x0],r1
80004ec4:	8d 1c       	st.w	r6[0x4],r12
80004ec6:	08 33       	cp.w	r3,r4
80004ec8:	c1 d0       	breq	80004f02 <_malloc_r+0x3c6>
80004eca:	58 f2       	cp.w	r2,15
80004ecc:	e0 8b 00 05 	brhi	80004ed6 <_malloc_r+0x39a>
80004ed0:	30 18       	mov	r8,1
80004ed2:	8d 18       	st.w	r6[0x4],r8
80004ed4:	c2 38       	rjmp	80004f1a <_malloc_r+0x3de>
80004ed6:	30 59       	mov	r9,5
80004ed8:	20 c2       	sub	r2,12
80004eda:	e0 12 ff f8 	andl	r2,0xfff8
80004ede:	e6 02 00 08 	add	r8,r3,r2
80004ee2:	91 29       	st.w	r8[0x8],r9
80004ee4:	91 19       	st.w	r8[0x4],r9
80004ee6:	66 18       	ld.w	r8,r3[0x4]
80004ee8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004eec:	e5 e8 10 08 	or	r8,r2,r8
80004ef0:	87 18       	st.w	r3[0x4],r8
80004ef2:	58 f2       	cp.w	r2,15
80004ef4:	e0 88 00 07 	brls	80004f02 <_malloc_r+0x3c6>
80004ef8:	e6 cb ff f8 	sub	r11,r3,-8
80004efc:	0a 9c       	mov	r12,r5
80004efe:	e0 a0 03 6b 	rcall	800055d4 <_free_r>
80004f02:	49 29       	lddpc	r9,80004f48 <_malloc_r+0x40c>
80004f04:	72 0a       	ld.w	r10,r9[0x0]
80004f06:	49 08       	lddpc	r8,80004f44 <_malloc_r+0x408>
80004f08:	70 08       	ld.w	r8,r8[0x0]
80004f0a:	14 38       	cp.w	r8,r10
80004f0c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004f10:	48 f9       	lddpc	r9,80004f4c <_malloc_r+0x410>
80004f12:	72 0a       	ld.w	r10,r9[0x0]
80004f14:	14 38       	cp.w	r8,r10
80004f16:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004f1a:	68 28       	ld.w	r8,r4[0x8]
80004f1c:	70 18       	ld.w	r8,r8[0x4]
80004f1e:	e0 18 ff fc 	andl	r8,0xfffc
80004f22:	0e 38       	cp.w	r8,r7
80004f24:	5f 39       	srlo	r9
80004f26:	0e 18       	sub	r8,r7
80004f28:	58 f8       	cp.w	r8,15
80004f2a:	5f aa       	srle	r10
80004f2c:	f5 e9 10 09 	or	r9,r10,r9
80004f30:	c1 00       	breq	80004f50 <_malloc_r+0x414>
80004f32:	0a 9c       	mov	r12,r5
80004f34:	fe b0 f9 e4 	rcall	800042fc <__malloc_unlock>
80004f38:	d8 3a       	popm	r0-r7,pc,r12=0
80004f3a:	d7 03       	nop
80004f3c:	00 00       	add	r0,r0
80004f3e:	09 e0       	ld.ub	r0,r4[0x6]
80004f40:	00 00       	add	r0,r0
80004f42:	05 f0       	ld.ub	r0,r2[0x7]
80004f44:	00 00       	add	r0,r0
80004f46:	09 e4       	ld.ub	r4,r4[0x6]
80004f48:	00 00       	add	r0,r0
80004f4a:	09 dc       	ld.ub	r12,r4[0x5]
80004f4c:	00 00       	add	r0,r0
80004f4e:	09 d8       	ld.ub	r8,r4[0x5]
80004f50:	68 26       	ld.w	r6,r4[0x8]
80004f52:	a1 a8       	sbr	r8,0x0
80004f54:	0e 99       	mov	r9,r7
80004f56:	a1 a9       	sbr	r9,0x0
80004f58:	8d 19       	st.w	r6[0x4],r9
80004f5a:	ec 07 00 07 	add	r7,r6,r7
80004f5e:	0a 9c       	mov	r12,r5
80004f60:	89 27       	st.w	r4[0x8],r7
80004f62:	8f 18       	st.w	r7[0x4],r8
80004f64:	fe b0 f9 cc 	rcall	800042fc <__malloc_unlock>
80004f68:	ec cc ff f8 	sub	r12,r6,-8
80004f6c:	d8 32       	popm	r0-r7,pc
80004f6e:	d7 03       	nop

80004f70 <memset>:
80004f70:	18 98       	mov	r8,r12
80004f72:	c0 38       	rjmp	80004f78 <memset+0x8>
80004f74:	10 cb       	st.b	r8++,r11
80004f76:	20 1a       	sub	r10,1
80004f78:	58 0a       	cp.w	r10,0
80004f7a:	cf d1       	brne	80004f74 <memset+0x4>
80004f7c:	5e fc       	retal	r12
80004f7e:	d7 03       	nop

80004f80 <_sbrk_r>:
80004f80:	d4 21       	pushm	r4-r7,lr
80004f82:	30 08       	mov	r8,0
80004f84:	18 97       	mov	r7,r12
80004f86:	48 66       	lddpc	r6,80004f9c <_sbrk_r+0x1c>
80004f88:	16 9c       	mov	r12,r11
80004f8a:	8d 08       	st.w	r6[0x0],r8
80004f8c:	cc cc       	rcall	80005124 <_sbrk>
80004f8e:	5b fc       	cp.w	r12,-1
80004f90:	c0 51       	brne	80004f9a <_sbrk_r+0x1a>
80004f92:	6c 08       	ld.w	r8,r6[0x0]
80004f94:	58 08       	cp.w	r8,0
80004f96:	ef f8 1a 03 	st.wne	r7[0xc],r8
80004f9a:	d8 22       	popm	r4-r7,pc
80004f9c:	00 00       	add	r0,r0
80004f9e:	0a 3c       	cp.w	r12,r5

80004fa0 <setbuf>:
80004fa0:	d4 01       	pushm	lr
80004fa2:	e0 69 04 00 	mov	r9,1024
80004fa6:	58 0b       	cp.w	r11,0
80004fa8:	f9 ba 00 02 	moveq	r10,2
80004fac:	f9 ba 01 00 	movne	r10,0
80004fb0:	c0 2c       	rcall	80004fb4 <setvbuf>
80004fb2:	d8 02       	popm	pc

80004fb4 <setvbuf>:
80004fb4:	d4 31       	pushm	r0-r7,lr
80004fb6:	4b f8       	lddpc	r8,800050b0 <setvbuf+0xfc>
80004fb8:	18 97       	mov	r7,r12
80004fba:	16 96       	mov	r6,r11
80004fbc:	14 95       	mov	r5,r10
80004fbe:	12 94       	mov	r4,r9
80004fc0:	70 0c       	ld.w	r12,r8[0x0]
80004fc2:	58 0c       	cp.w	r12,0
80004fc4:	c0 60       	breq	80004fd0 <setvbuf+0x1c>
80004fc6:	78 68       	ld.w	r8,r12[0x18]
80004fc8:	58 08       	cp.w	r8,0
80004fca:	c0 31       	brne	80004fd0 <setvbuf+0x1c>
80004fcc:	e0 a0 02 68 	rcall	8000549c <__sinit>
80004fd0:	4b 98       	lddpc	r8,800050b4 <setvbuf+0x100>
80004fd2:	10 37       	cp.w	r7,r8
80004fd4:	c0 51       	brne	80004fde <setvbuf+0x2a>
80004fd6:	4b 78       	lddpc	r8,800050b0 <setvbuf+0xfc>
80004fd8:	70 08       	ld.w	r8,r8[0x0]
80004fda:	70 07       	ld.w	r7,r8[0x0]
80004fdc:	c0 e8       	rjmp	80004ff8 <setvbuf+0x44>
80004fde:	4b 78       	lddpc	r8,800050b8 <setvbuf+0x104>
80004fe0:	10 37       	cp.w	r7,r8
80004fe2:	c0 51       	brne	80004fec <setvbuf+0x38>
80004fe4:	4b 38       	lddpc	r8,800050b0 <setvbuf+0xfc>
80004fe6:	70 08       	ld.w	r8,r8[0x0]
80004fe8:	70 17       	ld.w	r7,r8[0x4]
80004fea:	c0 78       	rjmp	80004ff8 <setvbuf+0x44>
80004fec:	4b 48       	lddpc	r8,800050bc <setvbuf+0x108>
80004fee:	10 37       	cp.w	r7,r8
80004ff0:	c0 41       	brne	80004ff8 <setvbuf+0x44>
80004ff2:	4b 08       	lddpc	r8,800050b0 <setvbuf+0xfc>
80004ff4:	70 08       	ld.w	r8,r8[0x0]
80004ff6:	70 27       	ld.w	r7,r8[0x8]
80004ff8:	58 25       	cp.w	r5,2
80004ffa:	5f b8       	srhi	r8
80004ffc:	f1 e4 13 f8 	or	r8,r8,r4>>0x1f
80005000:	c0 20       	breq	80005004 <setvbuf+0x50>
80005002:	dc 3a       	popm	r0-r7,pc,r12=-1
80005004:	4a b3       	lddpc	r3,800050b0 <setvbuf+0xfc>
80005006:	0e 9b       	mov	r11,r7
80005008:	66 0c       	ld.w	r12,r3[0x0]
8000500a:	c6 dd       	rcall	800052e4 <_fflush_r>
8000500c:	30 08       	mov	r8,0
8000500e:	8f 68       	st.w	r7[0x18],r8
80005010:	8f 18       	st.w	r7[0x4],r8
80005012:	8e 68       	ld.sh	r8,r7[0xc]
80005014:	ed b8 00 07 	bld	r8,0x7
80005018:	c0 51       	brne	80005022 <setvbuf+0x6e>
8000501a:	66 0c       	ld.w	r12,r3[0x0]
8000501c:	6e 4b       	ld.w	r11,r7[0x10]
8000501e:	e0 a0 02 db 	rcall	800055d4 <_free_r>
80005022:	8e 68       	ld.sh	r8,r7[0xc]
80005024:	e0 18 ff 7c 	andl	r8,0xff7c
80005028:	ae 68       	st.h	r7[0xc],r8
8000502a:	58 25       	cp.w	r5,2
8000502c:	c0 31       	brne	80005032 <setvbuf+0x7e>
8000502e:	30 0c       	mov	r12,0
80005030:	c1 38       	rjmp	80005056 <setvbuf+0xa2>
80005032:	58 06       	cp.w	r6,0
80005034:	c2 11       	brne	80005076 <setvbuf+0xc2>
80005036:	e0 63 04 00 	mov	r3,1024
8000503a:	58 04       	cp.w	r4,0
8000503c:	e6 04 17 00 	moveq	r4,r3
80005040:	08 9c       	mov	r12,r4
80005042:	fe b0 fd 75 	rcall	80004b2c <malloc>
80005046:	18 96       	mov	r6,r12
80005048:	c1 41       	brne	80005070 <setvbuf+0xbc>
8000504a:	06 9c       	mov	r12,r3
8000504c:	fe b0 fd 70 	rcall	80004b2c <malloc>
80005050:	18 96       	mov	r6,r12
80005052:	c0 e1       	brne	8000506e <setvbuf+0xba>
80005054:	3f fc       	mov	r12,-1
80005056:	8e 68       	ld.sh	r8,r7[0xc]
80005058:	a1 b8       	sbr	r8,0x1
8000505a:	ae 68       	st.h	r7[0xc],r8
8000505c:	ee c8 ff b9 	sub	r8,r7,-71
80005060:	8f 48       	st.w	r7[0x10],r8
80005062:	8f 08       	st.w	r7[0x0],r8
80005064:	30 08       	mov	r8,0
80005066:	8f 28       	st.w	r7[0x8],r8
80005068:	30 18       	mov	r8,1
8000506a:	8f 58       	st.w	r7[0x14],r8
8000506c:	d8 32       	popm	r0-r7,pc
8000506e:	06 94       	mov	r4,r3
80005070:	8e 68       	ld.sh	r8,r7[0xc]
80005072:	a7 b8       	sbr	r8,0x7
80005074:	ae 68       	st.h	r7[0xc],r8
80005076:	58 15       	cp.w	r5,1
80005078:	c0 71       	brne	80005086 <setvbuf+0xd2>
8000507a:	8e 68       	ld.sh	r8,r7[0xc]
8000507c:	a1 a8       	sbr	r8,0x0
8000507e:	ae 68       	st.h	r7[0xc],r8
80005080:	e8 08 11 00 	rsub	r8,r4,0
80005084:	8f 68       	st.w	r7[0x18],r8
80005086:	48 b8       	lddpc	r8,800050b0 <setvbuf+0xfc>
80005088:	fe c9 fc 90 	sub	r9,pc,-880
8000508c:	70 08       	ld.w	r8,r8[0x0]
8000508e:	8f 46       	st.w	r7[0x10],r6
80005090:	91 a9       	st.w	r8[0x28],r9
80005092:	8f 06       	st.w	r7[0x0],r6
80005094:	8f 54       	st.w	r7[0x14],r4
80005096:	8e 68       	ld.sh	r8,r7[0xc]
80005098:	10 9c       	mov	r12,r8
8000509a:	e2 1c 00 08 	andl	r12,0x8,COH
8000509e:	c0 70       	breq	800050ac <setvbuf+0xf8>
800050a0:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800050a4:	30 0c       	mov	r12,0
800050a6:	f9 b4 01 00 	movne	r4,0
800050aa:	8f 24       	st.w	r7[0x8],r4
800050ac:	d8 32       	popm	r0-r7,pc
800050ae:	d7 03       	nop
800050b0:	00 00       	add	r0,r0
800050b2:	01 e0       	ld.ub	r0,r0[0x6]
800050b4:	80 00       	ld.sh	r0,r0[0x0]
800050b6:	5d 1c       	icall	r12
800050b8:	80 00       	ld.sh	r0,r0[0x0]
800050ba:	5d 3c       	musfr	r12
800050bc:	80 00       	ld.sh	r0,r0[0x0]
800050be:	5d 5c       	*unknown*

800050c0 <strncpy>:
800050c0:	30 08       	mov	r8,0
800050c2:	10 3a       	cp.w	r10,r8
800050c4:	5e 0c       	reteq	r12
800050c6:	f6 08 07 09 	ld.ub	r9,r11[r8]
800050ca:	f8 08 0b 09 	st.b	r12[r8],r9
800050ce:	2f f8       	sub	r8,-1
800050d0:	58 09       	cp.w	r9,0
800050d2:	cf 81       	brne	800050c2 <strncpy+0x2>
800050d4:	10 3a       	cp.w	r10,r8
800050d6:	5e 0c       	reteq	r12
800050d8:	f8 08 0b 09 	st.b	r12[r8],r9
800050dc:	2f f8       	sub	r8,-1
800050de:	cf bb       	rjmp	800050d4 <strncpy+0x14>

800050e0 <_init_argv>:
800050e0:	30 e8       	mov	r8,14
800050e2:	d6 73       	breakpoint
800050e4:	3f fc       	mov	r12,-1
800050e6:	35 8b       	mov	r11,88
800050e8:	5e fc       	retal	r12

800050ea <_exit>:
800050ea:	30 d8       	mov	r8,13
800050ec:	d6 73       	breakpoint
800050ee:	3f fc       	mov	r12,-1
800050f0:	35 8b       	mov	r11,88
800050f2:	c0 08       	rjmp	800050f2 <_exit+0x8>

800050f4 <_close>:
800050f4:	30 28       	mov	r8,2
800050f6:	d6 73       	breakpoint
800050f8:	3f fc       	mov	r12,-1
800050fa:	35 8b       	mov	r11,88
800050fc:	58 0c       	cp.w	r12,0
800050fe:	5e 4c       	retge	r12
80005100:	48 2a       	lddpc	r10,80005108 <_close+0x14>
80005102:	95 0b       	st.w	r10[0x0],r11
80005104:	5e fc       	retal	r12
80005106:	d7 03       	nop
80005108:	00 00       	add	r0,r0
8000510a:	0a 3c       	cp.w	r12,r5

8000510c <_lseek>:
8000510c:	30 58       	mov	r8,5
8000510e:	d6 73       	breakpoint
80005110:	3f fc       	mov	r12,-1
80005112:	35 8b       	mov	r11,88
80005114:	58 0c       	cp.w	r12,0
80005116:	5e 4c       	retge	r12
80005118:	48 2a       	lddpc	r10,80005120 <_lseek+0x14>
8000511a:	95 0b       	st.w	r10[0x0],r11
8000511c:	5e fc       	retal	r12
8000511e:	d7 03       	nop
80005120:	00 00       	add	r0,r0
80005122:	0a 3c       	cp.w	r12,r5

80005124 <_sbrk>:
80005124:	d4 01       	pushm	lr
80005126:	48 c8       	lddpc	r8,80005154 <_sbrk+0x30>
80005128:	70 09       	ld.w	r9,r8[0x0]
8000512a:	58 09       	cp.w	r9,0
8000512c:	c0 31       	brne	80005132 <_sbrk+0xe>
8000512e:	48 b9       	lddpc	r9,80005158 <_sbrk+0x34>
80005130:	91 09       	st.w	r8[0x0],r9
80005132:	48 99       	lddpc	r9,80005154 <_sbrk+0x30>
80005134:	48 aa       	lddpc	r10,8000515c <_sbrk+0x38>
80005136:	72 08       	ld.w	r8,r9[0x0]
80005138:	f0 0c 00 0c 	add	r12,r8,r12
8000513c:	14 3c       	cp.w	r12,r10
8000513e:	e0 8b 00 04 	brhi	80005146 <_sbrk+0x22>
80005142:	93 0c       	st.w	r9[0x0],r12
80005144:	c0 58       	rjmp	8000514e <_sbrk+0x2a>
80005146:	cc 9c       	rcall	800052d8 <__errno>
80005148:	30 c8       	mov	r8,12
8000514a:	99 08       	st.w	r12[0x0],r8
8000514c:	3f f8       	mov	r8,-1
8000514e:	10 9c       	mov	r12,r8
80005150:	d8 02       	popm	pc
80005152:	d7 03       	nop
80005154:	00 00       	add	r0,r0
80005156:	0a 0c       	add	r12,r5
80005158:	00 00       	add	r0,r0
8000515a:	0a 40       	or	r0,r5
8000515c:	00 00       	add	r0,r0
8000515e:	f0 00       	*unknown*

80005160 <__register_exitproc>:
80005160:	d4 31       	pushm	r0-r7,lr
80005162:	4a 98       	lddpc	r8,80005204 <__register_exitproc+0xa4>
80005164:	70 03       	ld.w	r3,r8[0x0]
80005166:	67 24       	ld.w	r4,r3[0x48]
80005168:	e6 c8 ff b4 	sub	r8,r3,-76
8000516c:	58 04       	cp.w	r4,0
8000516e:	f0 04 17 00 	moveq	r4,r8
80005172:	e7 f4 0a 12 	st.weq	r3[0x48],r4
80005176:	18 97       	mov	r7,r12
80005178:	16 96       	mov	r6,r11
8000517a:	14 95       	mov	r5,r10
8000517c:	12 92       	mov	r2,r9
8000517e:	68 18       	ld.w	r8,r4[0x4]
80005180:	59 f8       	cp.w	r8,31
80005182:	e0 8a 00 0e 	brle	8000519e <__register_exitproc+0x3e>
80005186:	e0 6c 00 8c 	mov	r12,140
8000518a:	fe b0 fc d1 	rcall	80004b2c <malloc>
8000518e:	18 94       	mov	r4,r12
80005190:	c3 80       	breq	80005200 <__register_exitproc+0xa0>
80005192:	67 28       	ld.w	r8,r3[0x48]
80005194:	99 08       	st.w	r12[0x0],r8
80005196:	e7 4c 00 48 	st.w	r3[72],r12
8000519a:	30 08       	mov	r8,0
8000519c:	99 18       	st.w	r12[0x4],r8
8000519e:	58 07       	cp.w	r7,0
800051a0:	c2 70       	breq	800051ee <__register_exitproc+0x8e>
800051a2:	e8 fc 00 88 	ld.w	r12,r4[136]
800051a6:	58 0c       	cp.w	r12,0
800051a8:	c0 d1       	brne	800051c2 <__register_exitproc+0x62>
800051aa:	e0 6c 01 08 	mov	r12,264
800051ae:	fe b0 fc bf 	rcall	80004b2c <malloc>
800051b2:	c2 70       	breq	80005200 <__register_exitproc+0xa0>
800051b4:	30 08       	mov	r8,0
800051b6:	e9 4c 00 88 	st.w	r4[136],r12
800051ba:	f9 48 01 04 	st.w	r12[260],r8
800051be:	f9 48 01 00 	st.w	r12[256],r8
800051c2:	68 18       	ld.w	r8,r4[0x4]
800051c4:	f0 c9 ff e0 	sub	r9,r8,-32
800051c8:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
800051cc:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
800051d0:	30 1a       	mov	r10,1
800051d2:	f8 f9 01 00 	ld.w	r9,r12[256]
800051d6:	f4 08 09 48 	lsl	r8,r10,r8
800051da:	10 49       	or	r9,r8
800051dc:	f9 49 01 00 	st.w	r12[256],r9
800051e0:	58 27       	cp.w	r7,2
800051e2:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
800051e6:	f3 d8 e0 38 	oreq	r8,r9,r8
800051ea:	f9 f8 0a 41 	st.weq	r12[0x104],r8
800051ee:	68 18       	ld.w	r8,r4[0x4]
800051f0:	30 0c       	mov	r12,0
800051f2:	f0 c9 ff ff 	sub	r9,r8,-1
800051f6:	2f e8       	sub	r8,-2
800051f8:	89 19       	st.w	r4[0x4],r9
800051fa:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
800051fe:	d8 32       	popm	r0-r7,pc
80005200:	dc 3a       	popm	r0-r7,pc,r12=-1
80005202:	d7 03       	nop
80005204:	80 00       	ld.sh	r0,r0[0x0]
80005206:	5d 18       	icall	r8

80005208 <__call_exitprocs>:
80005208:	d4 31       	pushm	r0-r7,lr
8000520a:	20 3d       	sub	sp,12
8000520c:	4b 28       	lddpc	r8,800052d4 <__call_exitprocs+0xcc>
8000520e:	50 2c       	stdsp	sp[0x8],r12
80005210:	70 08       	ld.w	r8,r8[0x0]
80005212:	16 91       	mov	r1,r11
80005214:	50 08       	stdsp	sp[0x0],r8
80005216:	2b 88       	sub	r8,-72
80005218:	50 18       	stdsp	sp[0x4],r8
8000521a:	40 0a       	lddsp	r10,sp[0x0]
8000521c:	40 14       	lddsp	r4,sp[0x4]
8000521e:	75 27       	ld.w	r7,r10[0x48]
80005220:	c5 58       	rjmp	800052ca <__call_exitprocs+0xc2>
80005222:	6e 15       	ld.w	r5,r7[0x4]
80005224:	ee f6 00 88 	ld.w	r6,r7[136]
80005228:	ea c2 ff ff 	sub	r2,r5,-1
8000522c:	20 15       	sub	r5,1
8000522e:	ee 02 00 22 	add	r2,r7,r2<<0x2
80005232:	ec 05 00 23 	add	r3,r6,r5<<0x2
80005236:	c3 58       	rjmp	800052a0 <__call_exitprocs+0x98>
80005238:	58 01       	cp.w	r1,0
8000523a:	c0 70       	breq	80005248 <__call_exitprocs+0x40>
8000523c:	58 06       	cp.w	r6,0
8000523e:	c2 e0       	breq	8000529a <__call_exitprocs+0x92>
80005240:	e6 f8 00 80 	ld.w	r8,r3[128]
80005244:	02 38       	cp.w	r8,r1
80005246:	c2 a1       	brne	8000529a <__call_exitprocs+0x92>
80005248:	6e 19       	ld.w	r9,r7[0x4]
8000524a:	64 08       	ld.w	r8,r2[0x0]
8000524c:	20 19       	sub	r9,1
8000524e:	12 35       	cp.w	r5,r9
80005250:	ef f5 0a 01 	st.weq	r7[0x4],r5
80005254:	f9 b9 01 00 	movne	r9,0
80005258:	e5 f9 1a 00 	st.wne	r2[0x0],r9
8000525c:	58 08       	cp.w	r8,0
8000525e:	c1 e0       	breq	8000529a <__call_exitprocs+0x92>
80005260:	6e 10       	ld.w	r0,r7[0x4]
80005262:	58 06       	cp.w	r6,0
80005264:	c0 90       	breq	80005276 <__call_exitprocs+0x6e>
80005266:	30 1a       	mov	r10,1
80005268:	f4 05 09 49 	lsl	r9,r10,r5
8000526c:	ec fa 01 00 	ld.w	r10,r6[256]
80005270:	f3 ea 00 0a 	and	r10,r9,r10
80005274:	c0 31       	brne	8000527a <__call_exitprocs+0x72>
80005276:	5d 18       	icall	r8
80005278:	c0 b8       	rjmp	8000528e <__call_exitprocs+0x86>
8000527a:	ec fa 01 04 	ld.w	r10,r6[260]
8000527e:	66 0b       	ld.w	r11,r3[0x0]
80005280:	14 69       	and	r9,r10
80005282:	c0 41       	brne	8000528a <__call_exitprocs+0x82>
80005284:	40 2c       	lddsp	r12,sp[0x8]
80005286:	5d 18       	icall	r8
80005288:	c0 38       	rjmp	8000528e <__call_exitprocs+0x86>
8000528a:	16 9c       	mov	r12,r11
8000528c:	5d 18       	icall	r8
8000528e:	6e 18       	ld.w	r8,r7[0x4]
80005290:	10 30       	cp.w	r0,r8
80005292:	cc 41       	brne	8000521a <__call_exitprocs+0x12>
80005294:	68 08       	ld.w	r8,r4[0x0]
80005296:	0e 38       	cp.w	r8,r7
80005298:	cc 11       	brne	8000521a <__call_exitprocs+0x12>
8000529a:	20 15       	sub	r5,1
8000529c:	20 43       	sub	r3,4
8000529e:	20 42       	sub	r2,4
800052a0:	58 05       	cp.w	r5,0
800052a2:	cc b4       	brge	80005238 <__call_exitprocs+0x30>
800052a4:	6e 18       	ld.w	r8,r7[0x4]
800052a6:	58 08       	cp.w	r8,0
800052a8:	c0 f1       	brne	800052c6 <__call_exitprocs+0xbe>
800052aa:	6e 08       	ld.w	r8,r7[0x0]
800052ac:	58 08       	cp.w	r8,0
800052ae:	c0 c0       	breq	800052c6 <__call_exitprocs+0xbe>
800052b0:	89 08       	st.w	r4[0x0],r8
800052b2:	58 06       	cp.w	r6,0
800052b4:	c0 40       	breq	800052bc <__call_exitprocs+0xb4>
800052b6:	0c 9c       	mov	r12,r6
800052b8:	fe b0 fc 30 	rcall	80004b18 <free>
800052bc:	0e 9c       	mov	r12,r7
800052be:	fe b0 fc 2d 	rcall	80004b18 <free>
800052c2:	68 07       	ld.w	r7,r4[0x0]
800052c4:	c0 38       	rjmp	800052ca <__call_exitprocs+0xc2>
800052c6:	0e 94       	mov	r4,r7
800052c8:	6e 07       	ld.w	r7,r7[0x0]
800052ca:	58 07       	cp.w	r7,0
800052cc:	ca b1       	brne	80005222 <__call_exitprocs+0x1a>
800052ce:	2f dd       	sub	sp,-12
800052d0:	d8 32       	popm	r0-r7,pc
800052d2:	d7 03       	nop
800052d4:	80 00       	ld.sh	r0,r0[0x0]
800052d6:	5d 18       	icall	r8

800052d8 <__errno>:
800052d8:	48 28       	lddpc	r8,800052e0 <__errno+0x8>
800052da:	70 0c       	ld.w	r12,r8[0x0]
800052dc:	2f 4c       	sub	r12,-12
800052de:	5e fc       	retal	r12
800052e0:	00 00       	add	r0,r0
800052e2:	01 e0       	ld.ub	r0,r0[0x6]

800052e4 <_fflush_r>:
800052e4:	d4 21       	pushm	r4-r7,lr
800052e6:	16 97       	mov	r7,r11
800052e8:	18 96       	mov	r6,r12
800052ea:	76 48       	ld.w	r8,r11[0x10]
800052ec:	58 08       	cp.w	r8,0
800052ee:	c7 c0       	breq	800053e6 <_fflush_r+0x102>
800052f0:	58 0c       	cp.w	r12,0
800052f2:	c0 50       	breq	800052fc <_fflush_r+0x18>
800052f4:	78 68       	ld.w	r8,r12[0x18]
800052f6:	58 08       	cp.w	r8,0
800052f8:	c0 21       	brne	800052fc <_fflush_r+0x18>
800052fa:	cd 1c       	rcall	8000549c <__sinit>
800052fc:	4b b8       	lddpc	r8,800053e8 <_fflush_r+0x104>
800052fe:	10 37       	cp.w	r7,r8
80005300:	c0 31       	brne	80005306 <_fflush_r+0x22>
80005302:	6c 07       	ld.w	r7,r6[0x0]
80005304:	c0 a8       	rjmp	80005318 <_fflush_r+0x34>
80005306:	4b a8       	lddpc	r8,800053ec <_fflush_r+0x108>
80005308:	10 37       	cp.w	r7,r8
8000530a:	c0 31       	brne	80005310 <_fflush_r+0x2c>
8000530c:	6c 17       	ld.w	r7,r6[0x4]
8000530e:	c0 58       	rjmp	80005318 <_fflush_r+0x34>
80005310:	4b 88       	lddpc	r8,800053f0 <_fflush_r+0x10c>
80005312:	10 37       	cp.w	r7,r8
80005314:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80005318:	8e 6a       	ld.sh	r10,r7[0xc]
8000531a:	14 98       	mov	r8,r10
8000531c:	ed ba 00 03 	bld	r10,0x3
80005320:	c4 20       	breq	800053a4 <_fflush_r+0xc0>
80005322:	ab ba       	sbr	r10,0xb
80005324:	ae 6a       	st.h	r7[0xc],r10
80005326:	6e 18       	ld.w	r8,r7[0x4]
80005328:	58 08       	cp.w	r8,0
8000532a:	e0 89 00 06 	brgt	80005336 <_fflush_r+0x52>
8000532e:	6f 08       	ld.w	r8,r7[0x40]
80005330:	58 08       	cp.w	r8,0
80005332:	e0 8a 00 5a 	brle	800053e6 <_fflush_r+0x102>
80005336:	6e b8       	ld.w	r8,r7[0x2c]
80005338:	58 08       	cp.w	r8,0
8000533a:	c5 60       	breq	800053e6 <_fflush_r+0x102>
8000533c:	e2 1a 10 00 	andl	r10,0x1000,COH
80005340:	c0 30       	breq	80005346 <_fflush_r+0x62>
80005342:	6f 55       	ld.w	r5,r7[0x54]
80005344:	c0 f8       	rjmp	80005362 <_fflush_r+0x7e>
80005346:	30 19       	mov	r9,1
80005348:	6e 8b       	ld.w	r11,r7[0x20]
8000534a:	0c 9c       	mov	r12,r6
8000534c:	5d 18       	icall	r8
8000534e:	18 95       	mov	r5,r12
80005350:	5b fc       	cp.w	r12,-1
80005352:	c0 81       	brne	80005362 <_fflush_r+0x7e>
80005354:	6c 38       	ld.w	r8,r6[0xc]
80005356:	59 d8       	cp.w	r8,29
80005358:	c4 70       	breq	800053e6 <_fflush_r+0x102>
8000535a:	8e 68       	ld.sh	r8,r7[0xc]
8000535c:	a7 a8       	sbr	r8,0x6
8000535e:	ae 68       	st.h	r7[0xc],r8
80005360:	d8 22       	popm	r4-r7,pc
80005362:	8e 68       	ld.sh	r8,r7[0xc]
80005364:	ed b8 00 02 	bld	r8,0x2
80005368:	c0 91       	brne	8000537a <_fflush_r+0x96>
8000536a:	6e 18       	ld.w	r8,r7[0x4]
8000536c:	10 15       	sub	r5,r8
8000536e:	6e d8       	ld.w	r8,r7[0x34]
80005370:	58 08       	cp.w	r8,0
80005372:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80005376:	eb d8 e1 15 	subne	r5,r5,r8
8000537a:	6e b8       	ld.w	r8,r7[0x2c]
8000537c:	0c 9c       	mov	r12,r6
8000537e:	30 09       	mov	r9,0
80005380:	0a 9a       	mov	r10,r5
80005382:	6e 8b       	ld.w	r11,r7[0x20]
80005384:	5d 18       	icall	r8
80005386:	8e 68       	ld.sh	r8,r7[0xc]
80005388:	0a 3c       	cp.w	r12,r5
8000538a:	c2 61       	brne	800053d6 <_fflush_r+0xf2>
8000538c:	ab d8       	cbr	r8,0xb
8000538e:	30 0c       	mov	r12,0
80005390:	6e 49       	ld.w	r9,r7[0x10]
80005392:	ae 68       	st.h	r7[0xc],r8
80005394:	8f 1c       	st.w	r7[0x4],r12
80005396:	8f 09       	st.w	r7[0x0],r9
80005398:	ed b8 00 0c 	bld	r8,0xc
8000539c:	c2 51       	brne	800053e6 <_fflush_r+0x102>
8000539e:	ef 45 00 54 	st.w	r7[84],r5
800053a2:	d8 22       	popm	r4-r7,pc
800053a4:	6e 45       	ld.w	r5,r7[0x10]
800053a6:	58 05       	cp.w	r5,0
800053a8:	c1 f0       	breq	800053e6 <_fflush_r+0x102>
800053aa:	6e 04       	ld.w	r4,r7[0x0]
800053ac:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800053b0:	8f 05       	st.w	r7[0x0],r5
800053b2:	f9 b8 01 00 	movne	r8,0
800053b6:	ef f8 00 05 	ld.weq	r8,r7[0x14]
800053ba:	0a 14       	sub	r4,r5
800053bc:	8f 28       	st.w	r7[0x8],r8
800053be:	c1 18       	rjmp	800053e0 <_fflush_r+0xfc>
800053c0:	08 99       	mov	r9,r4
800053c2:	0a 9a       	mov	r10,r5
800053c4:	6e a8       	ld.w	r8,r7[0x28]
800053c6:	6e 8b       	ld.w	r11,r7[0x20]
800053c8:	0c 9c       	mov	r12,r6
800053ca:	5d 18       	icall	r8
800053cc:	18 14       	sub	r4,r12
800053ce:	58 0c       	cp.w	r12,0
800053d0:	e0 89 00 07 	brgt	800053de <_fflush_r+0xfa>
800053d4:	8e 68       	ld.sh	r8,r7[0xc]
800053d6:	a7 a8       	sbr	r8,0x6
800053d8:	3f fc       	mov	r12,-1
800053da:	ae 68       	st.h	r7[0xc],r8
800053dc:	d8 22       	popm	r4-r7,pc
800053de:	18 05       	add	r5,r12
800053e0:	58 04       	cp.w	r4,0
800053e2:	fe 99 ff ef 	brgt	800053c0 <_fflush_r+0xdc>
800053e6:	d8 2a       	popm	r4-r7,pc,r12=0
800053e8:	80 00       	ld.sh	r0,r0[0x0]
800053ea:	5d 1c       	icall	r12
800053ec:	80 00       	ld.sh	r0,r0[0x0]
800053ee:	5d 3c       	musfr	r12
800053f0:	80 00       	ld.sh	r0,r0[0x0]
800053f2:	5d 5c       	*unknown*

800053f4 <__sfp_lock_acquire>:
800053f4:	5e fc       	retal	r12

800053f6 <__sfp_lock_release>:
800053f6:	5e fc       	retal	r12

800053f8 <_cleanup_r>:
800053f8:	d4 01       	pushm	lr
800053fa:	fe cb fa de 	sub	r11,pc,-1314
800053fe:	cb 3d       	rcall	80005764 <_fwalk>
80005400:	d8 02       	popm	pc
80005402:	d7 03       	nop

80005404 <__sfmoreglue>:
80005404:	d4 21       	pushm	r4-r7,lr
80005406:	16 95       	mov	r5,r11
80005408:	f6 06 10 5c 	mul	r6,r11,92
8000540c:	ec cb ff f4 	sub	r11,r6,-12
80005410:	fe b0 fb 96 	rcall	80004b3c <_malloc_r>
80005414:	18 97       	mov	r7,r12
80005416:	c0 90       	breq	80005428 <__sfmoreglue+0x24>
80005418:	99 15       	st.w	r12[0x4],r5
8000541a:	30 0b       	mov	r11,0
8000541c:	2f 4c       	sub	r12,-12
8000541e:	0c 9a       	mov	r10,r6
80005420:	8f 2c       	st.w	r7[0x8],r12
80005422:	8f 0b       	st.w	r7[0x0],r11
80005424:	fe b0 fd a6 	rcall	80004f70 <memset>
80005428:	0e 9c       	mov	r12,r7
8000542a:	d8 22       	popm	r4-r7,pc

8000542c <__sfp>:
8000542c:	d4 21       	pushm	r4-r7,lr
8000542e:	49 b8       	lddpc	r8,80005498 <__sfp+0x6c>
80005430:	18 96       	mov	r6,r12
80005432:	70 07       	ld.w	r7,r8[0x0]
80005434:	6e 68       	ld.w	r8,r7[0x18]
80005436:	58 08       	cp.w	r8,0
80005438:	c0 31       	brne	8000543e <__sfp+0x12>
8000543a:	0e 9c       	mov	r12,r7
8000543c:	c3 0c       	rcall	8000549c <__sinit>
8000543e:	ee c7 ff 28 	sub	r7,r7,-216
80005442:	30 05       	mov	r5,0
80005444:	6e 2c       	ld.w	r12,r7[0x8]
80005446:	6e 18       	ld.w	r8,r7[0x4]
80005448:	c0 68       	rjmp	80005454 <__sfp+0x28>
8000544a:	98 69       	ld.sh	r9,r12[0xc]
8000544c:	ea 09 19 00 	cp.h	r9,r5
80005450:	c1 10       	breq	80005472 <__sfp+0x46>
80005452:	2a 4c       	sub	r12,-92
80005454:	20 18       	sub	r8,1
80005456:	cf a7       	brpl	8000544a <__sfp+0x1e>
80005458:	6e 08       	ld.w	r8,r7[0x0]
8000545a:	58 08       	cp.w	r8,0
8000545c:	c0 61       	brne	80005468 <__sfp+0x3c>
8000545e:	30 4b       	mov	r11,4
80005460:	0c 9c       	mov	r12,r6
80005462:	cd 1f       	rcall	80005404 <__sfmoreglue>
80005464:	8f 0c       	st.w	r7[0x0],r12
80005466:	c0 30       	breq	8000546c <__sfp+0x40>
80005468:	6e 07       	ld.w	r7,r7[0x0]
8000546a:	ce db       	rjmp	80005444 <__sfp+0x18>
8000546c:	30 c8       	mov	r8,12
8000546e:	8d 38       	st.w	r6[0xc],r8
80005470:	d8 22       	popm	r4-r7,pc
80005472:	30 08       	mov	r8,0
80005474:	f9 48 00 4c 	st.w	r12[76],r8
80005478:	99 08       	st.w	r12[0x0],r8
8000547a:	99 28       	st.w	r12[0x8],r8
8000547c:	99 18       	st.w	r12[0x4],r8
8000547e:	99 48       	st.w	r12[0x10],r8
80005480:	99 58       	st.w	r12[0x14],r8
80005482:	99 68       	st.w	r12[0x18],r8
80005484:	99 d8       	st.w	r12[0x34],r8
80005486:	99 e8       	st.w	r12[0x38],r8
80005488:	f9 48 00 48 	st.w	r12[72],r8
8000548c:	3f f8       	mov	r8,-1
8000548e:	b8 78       	st.h	r12[0xe],r8
80005490:	30 18       	mov	r8,1
80005492:	b8 68       	st.h	r12[0xc],r8
80005494:	d8 22       	popm	r4-r7,pc
80005496:	d7 03       	nop
80005498:	80 00       	ld.sh	r0,r0[0x0]
8000549a:	5d 18       	icall	r8

8000549c <__sinit>:
8000549c:	d4 21       	pushm	r4-r7,lr
8000549e:	18 96       	mov	r6,r12
800054a0:	78 67       	ld.w	r7,r12[0x18]
800054a2:	58 07       	cp.w	r7,0
800054a4:	c4 91       	brne	80005536 <__sinit+0x9a>
800054a6:	fe c8 00 ae 	sub	r8,pc,174
800054aa:	30 15       	mov	r5,1
800054ac:	99 a8       	st.w	r12[0x28],r8
800054ae:	f9 47 00 d8 	st.w	r12[216],r7
800054b2:	f9 47 00 dc 	st.w	r12[220],r7
800054b6:	f9 47 00 e0 	st.w	r12[224],r7
800054ba:	99 65       	st.w	r12[0x18],r5
800054bc:	cb 8f       	rcall	8000542c <__sfp>
800054be:	8d 0c       	st.w	r6[0x0],r12
800054c0:	0c 9c       	mov	r12,r6
800054c2:	cb 5f       	rcall	8000542c <__sfp>
800054c4:	8d 1c       	st.w	r6[0x4],r12
800054c6:	0c 9c       	mov	r12,r6
800054c8:	cb 2f       	rcall	8000542c <__sfp>
800054ca:	6c 09       	ld.w	r9,r6[0x0]
800054cc:	30 48       	mov	r8,4
800054ce:	93 07       	st.w	r9[0x0],r7
800054d0:	b2 68       	st.h	r9[0xc],r8
800054d2:	93 17       	st.w	r9[0x4],r7
800054d4:	93 27       	st.w	r9[0x8],r7
800054d6:	6c 18       	ld.w	r8,r6[0x4]
800054d8:	b2 77       	st.h	r9[0xe],r7
800054da:	93 47       	st.w	r9[0x10],r7
800054dc:	93 57       	st.w	r9[0x14],r7
800054de:	93 67       	st.w	r9[0x18],r7
800054e0:	93 89       	st.w	r9[0x20],r9
800054e2:	91 07       	st.w	r8[0x0],r7
800054e4:	91 17       	st.w	r8[0x4],r7
800054e6:	91 27       	st.w	r8[0x8],r7
800054e8:	fe ce fc e8 	sub	lr,pc,-792
800054ec:	fe cb fd 18 	sub	r11,pc,-744
800054f0:	93 9e       	st.w	r9[0x24],lr
800054f2:	93 ab       	st.w	r9[0x28],r11
800054f4:	fe ca fd 40 	sub	r10,pc,-704
800054f8:	fe c4 fd 4c 	sub	r4,pc,-692
800054fc:	93 ba       	st.w	r9[0x2c],r10
800054fe:	93 c4       	st.w	r9[0x30],r4
80005500:	30 99       	mov	r9,9
80005502:	b0 69       	st.h	r8[0xc],r9
80005504:	b0 75       	st.h	r8[0xe],r5
80005506:	91 c4       	st.w	r8[0x30],r4
80005508:	91 47       	st.w	r8[0x10],r7
8000550a:	91 57       	st.w	r8[0x14],r7
8000550c:	91 67       	st.w	r8[0x18],r7
8000550e:	91 88       	st.w	r8[0x20],r8
80005510:	91 9e       	st.w	r8[0x24],lr
80005512:	91 ab       	st.w	r8[0x28],r11
80005514:	91 ba       	st.w	r8[0x2c],r10
80005516:	8d 2c       	st.w	r6[0x8],r12
80005518:	31 28       	mov	r8,18
8000551a:	99 07       	st.w	r12[0x0],r7
8000551c:	b8 68       	st.h	r12[0xc],r8
8000551e:	99 17       	st.w	r12[0x4],r7
80005520:	99 27       	st.w	r12[0x8],r7
80005522:	30 28       	mov	r8,2
80005524:	b8 78       	st.h	r12[0xe],r8
80005526:	99 c4       	st.w	r12[0x30],r4
80005528:	99 67       	st.w	r12[0x18],r7
8000552a:	99 9e       	st.w	r12[0x24],lr
8000552c:	99 ab       	st.w	r12[0x28],r11
8000552e:	99 ba       	st.w	r12[0x2c],r10
80005530:	99 47       	st.w	r12[0x10],r7
80005532:	99 57       	st.w	r12[0x14],r7
80005534:	99 8c       	st.w	r12[0x20],r12
80005536:	d8 22       	popm	r4-r7,pc

80005538 <_malloc_trim_r>:
80005538:	d4 21       	pushm	r4-r7,lr
8000553a:	16 95       	mov	r5,r11
8000553c:	18 97       	mov	r7,r12
8000553e:	fe b0 f6 d9 	rcall	800042f0 <__malloc_lock>
80005542:	4a 24       	lddpc	r4,800055c8 <_malloc_trim_r+0x90>
80005544:	68 28       	ld.w	r8,r4[0x8]
80005546:	70 16       	ld.w	r6,r8[0x4]
80005548:	e0 16 ff fc 	andl	r6,0xfffc
8000554c:	ec c8 ff 91 	sub	r8,r6,-111
80005550:	f0 05 01 05 	sub	r5,r8,r5
80005554:	e0 15 ff 80 	andl	r5,0xff80
80005558:	ea c5 00 80 	sub	r5,r5,128
8000555c:	e0 45 00 7f 	cp.w	r5,127
80005560:	e0 8a 00 23 	brle	800055a6 <_malloc_trim_r+0x6e>
80005564:	30 0b       	mov	r11,0
80005566:	0e 9c       	mov	r12,r7
80005568:	fe b0 fd 0c 	rcall	80004f80 <_sbrk_r>
8000556c:	68 28       	ld.w	r8,r4[0x8]
8000556e:	0c 08       	add	r8,r6
80005570:	10 3c       	cp.w	r12,r8
80005572:	c1 a1       	brne	800055a6 <_malloc_trim_r+0x6e>
80005574:	ea 0b 11 00 	rsub	r11,r5,0
80005578:	0e 9c       	mov	r12,r7
8000557a:	fe b0 fd 03 	rcall	80004f80 <_sbrk_r>
8000557e:	5b fc       	cp.w	r12,-1
80005580:	c1 71       	brne	800055ae <_malloc_trim_r+0x76>
80005582:	30 0b       	mov	r11,0
80005584:	0e 9c       	mov	r12,r7
80005586:	fe b0 fc fd 	rcall	80004f80 <_sbrk_r>
8000558a:	68 28       	ld.w	r8,r4[0x8]
8000558c:	f8 08 01 09 	sub	r9,r12,r8
80005590:	58 f9       	cp.w	r9,15
80005592:	e0 8a 00 0a 	brle	800055a6 <_malloc_trim_r+0x6e>
80005596:	a1 a9       	sbr	r9,0x0
80005598:	91 19       	st.w	r8[0x4],r9
8000559a:	48 d8       	lddpc	r8,800055cc <_malloc_trim_r+0x94>
8000559c:	70 09       	ld.w	r9,r8[0x0]
8000559e:	48 d8       	lddpc	r8,800055d0 <_malloc_trim_r+0x98>
800055a0:	f8 09 01 09 	sub	r9,r12,r9
800055a4:	91 09       	st.w	r8[0x0],r9
800055a6:	0e 9c       	mov	r12,r7
800055a8:	fe b0 f6 aa 	rcall	800042fc <__malloc_unlock>
800055ac:	d8 2a       	popm	r4-r7,pc,r12=0
800055ae:	68 28       	ld.w	r8,r4[0x8]
800055b0:	0a 16       	sub	r6,r5
800055b2:	a1 a6       	sbr	r6,0x0
800055b4:	91 16       	st.w	r8[0x4],r6
800055b6:	48 78       	lddpc	r8,800055d0 <_malloc_trim_r+0x98>
800055b8:	70 09       	ld.w	r9,r8[0x0]
800055ba:	0a 19       	sub	r9,r5
800055bc:	0e 9c       	mov	r12,r7
800055be:	91 09       	st.w	r8[0x0],r9
800055c0:	fe b0 f6 9e 	rcall	800042fc <__malloc_unlock>
800055c4:	da 2a       	popm	r4-r7,pc,r12=1
800055c6:	d7 03       	nop
800055c8:	00 00       	add	r0,r0
800055ca:	01 e4       	ld.ub	r4,r0[0x6]
800055cc:	00 00       	add	r0,r0
800055ce:	05 f0       	ld.ub	r0,r2[0x7]
800055d0:	00 00       	add	r0,r0
800055d2:	09 e4       	ld.ub	r4,r4[0x6]

800055d4 <_free_r>:
800055d4:	d4 21       	pushm	r4-r7,lr
800055d6:	16 96       	mov	r6,r11
800055d8:	18 97       	mov	r7,r12
800055da:	58 0b       	cp.w	r11,0
800055dc:	e0 80 00 c2 	breq	80005760 <_free_r+0x18c>
800055e0:	fe b0 f6 88 	rcall	800042f0 <__malloc_lock>
800055e4:	20 86       	sub	r6,8
800055e6:	4c ba       	lddpc	r10,80005710 <_free_r+0x13c>
800055e8:	6c 18       	ld.w	r8,r6[0x4]
800055ea:	74 2e       	ld.w	lr,r10[0x8]
800055ec:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800055f0:	a1 c8       	cbr	r8,0x0
800055f2:	ec 08 00 09 	add	r9,r6,r8
800055f6:	72 1b       	ld.w	r11,r9[0x4]
800055f8:	e0 1b ff fc 	andl	r11,0xfffc
800055fc:	1c 39       	cp.w	r9,lr
800055fe:	c1 c1       	brne	80005636 <_free_r+0x62>
80005600:	f6 08 00 08 	add	r8,r11,r8
80005604:	58 0c       	cp.w	r12,0
80005606:	c0 81       	brne	80005616 <_free_r+0x42>
80005608:	6c 09       	ld.w	r9,r6[0x0]
8000560a:	12 16       	sub	r6,r9
8000560c:	12 08       	add	r8,r9
8000560e:	6c 3b       	ld.w	r11,r6[0xc]
80005610:	6c 29       	ld.w	r9,r6[0x8]
80005612:	97 29       	st.w	r11[0x8],r9
80005614:	93 3b       	st.w	r9[0xc],r11
80005616:	10 99       	mov	r9,r8
80005618:	95 26       	st.w	r10[0x8],r6
8000561a:	a1 a9       	sbr	r9,0x0
8000561c:	8d 19       	st.w	r6[0x4],r9
8000561e:	4b e9       	lddpc	r9,80005714 <_free_r+0x140>
80005620:	72 09       	ld.w	r9,r9[0x0]
80005622:	12 38       	cp.w	r8,r9
80005624:	c0 53       	brcs	8000562e <_free_r+0x5a>
80005626:	4b d8       	lddpc	r8,80005718 <_free_r+0x144>
80005628:	0e 9c       	mov	r12,r7
8000562a:	70 0b       	ld.w	r11,r8[0x0]
8000562c:	c8 6f       	rcall	80005538 <_malloc_trim_r>
8000562e:	0e 9c       	mov	r12,r7
80005630:	fe b0 f6 66 	rcall	800042fc <__malloc_unlock>
80005634:	d8 22       	popm	r4-r7,pc
80005636:	93 1b       	st.w	r9[0x4],r11
80005638:	58 0c       	cp.w	r12,0
8000563a:	c0 30       	breq	80005640 <_free_r+0x6c>
8000563c:	30 0c       	mov	r12,0
8000563e:	c1 08       	rjmp	8000565e <_free_r+0x8a>
80005640:	6c 0e       	ld.w	lr,r6[0x0]
80005642:	f4 c5 ff f8 	sub	r5,r10,-8
80005646:	1c 16       	sub	r6,lr
80005648:	1c 08       	add	r8,lr
8000564a:	6c 2e       	ld.w	lr,r6[0x8]
8000564c:	0a 3e       	cp.w	lr,r5
8000564e:	f9 bc 00 01 	moveq	r12,1
80005652:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80005656:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000565a:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000565e:	f2 0b 00 0e 	add	lr,r9,r11
80005662:	7c 1e       	ld.w	lr,lr[0x4]
80005664:	ed be 00 00 	bld	lr,0x0
80005668:	c1 30       	breq	8000568e <_free_r+0xba>
8000566a:	16 08       	add	r8,r11
8000566c:	58 0c       	cp.w	r12,0
8000566e:	c0 c1       	brne	80005686 <_free_r+0xb2>
80005670:	4a 8e       	lddpc	lr,80005710 <_free_r+0x13c>
80005672:	72 2b       	ld.w	r11,r9[0x8]
80005674:	2f 8e       	sub	lr,-8
80005676:	1c 3b       	cp.w	r11,lr
80005678:	c0 71       	brne	80005686 <_free_r+0xb2>
8000567a:	97 36       	st.w	r11[0xc],r6
8000567c:	97 26       	st.w	r11[0x8],r6
8000567e:	8d 2b       	st.w	r6[0x8],r11
80005680:	8d 3b       	st.w	r6[0xc],r11
80005682:	30 1c       	mov	r12,1
80005684:	c0 58       	rjmp	8000568e <_free_r+0xba>
80005686:	72 2b       	ld.w	r11,r9[0x8]
80005688:	72 39       	ld.w	r9,r9[0xc]
8000568a:	93 2b       	st.w	r9[0x8],r11
8000568c:	97 39       	st.w	r11[0xc],r9
8000568e:	10 99       	mov	r9,r8
80005690:	ec 08 09 08 	st.w	r6[r8],r8
80005694:	a1 a9       	sbr	r9,0x0
80005696:	8d 19       	st.w	r6[0x4],r9
80005698:	58 0c       	cp.w	r12,0
8000569a:	c6 01       	brne	8000575a <_free_r+0x186>
8000569c:	e0 48 01 ff 	cp.w	r8,511
800056a0:	e0 8b 00 13 	brhi	800056c6 <_free_r+0xf2>
800056a4:	a3 98       	lsr	r8,0x3
800056a6:	f4 08 00 39 	add	r9,r10,r8<<0x3
800056aa:	72 2b       	ld.w	r11,r9[0x8]
800056ac:	8d 39       	st.w	r6[0xc],r9
800056ae:	8d 2b       	st.w	r6[0x8],r11
800056b0:	97 36       	st.w	r11[0xc],r6
800056b2:	93 26       	st.w	r9[0x8],r6
800056b4:	a3 48       	asr	r8,0x2
800056b6:	74 19       	ld.w	r9,r10[0x4]
800056b8:	30 1b       	mov	r11,1
800056ba:	f6 08 09 48 	lsl	r8,r11,r8
800056be:	f3 e8 10 08 	or	r8,r9,r8
800056c2:	95 18       	st.w	r10[0x4],r8
800056c4:	c4 b8       	rjmp	8000575a <_free_r+0x186>
800056c6:	f0 0b 16 09 	lsr	r11,r8,0x9
800056ca:	58 4b       	cp.w	r11,4
800056cc:	e0 8b 00 06 	brhi	800056d8 <_free_r+0x104>
800056d0:	f0 0b 16 06 	lsr	r11,r8,0x6
800056d4:	2c 8b       	sub	r11,-56
800056d6:	c2 68       	rjmp	80005722 <_free_r+0x14e>
800056d8:	59 4b       	cp.w	r11,20
800056da:	e0 8b 00 04 	brhi	800056e2 <_free_r+0x10e>
800056de:	2a 5b       	sub	r11,-91
800056e0:	c2 18       	rjmp	80005722 <_free_r+0x14e>
800056e2:	e0 4b 00 54 	cp.w	r11,84
800056e6:	e0 8b 00 06 	brhi	800056f2 <_free_r+0x11e>
800056ea:	f0 0b 16 0c 	lsr	r11,r8,0xc
800056ee:	29 2b       	sub	r11,-110
800056f0:	c1 98       	rjmp	80005722 <_free_r+0x14e>
800056f2:	e0 4b 01 54 	cp.w	r11,340
800056f6:	e0 8b 00 06 	brhi	80005702 <_free_r+0x12e>
800056fa:	f0 0b 16 0f 	lsr	r11,r8,0xf
800056fe:	28 9b       	sub	r11,-119
80005700:	c1 18       	rjmp	80005722 <_free_r+0x14e>
80005702:	e0 4b 05 54 	cp.w	r11,1364
80005706:	e0 88 00 0b 	brls	8000571c <_free_r+0x148>
8000570a:	37 eb       	mov	r11,126
8000570c:	c0 b8       	rjmp	80005722 <_free_r+0x14e>
8000570e:	d7 03       	nop
80005710:	00 00       	add	r0,r0
80005712:	01 e4       	ld.ub	r4,r0[0x6]
80005714:	00 00       	add	r0,r0
80005716:	05 ec       	ld.ub	r12,r2[0x6]
80005718:	00 00       	add	r0,r0
8000571a:	09 e0       	ld.ub	r0,r4[0x6]
8000571c:	f0 0b 16 12 	lsr	r11,r8,0x12
80005720:	28 4b       	sub	r11,-124
80005722:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80005726:	78 29       	ld.w	r9,r12[0x8]
80005728:	18 39       	cp.w	r9,r12
8000572a:	c0 e1       	brne	80005746 <_free_r+0x172>
8000572c:	74 18       	ld.w	r8,r10[0x4]
8000572e:	a3 4b       	asr	r11,0x2
80005730:	30 1c       	mov	r12,1
80005732:	f8 0b 09 4b 	lsl	r11,r12,r11
80005736:	f1 eb 10 0b 	or	r11,r8,r11
8000573a:	12 98       	mov	r8,r9
8000573c:	95 1b       	st.w	r10[0x4],r11
8000573e:	c0 a8       	rjmp	80005752 <_free_r+0x17e>
80005740:	72 29       	ld.w	r9,r9[0x8]
80005742:	18 39       	cp.w	r9,r12
80005744:	c0 60       	breq	80005750 <_free_r+0x17c>
80005746:	72 1a       	ld.w	r10,r9[0x4]
80005748:	e0 1a ff fc 	andl	r10,0xfffc
8000574c:	14 38       	cp.w	r8,r10
8000574e:	cf 93       	brcs	80005740 <_free_r+0x16c>
80005750:	72 38       	ld.w	r8,r9[0xc]
80005752:	8d 38       	st.w	r6[0xc],r8
80005754:	8d 29       	st.w	r6[0x8],r9
80005756:	93 36       	st.w	r9[0xc],r6
80005758:	91 26       	st.w	r8[0x8],r6
8000575a:	0e 9c       	mov	r12,r7
8000575c:	fe b0 f5 d0 	rcall	800042fc <__malloc_unlock>
80005760:	d8 22       	popm	r4-r7,pc
80005762:	d7 03       	nop

80005764 <_fwalk>:
80005764:	d4 31       	pushm	r0-r7,lr
80005766:	30 05       	mov	r5,0
80005768:	16 91       	mov	r1,r11
8000576a:	f8 c7 ff 28 	sub	r7,r12,-216
8000576e:	0a 92       	mov	r2,r5
80005770:	c4 2e       	rcall	800053f4 <__sfp_lock_acquire>
80005772:	3f f3       	mov	r3,-1
80005774:	c1 68       	rjmp	800057a0 <_fwalk+0x3c>
80005776:	6e 26       	ld.w	r6,r7[0x8]
80005778:	6e 14       	ld.w	r4,r7[0x4]
8000577a:	2f 46       	sub	r6,-12
8000577c:	c0 c8       	rjmp	80005794 <_fwalk+0x30>
8000577e:	8c 08       	ld.sh	r8,r6[0x0]
80005780:	e4 08 19 00 	cp.h	r8,r2
80005784:	c0 70       	breq	80005792 <_fwalk+0x2e>
80005786:	8c 18       	ld.sh	r8,r6[0x2]
80005788:	e6 08 19 00 	cp.h	r8,r3
8000578c:	c0 30       	breq	80005792 <_fwalk+0x2e>
8000578e:	5d 11       	icall	r1
80005790:	18 45       	or	r5,r12
80005792:	2a 46       	sub	r6,-92
80005794:	20 14       	sub	r4,1
80005796:	ec cc 00 0c 	sub	r12,r6,12
8000579a:	58 04       	cp.w	r4,0
8000579c:	cf 14       	brge	8000577e <_fwalk+0x1a>
8000579e:	6e 07       	ld.w	r7,r7[0x0]
800057a0:	58 07       	cp.w	r7,0
800057a2:	ce a1       	brne	80005776 <_fwalk+0x12>
800057a4:	c2 9e       	rcall	800053f6 <__sfp_lock_release>
800057a6:	0a 9c       	mov	r12,r5
800057a8:	d8 32       	popm	r0-r7,pc
800057aa:	d7 03       	nop

800057ac <__sclose>:
800057ac:	d4 01       	pushm	lr
800057ae:	96 7b       	ld.sh	r11,r11[0xe]
800057b0:	c4 ac       	rcall	80005844 <_close_r>
800057b2:	d8 02       	popm	pc

800057b4 <__sseek>:
800057b4:	d4 21       	pushm	r4-r7,lr
800057b6:	16 97       	mov	r7,r11
800057b8:	96 7b       	ld.sh	r11,r11[0xe]
800057ba:	cb 9c       	rcall	8000592c <_lseek_r>
800057bc:	8e 68       	ld.sh	r8,r7[0xc]
800057be:	10 99       	mov	r9,r8
800057c0:	ad c8       	cbr	r8,0xc
800057c2:	ad a9       	sbr	r9,0xc
800057c4:	5b fc       	cp.w	r12,-1
800057c6:	ef f8 0c 06 	st.heq	r7[0xc],r8
800057ca:	ef f9 1c 06 	st.hne	r7[0xc],r9
800057ce:	ef fc 1a 15 	st.wne	r7[0x54],r12
800057d2:	d8 22       	popm	r4-r7,pc

800057d4 <__swrite>:
800057d4:	d4 21       	pushm	r4-r7,lr
800057d6:	96 68       	ld.sh	r8,r11[0xc]
800057d8:	16 97       	mov	r7,r11
800057da:	14 95       	mov	r5,r10
800057dc:	12 94       	mov	r4,r9
800057de:	e2 18 01 00 	andl	r8,0x100,COH
800057e2:	18 96       	mov	r6,r12
800057e4:	c0 50       	breq	800057ee <__swrite+0x1a>
800057e6:	30 29       	mov	r9,2
800057e8:	30 0a       	mov	r10,0
800057ea:	96 7b       	ld.sh	r11,r11[0xe]
800057ec:	ca 0c       	rcall	8000592c <_lseek_r>
800057ee:	8e 68       	ld.sh	r8,r7[0xc]
800057f0:	ad c8       	cbr	r8,0xc
800057f2:	08 99       	mov	r9,r4
800057f4:	0a 9a       	mov	r10,r5
800057f6:	8e 7b       	ld.sh	r11,r7[0xe]
800057f8:	0c 9c       	mov	r12,r6
800057fa:	ae 68       	st.h	r7[0xc],r8
800057fc:	c1 0c       	rcall	8000581c <_write_r>
800057fe:	d8 22       	popm	r4-r7,pc

80005800 <__sread>:
80005800:	d4 21       	pushm	r4-r7,lr
80005802:	16 97       	mov	r7,r11
80005804:	96 7b       	ld.sh	r11,r11[0xe]
80005806:	ca 7c       	rcall	80005954 <_read_r>
80005808:	c0 65       	brlt	80005814 <__sread+0x14>
8000580a:	6f 58       	ld.w	r8,r7[0x54]
8000580c:	18 08       	add	r8,r12
8000580e:	ef 48 00 54 	st.w	r7[84],r8
80005812:	d8 22       	popm	r4-r7,pc
80005814:	8e 68       	ld.sh	r8,r7[0xc]
80005816:	ad c8       	cbr	r8,0xc
80005818:	ae 68       	st.h	r7[0xc],r8
8000581a:	d8 22       	popm	r4-r7,pc

8000581c <_write_r>:
8000581c:	d4 21       	pushm	r4-r7,lr
8000581e:	16 98       	mov	r8,r11
80005820:	18 97       	mov	r7,r12
80005822:	10 9c       	mov	r12,r8
80005824:	30 08       	mov	r8,0
80005826:	14 9b       	mov	r11,r10
80005828:	48 66       	lddpc	r6,80005840 <_write_r+0x24>
8000582a:	12 9a       	mov	r10,r9
8000582c:	8d 08       	st.w	r6[0x0],r8
8000582e:	fe b0 f3 d5 	rcall	80003fd8 <_write>
80005832:	5b fc       	cp.w	r12,-1
80005834:	c0 51       	brne	8000583e <_write_r+0x22>
80005836:	6c 08       	ld.w	r8,r6[0x0]
80005838:	58 08       	cp.w	r8,0
8000583a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000583e:	d8 22       	popm	r4-r7,pc
80005840:	00 00       	add	r0,r0
80005842:	0a 3c       	cp.w	r12,r5

80005844 <_close_r>:
80005844:	d4 21       	pushm	r4-r7,lr
80005846:	30 08       	mov	r8,0
80005848:	18 97       	mov	r7,r12
8000584a:	48 76       	lddpc	r6,80005864 <_close_r+0x20>
8000584c:	16 9c       	mov	r12,r11
8000584e:	8d 08       	st.w	r6[0x0],r8
80005850:	fe b0 fc 52 	rcall	800050f4 <_close>
80005854:	5b fc       	cp.w	r12,-1
80005856:	c0 51       	brne	80005860 <_close_r+0x1c>
80005858:	6c 08       	ld.w	r8,r6[0x0]
8000585a:	58 08       	cp.w	r8,0
8000585c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005860:	d8 22       	popm	r4-r7,pc
80005862:	d7 03       	nop
80005864:	00 00       	add	r0,r0
80005866:	0a 3c       	cp.w	r12,r5

80005868 <_fclose_r>:
80005868:	d4 21       	pushm	r4-r7,lr
8000586a:	18 96       	mov	r6,r12
8000586c:	16 97       	mov	r7,r11
8000586e:	58 0b       	cp.w	r11,0
80005870:	c0 31       	brne	80005876 <_fclose_r+0xe>
80005872:	16 95       	mov	r5,r11
80005874:	c4 c8       	rjmp	8000590c <_fclose_r+0xa4>
80005876:	fe b0 fd bf 	rcall	800053f4 <__sfp_lock_acquire>
8000587a:	58 06       	cp.w	r6,0
8000587c:	c0 60       	breq	80005888 <_fclose_r+0x20>
8000587e:	6c 68       	ld.w	r8,r6[0x18]
80005880:	58 08       	cp.w	r8,0
80005882:	c0 31       	brne	80005888 <_fclose_r+0x20>
80005884:	0c 9c       	mov	r12,r6
80005886:	c0 be       	rcall	8000549c <__sinit>
80005888:	4a 28       	lddpc	r8,80005910 <_fclose_r+0xa8>
8000588a:	10 37       	cp.w	r7,r8
8000588c:	c0 31       	brne	80005892 <_fclose_r+0x2a>
8000588e:	6c 07       	ld.w	r7,r6[0x0]
80005890:	c0 a8       	rjmp	800058a4 <_fclose_r+0x3c>
80005892:	4a 18       	lddpc	r8,80005914 <_fclose_r+0xac>
80005894:	10 37       	cp.w	r7,r8
80005896:	c0 31       	brne	8000589c <_fclose_r+0x34>
80005898:	6c 17       	ld.w	r7,r6[0x4]
8000589a:	c0 58       	rjmp	800058a4 <_fclose_r+0x3c>
8000589c:	49 f8       	lddpc	r8,80005918 <_fclose_r+0xb0>
8000589e:	10 37       	cp.w	r7,r8
800058a0:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800058a4:	8e 69       	ld.sh	r9,r7[0xc]
800058a6:	30 08       	mov	r8,0
800058a8:	f0 09 19 00 	cp.h	r9,r8
800058ac:	c0 51       	brne	800058b6 <_fclose_r+0x4e>
800058ae:	fe b0 fd a4 	rcall	800053f6 <__sfp_lock_release>
800058b2:	30 05       	mov	r5,0
800058b4:	c2 c8       	rjmp	8000590c <_fclose_r+0xa4>
800058b6:	0e 9b       	mov	r11,r7
800058b8:	0c 9c       	mov	r12,r6
800058ba:	fe b0 fd 15 	rcall	800052e4 <_fflush_r>
800058be:	6e c8       	ld.w	r8,r7[0x30]
800058c0:	18 95       	mov	r5,r12
800058c2:	58 08       	cp.w	r8,0
800058c4:	c0 60       	breq	800058d0 <_fclose_r+0x68>
800058c6:	6e 8b       	ld.w	r11,r7[0x20]
800058c8:	0c 9c       	mov	r12,r6
800058ca:	5d 18       	icall	r8
800058cc:	f9 b5 05 ff 	movlt	r5,-1
800058d0:	8e 68       	ld.sh	r8,r7[0xc]
800058d2:	ed b8 00 07 	bld	r8,0x7
800058d6:	c0 41       	brne	800058de <_fclose_r+0x76>
800058d8:	6e 4b       	ld.w	r11,r7[0x10]
800058da:	0c 9c       	mov	r12,r6
800058dc:	c7 ce       	rcall	800055d4 <_free_r>
800058de:	6e db       	ld.w	r11,r7[0x34]
800058e0:	58 0b       	cp.w	r11,0
800058e2:	c0 90       	breq	800058f4 <_fclose_r+0x8c>
800058e4:	ee c8 ff bc 	sub	r8,r7,-68
800058e8:	10 3b       	cp.w	r11,r8
800058ea:	c0 30       	breq	800058f0 <_fclose_r+0x88>
800058ec:	0c 9c       	mov	r12,r6
800058ee:	c7 3e       	rcall	800055d4 <_free_r>
800058f0:	30 08       	mov	r8,0
800058f2:	8f d8       	st.w	r7[0x34],r8
800058f4:	6f 2b       	ld.w	r11,r7[0x48]
800058f6:	58 0b       	cp.w	r11,0
800058f8:	c0 60       	breq	80005904 <_fclose_r+0x9c>
800058fa:	0c 9c       	mov	r12,r6
800058fc:	c6 ce       	rcall	800055d4 <_free_r>
800058fe:	30 08       	mov	r8,0
80005900:	ef 48 00 48 	st.w	r7[72],r8
80005904:	30 08       	mov	r8,0
80005906:	ae 68       	st.h	r7[0xc],r8
80005908:	fe b0 fd 77 	rcall	800053f6 <__sfp_lock_release>
8000590c:	0a 9c       	mov	r12,r5
8000590e:	d8 22       	popm	r4-r7,pc
80005910:	80 00       	ld.sh	r0,r0[0x0]
80005912:	5d 1c       	icall	r12
80005914:	80 00       	ld.sh	r0,r0[0x0]
80005916:	5d 3c       	musfr	r12
80005918:	80 00       	ld.sh	r0,r0[0x0]
8000591a:	5d 5c       	*unknown*

8000591c <fclose>:
8000591c:	d4 01       	pushm	lr
8000591e:	48 38       	lddpc	r8,80005928 <fclose+0xc>
80005920:	18 9b       	mov	r11,r12
80005922:	70 0c       	ld.w	r12,r8[0x0]
80005924:	ca 2f       	rcall	80005868 <_fclose_r>
80005926:	d8 02       	popm	pc
80005928:	00 00       	add	r0,r0
8000592a:	01 e0       	ld.ub	r0,r0[0x6]

8000592c <_lseek_r>:
8000592c:	d4 21       	pushm	r4-r7,lr
8000592e:	16 98       	mov	r8,r11
80005930:	18 97       	mov	r7,r12
80005932:	10 9c       	mov	r12,r8
80005934:	30 08       	mov	r8,0
80005936:	14 9b       	mov	r11,r10
80005938:	48 66       	lddpc	r6,80005950 <_lseek_r+0x24>
8000593a:	12 9a       	mov	r10,r9
8000593c:	8d 08       	st.w	r6[0x0],r8
8000593e:	fe b0 fb e7 	rcall	8000510c <_lseek>
80005942:	5b fc       	cp.w	r12,-1
80005944:	c0 51       	brne	8000594e <_lseek_r+0x22>
80005946:	6c 08       	ld.w	r8,r6[0x0]
80005948:	58 08       	cp.w	r8,0
8000594a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000594e:	d8 22       	popm	r4-r7,pc
80005950:	00 00       	add	r0,r0
80005952:	0a 3c       	cp.w	r12,r5

80005954 <_read_r>:
80005954:	d4 21       	pushm	r4-r7,lr
80005956:	16 98       	mov	r8,r11
80005958:	18 97       	mov	r7,r12
8000595a:	10 9c       	mov	r12,r8
8000595c:	30 08       	mov	r8,0
8000595e:	14 9b       	mov	r11,r10
80005960:	48 66       	lddpc	r6,80005978 <_read_r+0x24>
80005962:	12 9a       	mov	r10,r9
80005964:	8d 08       	st.w	r6[0x0],r8
80005966:	fe b0 f2 ab 	rcall	80003ebc <_read>
8000596a:	5b fc       	cp.w	r12,-1
8000596c:	c0 51       	brne	80005976 <_read_r+0x22>
8000596e:	6c 08       	ld.w	r8,r6[0x0]
80005970:	58 08       	cp.w	r8,0
80005972:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005976:	d8 22       	popm	r4-r7,pc
80005978:	00 00       	add	r0,r0
8000597a:	0a 3c       	cp.w	r12,r5

8000597c <__do_global_ctors_aux>:
8000597c:	d4 21       	pushm	r4-r7,lr
8000597e:	48 57       	lddpc	r7,80005990 <__do_global_ctors_aux+0x14>
80005980:	c0 28       	rjmp	80005984 <__do_global_ctors_aux+0x8>
80005982:	5d 18       	icall	r8
80005984:	20 47       	sub	r7,4
80005986:	6e 08       	ld.w	r8,r7[0x0]
80005988:	5b f8       	cp.w	r8,-1
8000598a:	cf c1       	brne	80005982 <__do_global_ctors_aux+0x6>
8000598c:	d8 22       	popm	r4-r7,pc
8000598e:	d7 03       	nop
80005990:	00 00       	add	r0,r0
80005992:	00 0c       	add	r12,r0

Disassembly of section .exception:

80005a00 <_evba>:
80005a00:	c0 08       	rjmp	80005a00 <_evba>
	...

80005a04 <_handle_TLB_Multiple_Hit>:
80005a04:	c0 08       	rjmp	80005a04 <_handle_TLB_Multiple_Hit>
	...

80005a08 <_handle_Bus_Error_Data_Fetch>:
80005a08:	c0 08       	rjmp	80005a08 <_handle_Bus_Error_Data_Fetch>
	...

80005a0c <_handle_Bus_Error_Instruction_Fetch>:
80005a0c:	c0 08       	rjmp	80005a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80005a10 <_handle_NMI>:
80005a10:	c0 08       	rjmp	80005a10 <_handle_NMI>
	...

80005a14 <_handle_Instruction_Address>:
80005a14:	c0 08       	rjmp	80005a14 <_handle_Instruction_Address>
	...

80005a18 <_handle_ITLB_Protection>:
80005a18:	c0 08       	rjmp	80005a18 <_handle_ITLB_Protection>
	...

80005a1c <_handle_Breakpoint>:
80005a1c:	c0 08       	rjmp	80005a1c <_handle_Breakpoint>
	...

80005a20 <_handle_Illegal_Opcode>:
80005a20:	c0 08       	rjmp	80005a20 <_handle_Illegal_Opcode>
	...

80005a24 <_handle_Unimplemented_Instruction>:
80005a24:	c0 08       	rjmp	80005a24 <_handle_Unimplemented_Instruction>
	...

80005a28 <_handle_Privilege_Violation>:
80005a28:	c0 08       	rjmp	80005a28 <_handle_Privilege_Violation>
	...

80005a2c <_handle_Floating_Point>:
80005a2c:	c0 08       	rjmp	80005a2c <_handle_Floating_Point>
	...

80005a30 <_handle_Coprocessor_Absent>:
80005a30:	c0 08       	rjmp	80005a30 <_handle_Coprocessor_Absent>
	...

80005a34 <_handle_Data_Address_Read>:
80005a34:	c0 08       	rjmp	80005a34 <_handle_Data_Address_Read>
	...

80005a38 <_handle_Data_Address_Write>:
80005a38:	c0 08       	rjmp	80005a38 <_handle_Data_Address_Write>
	...

80005a3c <_handle_DTLB_Protection_Read>:
80005a3c:	c0 08       	rjmp	80005a3c <_handle_DTLB_Protection_Read>
	...

80005a40 <_handle_DTLB_Protection_Write>:
80005a40:	c0 08       	rjmp	80005a40 <_handle_DTLB_Protection_Write>
	...

80005a44 <_handle_DTLB_Modified>:
80005a44:	c0 08       	rjmp	80005a44 <_handle_DTLB_Modified>
	...

80005a50 <_handle_ITLB_Miss>:
80005a50:	c0 08       	rjmp	80005a50 <_handle_ITLB_Miss>
	...

80005a60 <_handle_DTLB_Miss_Read>:
80005a60:	c0 08       	rjmp	80005a60 <_handle_DTLB_Miss_Read>
	...

80005a70 <_handle_DTLB_Miss_Write>:
80005a70:	c0 08       	rjmp	80005a70 <_handle_DTLB_Miss_Write>
	...

80005b00 <_handle_Supervisor_Call>:
80005b00:	fe cf 19 58 	sub	pc,pc,6488

80005b04 <_int0>:
80005b04:	30 0c       	mov	r12,0
80005b06:	fe b0 e3 d1 	rcall	800022a8 <_get_interrupt_handler>
80005b0a:	58 0c       	cp.w	r12,0
80005b0c:	f8 0f 17 10 	movne	pc,r12
80005b10:	d6 03       	rete

80005b12 <_int1>:
80005b12:	30 1c       	mov	r12,1
80005b14:	fe b0 e3 ca 	rcall	800022a8 <_get_interrupt_handler>
80005b18:	58 0c       	cp.w	r12,0
80005b1a:	f8 0f 17 10 	movne	pc,r12
80005b1e:	d6 03       	rete

80005b20 <_int2>:
80005b20:	30 2c       	mov	r12,2
80005b22:	fe b0 e3 c3 	rcall	800022a8 <_get_interrupt_handler>
80005b26:	58 0c       	cp.w	r12,0
80005b28:	f8 0f 17 10 	movne	pc,r12
80005b2c:	d6 03       	rete

80005b2e <_int3>:
80005b2e:	30 3c       	mov	r12,3
80005b30:	fe b0 e3 bc 	rcall	800022a8 <_get_interrupt_handler>
80005b34:	58 0c       	cp.w	r12,0
80005b36:	f8 0f 17 10 	movne	pc,r12
80005b3a:	d6 03       	rete

80005b3c <ipr_val>:
80005b3c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
80005b4c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005b5c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005b6c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005b7c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005b8c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005b9c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bbc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bcc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bdc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80005bfc:	d7 03 d7 03                                         ....

Disassembly of section .fini:

80005c00 <_fini>:
80005c00:	eb cd 40 40 	pushm	r6,lr
80005c04:	48 26       	lddpc	r6,80005c0c <_fini+0xc>
80005c06:	1e 26       	rsub	r6,pc
80005c08:	c0 48       	rjmp	80005c10 <_fini+0x10>
80005c0a:	d7 03       	nop
80005c0c:	80 00       	ld.sh	r0,r0[0x0]
80005c0e:	5b ea       	cp.w	r10,-2
80005c10:	fe b0 e2 3c 	rcall	80002088 <__do_global_dtors_aux>
80005c14:	e3 cd 80 40 	ldm	sp++,r6,pc
